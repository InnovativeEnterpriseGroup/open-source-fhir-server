{
	"info": {
		"_postman_id": "c87ffeae-4efc-43f0-9e84-654e300e0f63",
		"name": "roqr",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "fhir-api-service",
			"item": [
				{
					"name": "create test data",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "crud",
					"item": [
						{
							"name": "Can create an Organization resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Organization resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Organization resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Organization\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Organization resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_organization_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Organization resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Organization/\" + pm.environment.get(\"fhir_created_organization_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"resourceType\": \"Organization\",\n            \"meta\": {\n                \"profile\": [\n                    \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n                ]\n            },\n            \"identifier\": [\n                {\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n                    \"value\": \"03X\"\n                }\n            ],\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/organization-type\",\n                            \"code\": \"prov\",\n                            \"display\": \"Healthcare Provider\"\n                        }\n                    ]\n                }\n            ],\n            \"name\": \"NHS EREWASH\",\n            \"address\": [\n                {\n                    \"use\": \"work\",\n                    \"type\": \"both\",\n                    \"line\": [\n                        \"Toll Bar House\",\n                        \"1 Derby Road\"\n                    ],\n                    \"city\": \"Ilkeston\",\n                    \"district\": \"Derbyshire\",\n                    \"postalCode\": \"DE7 5FH\"\n                }\n            ]\n        }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Organization"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read an Organization resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Organization Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Organization Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Organization\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Organization Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_organization_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Organization/{{fhir_created_organization_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Organization",
										"{{fhir_created_organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Practitioner resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Practitioner resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Practitioner resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Practitioner resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Practitioner resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Practitioner\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n                        \"value\": \"G8133438\"\n                    }\n                ],\n                \"name\": [\n                    {\n                        \"family\": \"Bhatia\",\n                        \"given\": [\n                            \"AA\"\n                        ],\n                        \"prefix\": [\n                            \"Dr.\"\n                        ]\n                    }\n                ],\n                \"telecom\": [\n                    {\n                        \"system\": \"email\",\n                        \"value\": \"abhatia@nhs.skynet\",\n                        \"use\": \"work\"\n                    },\n                    {\n                        \"system\": \"phone\",\n                        \"value\": \"0115 9737320\",\n                        \"use\": \"work\"\n                    }\n                ],\n                \"address\": [\n                    {\n                        \"line\": [\n                            \"Regent Street\",\n                            \"Long Eaton\"\n                        ],\n                        \"city\": \"Nottingham\",\n                        \"district\": \"Derbyshire\",\n                        \"postalCode\": \"NG10 1QQ\"\n                    }\n                ],\n                \"gender\": \"male\"\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Practitioner",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Practitioner"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Practitioner Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Practitioner Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Practitioner Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_practitioner_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Practitioner/{{fhir_created_practitioner_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Practitioner",
										"{{fhir_created_practitioner_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"ZZZTEST\",\r\n        \"given\": [\r\n            \"ZZZ\"\r\n        ],\r\n        \"prefix\": [\r\n            \"ZZZ\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1986-02-27\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Patient Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Patient Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Patient Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_patient_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Patient resource Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Patient Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Patient Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Patient Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_patient_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can update a Patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 204 returned\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"//Response body is empty"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"id\":\"{{fhir_created_patient_id}}\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"ZZZTESTUPDATE\",\r\n        \"given\": [\r\n            \"ZZZUPDATE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"ZZZUPDATE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1986-02-27\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Patient resource after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Patient Resource after an update - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Patient Resource after an update - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Patient Resource after an update - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"//Did the updates \"stick\" (persist)",
											"pm.test(\"Can Read FHIR Patient Resource after an update - Did the updates stick?\", function () {",
											"    var jsonData = pm.response.json();",
											"    var name = jsonData.name;",
											"    pm.expect(name.length).to.eql(1) && ",
											"        pm.expect(name[0].family).to.eql(\"ZZZTESTUPDATE\") && ",
											"            pm.expect(name[0].given[0]).to.eql(\"ZZZUPDATE\") &&  ",
											"                pm.expect(name[0].prefix[0]).to.eql(\"ZZZUPDATE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can delete a patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Patient Resource - 202 returned\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot read a patient resource after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Cannot Read a FHIR Patient Resource after delete - 404 returned\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"//Resource is returned in body - operation outcome",
											"pm.test(\"Cannot Read a FHIR Patient Resource after delete - OperationOutcome is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"OperationOutcome\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient",
										"{{fhir_created_patient_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"finished\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\"\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read an Encounter resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read FHIR Encounter Resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Read FHIR Encounter Resource - resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Resource id is equal to the created resource id",
											"pm.test(\"Can Read FHIR Encounter Resource - resource id === server assigned resource id)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist &&",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"fhir_created_encounter_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter/{{fhir_created_encounter_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter",
										"{{fhir_created_encounter_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a PractitionerRole resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a PractitionerRole resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a PractitionerRole resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"PractitionerRole\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a PractitionerRole resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_role_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a PractitionerRole resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a PractitionerRole resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/PractitionerRole/\" + pm.environment.get(\"fhir_created_practitioner_role_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a PractitionerRole resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"PractitionerRole\",\n    \"practitioner\": {\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n        \"display\": \"Dr. AA Bhatia\"\n    },\n    \"organization\": {\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\n        \"display\": \"NHS EREWASH\"\n    },\n    \"code\": [\n        {\n            \"coding\": [\n                {\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-SDSJobRoleName-1\",\n                    \"code\": \"R0260\",\n                    \"display\": \"General Medical Practitioner\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/PractitionerRole",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"PractitionerRole"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scratch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Practitioner resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Practitioner resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Practitioner resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Practitioner resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Practitioner resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=janice",
									"protocol": "https",
									"host": [
										"data",
										"developer",
										"nhs",
										"uk"
									],
									"path": [
										"ccri-fhir",
										"STU3",
										"Patient"
									],
									"query": [
										{
											"key": "name",
											"value": "janice"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "search",
					"item": [
						{
							"name": "Can create an Organization resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Organization resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Organization resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Organization\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Organization resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_organization_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Organization resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Organization/\" + pm.environment.get(\"fhir_created_organization_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"resourceType\": \"Organization\",\n            \"meta\": {\n                \"profile\": [\n                    \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n                ]\n            },\n            \"identifier\": [\n                {\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n                    \"value\": \"03X\"\n                }\n            ],\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/organization-type\",\n                            \"code\": \"prov\",\n                            \"display\": \"Healthcare Provider\"\n                        }\n                    ]\n                }\n            ],\n            \"name\": \"NHS EREWASH\",\n            \"address\": [\n                {\n                    \"use\": \"work\",\n                    \"type\": \"both\",\n                    \"line\": [\n                        \"Toll Bar House\",\n                        \"1 Derby Road\"\n                    ],\n                    \"city\": \"Ilkeston\",\n                    \"district\": \"Derbyshire\",\n                    \"postalCode\": \"DE7 5FH\"\n                }\n            ]\n        }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Organization"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Policy resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Policy resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Policy resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Policy\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Policy resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_policy_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Organization resource - Location header is present and in correct format /Policy/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Policy/\" + pm.environment.get(\"fhir_created_policy_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Policy resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Policy\",\n    \"status\": \"active\",\n    \"name\": \"Test Helm Privacy 13\",\n    \"narrative\": \"###text body ###\",\n    \"basis\": \"inclusive\",\n    \"scope\": \"global\",\n    \"action\": \"nothing\",\n    \"rule\": [\n        {\n            \"access\": {\n                \"organization\": {\n                    \"reference\": \"Organization/{{fhir_created_organization_id}}\"\n                }\n            },\n            \"data\": [\n                {\n                    \"resource\": \"Patient\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Policy",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Terms Policy resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Terms Policy resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Organization resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Policy\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Terms Policy resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_terms_policy_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Terms Policy resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Terms Policy resource - Location header is present and in correct format /Policy/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Policy/\" + pm.environment.get(\"fhir_created_terms_policy_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Terms Policy resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"action\": \"nothing\",\n    \"basis\": \"inclusive\",\n    \"name\": \"Test Helm Terms 1\",\n    \"resourceType\": \"Policy\",\n    \"rule\": [\n        {\n            \"access\": {\n                \"organization\": {\n                    \"reference\": \"Organization/{{fhir_created_organization_id}}\"\n                }\n            },\n            \"data\": [\n                {\n                    \"resource\": \"Patient\"\n                }\n            ]\n        }\n    ],\n    \"scope\": \"global\",\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Policy",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Policy by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Policy by name - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Policy by name - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a policy...",
											"pm.test(\"Can search for Policy by name - 1 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1) && ",
											"        pm.expect(jsonData.entry[0].resource.resourceType).to.eql(\"Policy\");",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for Policy by name - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for Policy by name - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Policy by name - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each Location is set to \"match\"",
											"pm.test(\"Can search for Policy by name - search mode for each policy resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Policy') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Policy?name:exact=Test Helm Privacy 13",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Policy"
									],
									"query": [
										{
											"key": "name:exact",
											"value": "Test Helm Privacy 13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Terms Policy by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Terms Policy by name - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Terms Policy by name - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a policy...",
											"pm.test(\"Can search for Terms Policy by name - 1 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1) && ",
											"        pm.expect(jsonData.entry[0].resource.resourceType).to.eql(\"Policy\");",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for Terms Policy by name - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for Terms Policy by name - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Terms Policy by name - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each Location is set to \"match\"",
											"pm.test(\"Can search for Terms Policy by name - search mode for each policy resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Policy') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Policy?name:exact=Test Helm Terms 1",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Policy"
									],
									"query": [
										{
											"key": "name:exact",
											"value": "Test Helm Terms 1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Location resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Location resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Location resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Location\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Location resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_location_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Location resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Location resource - Location header is present and in correct format /Location/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Location/\" + pm.environment.get(\"fhir_created_location_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Location resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Location\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Location-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"use\": \"usual\",\n                        \"system\": \"https://fhir.nhs.uk/Id/ods-site-code\",\n                        \"value\": \"RTG08\"\n                    }\n                ],\n                \"name\": \"Long Eaton Clinic\",\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/RoleCode\",\n                            \"code\": \"CSC\",\n                            \"display\": \"community service center\"\n                        }\n                    ]\n                },\n                \"telecom\": [\n                    {\n                        \"system\": \"phone\",\n                        \"value\": \"0115 855 4034\",\n                        \"use\": \"work\"\n                    },\n                    {\n                        \"system\": \"fax\",\n                        \"value\": \"0532 123 4567\",\n                        \"use\": \"work\"\n                    }\n                ],\n                \"address\": {\n                    \"use\": \"home\",\n                    \"type\": \"postal\",\n                    \"line\": [\n                        \"Midland Street\",\n                        \"Long Eaton\"\n                    ],\n                    \"city\": \"Nottingham\",\n                    \"district\": \"Derbyshire\",\n                    \"postalCode\": \"NG10 1RY\"\n                },\n                \"physicalType\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/location-physical-type\",\n                            \"code\": \"bu\",\n                            \"display\": \"Building\"\n                        }\n                    ]\n                },\n                \"managingOrganization\": {\n                    \"reference\": \"Organization/{{fhir_created_organization_id}}\",\n                    \"display\": \"Derby Teaching Hospitals NHS Foundation Trust\"\n                }\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Location",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Location"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Practitioner resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Practitioner resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Practitioner resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Practitioner resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Practitioner resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Practitioner\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n                        \"value\": \"G8133438\"\n                    }\n                ],\n                \"name\": [\n                    {\n                        \"family\": \"Bhatia\",\n                        \"given\": [\n                            \"AA\"\n                        ],\n                        \"prefix\": [\n                            \"Dr.\"\n                        ]\n                    }\n                ],\n                \"telecom\": [\n                    {\n                        \"system\": \"email\",\n                        \"value\": \"abhatia@nhs.skynet\",\n                        \"use\": \"work\"\n                    },\n                    {\n                        \"system\": \"phone\",\n                        \"value\": \"0115 9737320\",\n                        \"use\": \"work\"\n                    }\n                ],\n                \"address\": [\n                    {\n                        \"line\": [\n                            \"Regent Street\",\n                            \"Long Eaton\"\n                        ],\n                        \"city\": \"Nottingham\",\n                        \"district\": \"Derbyshire\",\n                        \"postalCode\": \"NG10 1QQ\"\n                    }\n                ],\n                \"gender\": \"male\"\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Practitioner",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Practitioner"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a PractitionerRole resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a PractitionerRole resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a PractitionerRole resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"PractitionerRole\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a PractitionerRole resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_role_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a PractitionerRole resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a PractitionerRole resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/PractitionerRole/\" + pm.environment.get(\"fhir_created_practitioner_role_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a PractitionerRole resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"PractitionerRole\",\n    \"practitioner\": {\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n        \"display\": \"Dr. AA Bhatia\"\n    },\n    \"organization\": {\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\n        \"display\": \"NHS EREWASH\"\n    },\n    \"code\": [\n        {\n            \"coding\": [\n                {\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-SDSJobRoleName-1\",\n                    \"code\": \"R0260\",\n                    \"display\": \"General Medical Practitioner\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/PractitionerRole",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"PractitionerRole"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource ZZZWIGHT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"WIGHT\",\r\n        \"given\": [\r\n            \"ZZZ\"\r\n        ],\r\n        \"prefix\": [\r\n            \"ZZZ\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1986-02-27\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource AAALANNISTER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"LANNISTER\",\r\n        \"given\": [\r\n            \"AAA\"\r\n        ],\r\n        \"prefix\": [\r\n            \"AAA\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1983-01-27\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource BBBTARGARYEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"TARGARYEN\",\r\n        \"given\": [\r\n            \"BBB\"\r\n        ],\r\n        \"prefix\": [\r\n            \"BBB\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"1978-02-13\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource CCCSTARK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"STARK\",\r\n        \"given\": [\r\n            \"CCC\"\r\n        ],\r\n        \"prefix\": [\r\n            \"CCC\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"1989-10-15\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource DDDBARATHEON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"BARATHEON\",\r\n        \"given\": [\r\n            \"DDD\"\r\n        ],\r\n        \"prefix\": [\r\n            \"DDD\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"1981-11-12\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource EEEGREYJOY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"EEE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"EEE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1995-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource Michael",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    },\r\n    {\r\n    \t\"system\": \"https://data.developer.nhs.uk/ccri-fhir/id\",\r\n        \"value\": \"1182\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"ZZZTEST\",\r\n        \"given\": [\r\n            \"MICHAEL\"\r\n        ],\r\n        \"prefix\": [\r\n            \"MR\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"1980-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"finished\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource status === arrived",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"arrived\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Location by ODS site code and include Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Location by ODS site code and include Organization - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Location by ODS site code and include Organization - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search for Location by ODS site code and include Organization - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//ODS Code === ods code searched for",
											"pm.test(\"Can search for Location by ODS site code and include Organization - ods site code === ods site code searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(\"RTG08\");",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for Location by ODS site code and include Organization - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for Location by ODS site code and include Organization - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Location by ODS site code and include Organization - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each Location is set to \"match\"",
											"pm.test(\"Can search for Location by ODS site code and include Organization - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Location') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one organisation is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search for Location by ODS site code and include Organization - only 1 unique Organisation resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationCount++;",
											"         }",
											"    });",
											"    pm.expect(organizationCount).to.eql(1);  ",
											"});",
											"//Entry search mode for organisation is set to \"include\"",
											"pm.test(\"Can search for Location by ODS site code and include Organization - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct organisation resource is included",
											"pm.test(\"Can search for Location by ODS site code and include Organization - Organisation resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationReferenceId = \"Organization/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationReferenceId = organizationReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.managingOrganization.reference).to.eql(organizationReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Location?identifier=https://fhir.nhs.uk/Id/ods-site-code|RTG08&_include=Location:organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Location"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/ods-site-code|RTG08"
										},
										{
											"key": "_include",
											"value": "Location:organization"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number and include general practitioner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one practitioner is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - only 1 unique Practitioner resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerCount++;",
											"         }",
											"    });",
											"    pm.expect(practitionerCount).to.eql(1);  ",
											"});",
											"//Entry search mode for practitioner is set to \"include\"",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct practitioner resource is included",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - Practitioner resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerReferenceId = \"Practitioner/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerReferenceId = practitionerReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.generalPractitioner[0].reference).to.eql(practitionerReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&_include=Patient:general-practitioner",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "_include",
											"value": "Patient:general-practitioner"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number and include Organisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one organisation is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - only 1 unique Organisation resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationCount++;",
											"         }",
											"    });",
											"    pm.expect(organizationCount).to.eql(1);  ",
											"});",
											"//Entry search mode for organisation is set to \"include\"",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct organisation resource is included",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - Organisation resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationReferenceId = \"Organization/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationReferenceId = organizationReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.managingOrganization.reference).to.eql(organizationReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&_include=Patient:organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "_include",
											"value": "Patient:organization"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number and include Organisation, General Practitioner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//3 resources are returned and that resource is a patient...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Can search Patient by NHS Number and include Organisation, General Practitioner - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one organisation is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - only 1 unique Organisation resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationCount++;",
											"         }",
											"    });",
											"    pm.expect(organizationCount).to.eql(1);  ",
											"});",
											"//Entry search mode for organisation is set to \"include\"",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - search mode for each included resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct organisation resource is included",
											"pm.test(\"Can search Patient by NHS Number and include Organisation - Organisation resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organizationReferenceId = \"Organization/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organizationReferenceId = organizationReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.managingOrganization.reference).to.eql(organizationReferenceId);",
											"         }",
											"    });",
											"});",
											"//Only one practitioner is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - only 1 unique Practitioner resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerCount++;",
											"         }",
											"    });",
											"    pm.expect(practitionerCount).to.eql(1);  ",
											"});",
											"//Entry search mode for practitioner is set to \"include\"",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - search mode for each included resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct practitioner resource is included",
											"pm.test(\"Can search Patient by NHS Number and include general practitioner - Practitioner resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerReferenceId = \"Practitioner/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerReferenceId = practitionerReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.generalPractitioner[0].reference).to.eql(practitionerReferenceId);",
											"         }",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&_include=Patient:general-practitioner&_include=Patient:organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "_include",
											"value": "Patient:general-practitioner"
										},
										{
											"key": "_include",
											"value": "Patient:organization"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Patient by NHS Number and revinclude Encounter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&_revinclude=Encounter:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "_revinclude",
											"value": "Encounter:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for an Encounter and include Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Encounter Resource by _id and include Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Encounter Resource by _id and include Patient - 200 returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Encounter Resource by _id and include Patient - 2 resources returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?_id={{fhir_created_encounter_id}}&_include=Encounter:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_encounter_id}}"
										},
										{
											"key": "_include",
											"value": "Encounter:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for an Encounter by patient NHS Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?patient:identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "patient:identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for an Encounter by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for an Encounter by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for an Encounter by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search for an Encounter by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for an Encounter by patient reference - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for an Encounter by patient reference - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for an Encounter by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for an 'arrived' Encounter by patient NHS Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number- 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number- nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Encounter status === 'arrived'",
											"pm.test(\"Can search for an 'arrived' Encounter by patient NHS Number - status === 'arrived'\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.status).to.eql('arrived');",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?patient:identifier=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}&status=arrived",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "patient:identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										},
										{
											"key": "status",
											"value": "arrived"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search Encounter by _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Encounter Resource by _id - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Encounter Resource by _id - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Encounter Resource by _id - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?_id={{fhir_created_encounter_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_encounter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can get 2nd page of female Patient resources search with page size of 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can get 2nd page of female Patient resources search - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can get 2nd page of female Patient resources search - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can get 2nd page of female Patient resources search - 5 links are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(5);",
											"});",
											"//First, Next, Self, Previous, Last are present...",
											"pm.test(\"Can get 2nd page of female Patient resources search - all link relations are present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    links.forEach(function(link) {",
											"      pm.expect(link.relation).to.satisfy(function(relation) {",
											"          return relation === \"first\" || relation === \"next\" || relation === \"self\"",
											"            || relation === \"previous\" || relation === \"last\";",
											"      })",
											"    });",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"Can get 2nd page of female Patient resources search - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//1 resource is returned in this page...",
											"pm.test(\"Can get 2nd page of female Patient resources search - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//1 result is a Patient",
											"pm.test(\"Can get 2nd page of female Patient resources search  - resource returned is a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"//Patient result returned is a female",
											"pm.test(\"Can get 2nd page of female Patient resources search - resource returned is female\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.gender).to.eql(\"female\");",
											"});",
											"//Previous results are NOT contained in the bundle...",
											"pm.test(\"Can get 2nd page of female Patient resources search - previous results are NOT present\", function() {",
											"   var jsonData = pm.response.json();",
											"   var resource = jsonData.entry[0].resource;",
											"   pm.expect(pm.environment.get(\"patient_search_result_ids\")).to.not.contain(resource.id);",
											"});",
											"//Store the applicable links in env variable (for subsequent tests)..",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"patient_search_next_page\", _.find(jsonData.link, function(l) { return l.relation === 'next'; }).url);",
											"//Capture the result id as will need to check the result only appears ONCE in a paged search...",
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"resultIds.push(jsonData.entry[0].resource.id);",
											"pm.environment.set(\"patient_search_result_ids\",resultIds);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{patient_search_next_page}}",
									"host": [
										"{{patient_search_next_page}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can get 3rd page of female Patient resources search with page size of 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can get 3rd page of female Patient resources search - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can get 3rd page of female Patient resources search - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can get 3rd page of female Patient resources search - 5 links are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(5);",
											"});",
											"//First, Next, Self, Previous, Last are present...",
											"pm.test(\"Can get 3rd page of female Patient resources search - all link relations are present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    links.forEach(function(link) {",
											"      pm.expect(link.relation).to.satisfy(function(relation) {",
											"          return relation === \"first\" || relation === \"next\" || relation === \"self\"",
											"            || relation === \"previous\" || relation === \"last\";",
											"      })",
											"    });",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"Can get 3rd page of female Patient resources search - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//1 resource is returned in this page...",
											"pm.test(\"Can get 3rd page of female Patient resources search - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//1 result is a Patient",
											"pm.test(\"Can get 3rd page of female Patient resources search  - resource returned is a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"//Patient result returned is a female",
											"pm.test(\"Can get 3rd page of female Patient resources search - resource returned is female\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.gender).to.eql(\"female\");",
											"});",
											"//Previous results are NOT contained in the bundle...",
											"pm.test(\"Can get 3rd page of female Patient resources search - previous results are NOT present\", function() {",
											"   var jsonData = pm.response.json();",
											"   var resource = jsonData.entry[0].resource;",
											"   pm.expect(pm.environment.get(\"patient_search_result_ids\")).to.not.contain(resource.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{patient_search_next_page}}",
									"host": [
										"{{patient_search_next_page}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for male Patient resources and page through results with page size of 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - 1 resource bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - 5 links are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(5);",
											"});",
											"//First, Next, Self, Previous, Last are present...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - all link relations are present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    links.forEach(function(link) {",
											"      pm.expect(link.relation).to.satisfy(function(relation) {",
											"          return relation === \"first\" || relation === \"next\" || relation === \"self\"",
											"            || relation === \"previous\" || relation === \"last\";",
											"      })",
											"    });",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//1 resource is returned in this page...",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"//1 result is a Patient",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - both resources returned are a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    jsonData.entry.forEach(function(entry) {",
											"        pm.expect(entry.resource.resourceType).to.eql(\"Patient\");",
											"    });",
											"});",
											"//Patient result returned is a male",
											"pm.test(\"Can search for male Patient resources and page through results with page size of 2 - both resources returned are a male\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.gender).to.eql(\"male\");",
											"});",
											"var jsonData = pm.response.json();",
											"//Store the applicable links in env variable (for subsequent tests)..",
											"pm.environment.set(\"patient_search_next_page\", _.find(jsonData.link, function(l) { return l.relation === 'next'; }).url);",
											"//Capture the result id as will need to check the result only appears ONCE in a paged search...",
											"var resultIds = [];",
											"jsonData.entry.forEach(function(entry) {",
											"    resultIds.push(entry.resource.id);",
											"});",
											"pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?gender=male&_count=2",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "gender",
											"value": "male"
										},
										{
											"key": "_count",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can get 2nd page of male Patient resources search with page size of 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - 5 links are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(5);",
											"});",
											"//First, Next, Self, Previous, Last are present...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - all link relations are present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    links.forEach(function(link) {",
											"      pm.expect(link.relation).to.satisfy(function(relation) {",
											"          return relation === \"first\" || relation === \"next\" || relation === \"self\"",
											"            || relation === \"previous\" || relation === \"last\";",
											"      })",
											"    });",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"CCan get 2nd page of male Patient resources search with page size of 2 - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//1 resource is returned in this page...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//1 result is a Patient",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - resource returned is a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"//Patient result returned is a female",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - resource returned is male\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.gender).to.eql(\"male\");",
											"});",
											"//Previous results are NOT contained in the bundle...",
											"pm.test(\"Can get 2nd page of male Patient resources search with page size of 2 - previous results are NOT present\", function() {",
											"   var jsonData = pm.response.json();",
											"   var resource = jsonData.entry[0].resource;",
											"   pm.expect(pm.environment.get(\"patient_search_result_ids\")).to.not.contain(resource.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{patient_search_next_page}}",
									"host": [
										"{{patient_search_next_page}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for male patients and sort by -family",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for male patients and sort by -name - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for male patients and sort by -name - 1 bundle resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for male patients and sort by -name - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for male patients and sort by -name - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 3...",
											"pm.test(\"Can search for male patients and sort by -name - Bundle total === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(3);",
											"});",
											"//Sorted Reverse Alpha... T,S,B",
											"pm.test(\"Can search for male patients and sort by -name - results are sorted reverse alphabetically\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.name[0].family).to.eql(\"TARGARYEN\") &&",
											"        pm.expect(jsonData.entry[1].resource.name[0].family).to.eql(\"STARK\") && ",
											"            pm.expect(jsonData.entry[2].resource.name[0].family).to.eql(\"BARATHEON\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?gender=male&_sort=-family",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "gender",
											"value": "male"
										},
										{
											"key": "_sort",
											"value": "-family"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for PractitionerRole by practitioner reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - 1 bundle resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for PracititionerRole by practitioner reference- 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//Does the practitioner referenced match that which is in the query?",
											"pm.test(\"Can search for PracititionerRole by practitioner reference - Does the practitioner referenced match that which is in the query?\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.practitioner.reference).to.eql(\"Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/PractitionerRole?practitioner=Practitioner/{{fhir_created_practitioner_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"PractitionerRole"
									],
									"query": [
										{
											"key": "practitioner",
											"value": "Practitioner/{{fhir_created_practitioner_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for PractitionerRole by organization reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for PractitionerRole by organization reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for PractitionerRole by organization reference - 1 bundle resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for PractitionerRole by organization reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for PractitionerRole by organization reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for PractitionerRole by organization reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//Does the organization referenced match that which is in the query?",
											"pm.test(\"Can search for PractitionerRole by organization reference - Does the practitioner referenced match that which is in the query?\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.organization.reference).to.eql(\"Organization/\" + pm.environment.get(\"fhir_created_organization_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/PractitionerRole?organization=Organization/{{fhir_created_organization_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"PractitionerRole"
									],
									"query": [
										{
											"key": "organization",
											"value": "Organization/{{fhir_created_organization_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource FFFGREYJOY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"FFF\"\r\n        ],\r\n        \"prefix\": [\r\n            \"FFF\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"2000-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource GGGGREYJOY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"GGG\"\r\n        ],\r\n        \"prefix\": [\r\n            \"GGG\"\r\n        ]\r\n    }],\r\n    \"gender\": \"male\",\r\n    \"birthDate\": \"2001-03-19\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for female Patient resources where name startswith GREYJOY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"var _ = require('lodash');",
											"//Expect 200 success...",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - Bundle total === 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(2);",
											"});",
											"//2 resources are returned in this page...",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - resources returned are Patient resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - resources returned are female\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.gender).to.eql(\"female\");",
											"    pm.expect(jsonData.entry[1].resource.gender).to.eql(\"female\");",
											"});",
											"",
											"pm.test(\"Can search for female Patient resources where name contains GREYJOY - resources returned have a family name of GREYJOY\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].resource.name[0].family).to.eql(\"GREYJOY\");",
											"    pm.expect(jsonData.entry[1].resource.name[0].family).to.eql(\"GREYJOY\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?family=GREYJOY&gender=female",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "family",
											"value": "GREYJOY"
										},
										{
											"key": "gender",
											"value": "female"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an AllergyIntolerance resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an AllergyIntolerance resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an AllergyIntolerance resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an AllergyIntolerance resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_allergy_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an AllergyIntolerance resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an AllergyIntolerance resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_allergy_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an AllergyIntolerance resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"AllergyIntolerance\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-AllergyIntolerance-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://fhir.leedsth.nhs.uk/Id/allergy\",\n            \"value\": \"100018\"\n        }\n    ],\n    \"clinicalStatus\": \"active\",\n    \"verificationStatus\": \"unconfirmed\",\n    \"code\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"160244002\",\n                \"display\": \"No Known Allergies\"\n            }\n        ]\n    },\n    \"patient\": {\n\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"assertedDate\": \"2017-10-19T00:00:00+00:00\",\n    \"asserter\": {\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n        \"display\": \"Dr S Smith\"\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/AllergyIntolerance",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"AllergyIntolerance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Consent resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Consent resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Consent resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Consent\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Consent resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_consent_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an MedicationStatement resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Consent resource - Location header is present and in correct format /Consent/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Consent/\" + pm.environment.get(\"fhir_created_consent_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Consent resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Consent\",\n                \"identifier\": {\n                    \"system\": \"https://fhir.tpp.co.uk/Consent/Identifier\",\n                    \"value\": \"consent1\"\n                },\n                \"status\": \"active\",\n                \"patient\": {\n                    \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\t\t\t\"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n                },\n                \"dateTime\": \"2019-06-23T23:00:00+00:00\",\n                \"actor\": [\n                    {\n                        \"role\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                                    \"code\": \"PROV\",\n                                    \"display\": \"Healthcare Provider\"\n                                }\n                            ]\n                        },\n                        \"reference\": {\n                            \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                            \"display\": \"Dr K Rodger\"\n                        }\n                    }\n                ],\n                \"policy\": [\n                    {\n                        \"authority\": \"http://fhir.nhs.uk/Policy/EOLC\"\n                    }\n                ],\n                \"purpose\": [\n                    {\n                        \"system\": \"http://snomed.info/sct\",\n                        \"code\": \"882981000000105\",\n                        \"display\": \"Consent given by legitimate patient representative for sharing end of life care coordination record (finding)\"\n                    }\n                ]\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Consent",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Consent resources by consentor reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Consent resources by consentor reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Consent resources by consentor reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Consent resources by consentor reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Consent resources by consentor reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Consent resources by consentor reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Consent resources by consentor reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Consent resources by consentor reference - resources returned are Consent resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Consent resources by consentor reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.patient.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Consent?consentor=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Consent"
									],
									"query": [
										{
											"key": "consentor",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Consent resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Consent resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Consent resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Consent resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Consent resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Consent resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Consent resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Consent resources by patient reference - resources returned are Consent resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Consent resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.patient.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Consent?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Consent"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude Consent - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude Consent - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude Consent - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude Consent - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Patient search revinclude Consent - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude Consent - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Consent - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Consent - 1 consent resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=Consent:consentor",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "Consent:consentor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Consent search by status include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Consent search by status include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Consent search by status include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Consent search by status include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Consent search by status include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Consent search by status include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Consent search by status include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Consent search by status include referenced Patient - 1 Consent resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"pm.test(\"Can Consent search by status include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Consent?status=active&_include=Consent:consentor",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Consent"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "_include",
											"value": "Consent:consentor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource for Observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"arrived\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Medication resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Medication resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"CCan create an Medication resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Medication\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Medication resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_medication_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Medication resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Medication resource - Location header is present and in correct format /Medication/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_medication_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Medication resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Medication\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Medication-1\"\n        ]\n    },\n    \"code\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"13255311000001101\",\n                \"display\": \"Asacol 800mg MR gastro-resistant tablets (Allergan Ltd)\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Medication",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Medication"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Medication by code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Medication by code - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Medication by code - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Medication by code - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Medication by code - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Medication by code - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Medication by code - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Medication by code - resources returned are Medication resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Medication\");",
											"});",
											"//test category is exactly as what was searched for",
											"pm.test(\"Can search for Medication by code - medication code matches that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.category[0].coding[0].code).to.eql(\"13255311000001101\") &&",
											"        pm.expect(resource.category[0].coding[0].system).to.eql(\"http://snomed.info/sct\")",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Medication?code=http://snomed.info/sct|13255311000001101",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Medication"
									],
									"query": [
										{
											"key": "code",
											"value": "http://snomed.info/sct|13255311000001101"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an MedicationStatement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an MedicationStatement resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an MedicationStatementn resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an MedicationStatement resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_medication_statement_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an MedicationStatement resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an MedicationStatement resource - Location header is present and in correct format /MedicationStatement/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_medication_statement_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an MedicationStatement resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"MedicationStatement\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-MedicationStatement-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://tools.ietf.org/html/rfc4122\",\n\t\t\"value\": \"154de259-cbd3-4430-aac9-95fdbf19d88e\"\n\t}],\n\t\"status\": \"active\",\n\t\"medicationReference\": {\n\t\t\"reference\": \"Medication/{{fhir_created_medication_id}}\"\n\t},\n\t\"effectiveDataTime\":\"2019-03-09T09:05:00+00:00\",\n\t\"subject\": {\n\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n\t},\n\t\"taken\": \"y\",\n\t\"dosage\": [{\n\t\t\"text\": \"10mg as necessary\",\n\t\t\"patientInstruction\": \"Not to be taken more frequently than three times a day.\",\n\t\t\"route\": {\n\t\t\t\"coding\": [{\n\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\"code\": \"26643006\",\n\t\t\t\t\"display\": \"Oral\"\n\t\t\t}]\n\t\t}\n\t}]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for MedicationStatement resources by MedicationStatement Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for MedicationStatement resources by MedicationStatement Identifier - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement?identifier=https://tools.ietf.org/html/rfc4122|154de259-cbd3-4430-aac9-95fdbf19d88e",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://tools.ietf.org/html/rfc4122|154de259-cbd3-4430-aac9-95fdbf19d88e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for MedicationStatement resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - resources returned are AllergyIntolerance resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for MedicationStatement resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for MedicationStatement resources by patient nhs number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for MedicationStatement resources by patient nhs number - resources returned are MedicationStatement resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"//NHS number matches that of the NHS number searched for",
											"pm.test(\"Can Search FHIR MedicationStatement Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement?patient=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									],
									"query": [
										{
											"key": "patient",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude MedicationStatement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude MedicationStatement - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Patient search revinclude MedicationStatement - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude MedicationStatement - 1 medication statement resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=MedicationStatement:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "MedicationStatement:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can MedicationStatement search by status include referenced Medication and Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 MedicationStatement resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"MedicationStatement\");",
											"});",
											"",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 Medication resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Medication\");",
											"});",
											"",
											"pm.test(\"Can MedicationStatement search by status include referenced Medication and Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[2].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/MedicationStatement?status=active&_include=MedicationStatement:medication&_include=MedicationStatement:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"MedicationStatement"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "_include",
											"value": "MedicationStatement:medication"
										},
										{
											"key": "_include",
											"value": "MedicationStatement:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource Basophil",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Observation\",\n                \"status\": \"final\",\n                \"category\": [\n                    {\n                        \"coding\": [\n                            {\n                                \"system\": \"http://hl7.org/fhir/observation-category\",\n                                \"code\": \"laboratory\",\n                                \"display\": \"Laboratory\"\n                            }\n                        ]\n                    }\n                ],\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://snomed.info/sct\",\n                            \"code\": \"1022571000000108\",\n                            \"display\": \"Basophil count\"\n                        }\n                    ]\n                },\n                \"subject\": {\n\t\t\t\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\t\t\t\"identifier\": {\n\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\"value\": \"{{lastTestNHSNumber}}\"\n\t\t\t\t\t}\n                },\n                \"effectiveDateTime\": \"2019-03-09T00:00:00+00:00\",\n                \"valueQuantity\": {\n                    \"value\": 0.12,\n                    \"unit\": \"10*9/L\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"10*9/L\"\n                },\n                \"interpretation\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v2/0078\",\n                            \"code\": \"L\",\n                            \"display\": \"Low\"\n                        }\n                    ]\n                },\n                \"referenceRange\": [\n                    {\n                        \"low\": {\n                            \"value\": 0.02\n                        },\n                        \"high\": {\n                            \"value\": 0.1\n                        }\n                    }\n                ]\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for AllergyIntolerance resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - resources returned are AllergyIntolerance resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.patient.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/AllergyIntolerance?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"AllergyIntolerance"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for AllergyIntolerance resources by patient nhs number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for AllergyIntolerance resources by patient reference - resources returned are AllergyIntolerance resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"//NHS number matches that of the NHS number searched for",
											"pm.test(\"Can Search FHIR AllergyIntolerance Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.patient.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/AllergyIntolerance?patient=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"AllergyIntolerance"
									],
									"query": [
										{
											"key": "patient",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude AllergyIntolerance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude AllergyIntolerance - 1 allergy intolerance resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=AllergyIntolerance:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "AllergyIntolerance:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can AllergyIntolerance search include Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can AllergyIntolerance search include Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can AllergyIntolerance search include Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can AllergyIntolerance search include Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can AllergyIntolerance search include Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can AllergyIntolerance search include Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can AllergyIntolerance search include Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can AllergyIntolerance search include Patient - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can AllergyIntolerance search include Patient - 1 allergy intolerance resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"AllergyIntolerance\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/AllergyIntolerance?_id={{fhir_created_allergy_id}}&_include=AllergyIntolerance:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"AllergyIntolerance"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_allergy_id}}"
										},
										{
											"key": "_include",
											"value": "AllergyIntolerance:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by patient reference - resources returned are Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Observation resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by patient reference and code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by patient reference and code - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by patient reference and code - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by patient reference and code - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by patient reference and code - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by patient reference and code - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by patient reference and code - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by patient reference and code - resources returned are Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Observation resources by patient reference and code - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"//test/lab code matches that which is searched for",
											"pm.test(\"Can search for Observation resources by patient reference and code - lab code matches that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.code.coding[0].code.toString()).to.eql(\"1022571000000108\") &&",
											"        pm.expect(resource.code.coding[0].system).to.eql(\"http://snomed.info/sct\")",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?patient=Patient/{{fhir_created_patient_id}}&code=http://snomed.info/sct|1022571000000108",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										},
										{
											"key": "code",
											"value": "http://snomed.info/sct|1022571000000108"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by category",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by category - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by category - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by category - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by category - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by category - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by category - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by category - resources returned are Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"//test category is exactly as what was searched for",
											"pm.test(\"Can search for Observation resources by category - observation category matches that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.category[0].coding[0].code).to.eql(\"laboratory\") &&",
											"        pm.expect(resource.category[0].coding[0].system).to.eql(\"http://hl7.org/fhir/observation-category\")",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?category=http://hl7.org/fhir/observation-category|laboratory",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "category",
											"value": "http://hl7.org/fhir/observation-category|laboratory"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by category and include patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by category and include patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by category and include patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by category and include patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by category and include patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by category and include patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//2 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by category and include patient - 2 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by category and include patient - 1st resource returned is an Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"//test category is exactly as what was searched for",
											"pm.test(\"Can search for Observation resources by category and include patient - 2nd resource returned is a Patient resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?category=http://hl7.org/fhir/observation-category|laboratory&_include=Observation:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "category",
											"value": "http://hl7.org/fhir/observation-category|laboratory"
										},
										{
											"key": "_include",
											"value": "Observation:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Observation resources by category and include Patient, Encounter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//3 resources are returned in this page...",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - 1st resource returned is an Observation resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Observation\");",
											"});",
											"//test category is exactly as what was searched for",
											"pm.test(\"Can search for Observation resources by category and include Patient, Encounter - Encounter and Patient resoures are present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var entries = jsonData.entry;",
											"    entries.forEach(function(entry) {",
											"        if(entry.resource.resourceType !== 'Observation') {",
											"                pm.expect(entry.resource.resourceType).to.satisfy(function(resourceType) {",
											"                    return resourceType === 'Patient' || resourceType === 'Encounter'",
											"            });",
											"        }",
											"    });",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?category=http://hl7.org/fhir/observation-category|vital-signs&_include=Observation:patient&_include=Observation:encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "category",
											"value": "http://hl7.org/fhir/observation-category|vital-signs"
										},
										{
											"key": "_include",
											"value": "Observation:patient"
										},
										{
											"key": "_include",
											"value": "Observation:encounter"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude Observations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude Observations - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude Observations - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude Observations - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude Observations - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can Patient search revinclude Observations - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//3 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude Observations - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Observations - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Observations - 2 observation resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[1].resource.resourceType).to.eql(\"Observation\");",
											"    pm.expect(jsonData.entry[2].resource.resourceType).to.eql(\"Observation\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=Observation:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "Observation:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Condition resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Condition resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Condition resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Condition\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Condition resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_condition_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Condition resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Condition resource - Location header is present and in correct format /Condition/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_condition_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Condition resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"Condition\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Condition-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://fhir.leedsth.nhs.uk/Id/condition\",\n\t\t\"value\": \"10046\"\n\t}],\n\t\"clinicalStatus\": \"recurrence\",\n    \"category\": [\n        {\n            \"coding\": [\n                {\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-ConditionCategory-1\",\n                    \"code\": \"encounter-diagnosis\",\n                    \"display\": \"Encounter Diagnosis\"\n                }\n            ],\n            \"text\": \"Encounter Diagnosis\"\n        }\n    ],\n\t\"code\": {\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"452071000000109\",\n\t\t\t\"display\": \"Problems with sight\"\n\t\t}],\n\t\t\"text\": \"Problems with sight\"\n\t},\n\t\"subject\": {\n\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\"value\": \"{{lastTestNHSNumber}}\"\n\t\t}\n\t},\n\t\"onsetDateTime\": \"2018-07-31T23:00:00+00:00\",\n\t\"assertedDate\": \"2018-07-31T23:00:00+00:00\",\n\t\"context\": {\n\t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n\t},\n\t\"asserter\": {\n\t\t\"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n\t\t\"display\": \"Dr JE Fildes\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can Patient search revinclude Condition",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude Condition - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude Condition - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude Condition - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude Condition - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can Patient search revinclude Condition - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//3 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude Condition - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Condition - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Condition - 1 condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[1].resource.resourceType).to.eql(\"Condition\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=Condition:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "Condition:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Condition by category and include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Condition by category and include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Condition by category and include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Condition by category and include referenced Patient - Category code === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.category[0].coding[0].code).to.eql(\"encounter-diagnosis\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 1 Condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Condition\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by category and include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition?category=https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-ConditionCategory-1|encounter-diagnosis&_include=Condition:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									],
									"query": [
										{
											"key": "category",
											"value": "https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-ConditionCategory-1|encounter-diagnosis"
										},
										{
											"key": "_include",
											"value": "Condition:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Condition by status and include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Condition by status and include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Condition by status and include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Condition by status and include referenced Patient - Category code === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.clinicalStatus).to.eql(\"recurrence\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 1 Condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Condition\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by status and include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition?clinical-status=recurrence&_include=Condition:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									],
									"query": [
										{
											"key": "clinical-status",
											"value": "recurrence"
										},
										{
											"key": "_include",
											"value": "Condition:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Condition by identifier and include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - identifier system and value === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].system).to.eql(\"https://fhir.leedsth.nhs.uk/Id/condition\") && pm.expect(resource.identifier[0].value.toString()).to.eql(\"10046\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 Condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Condition\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition?identifier=https://fhir.leedsth.nhs.uk/Id/condition|10046&_include=Condition:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.leedsth.nhs.uk/Id/condition|10046"
										},
										{
											"key": "_include",
											"value": "Condition:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Procedure resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Procedure resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Procedure resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Procedure\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Procedure resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_procedure_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Procedure resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Procedure resource - Location header is present and in correct format /Procedure/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Procedure/\" + pm.environment.get(\"fhir_created_procedure_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Procedure resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\"resourceType\": \"Procedure\",\n \t\"meta\": {\n \t\t\"profile\": [\n \t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Procedure-1\"\n \t\t]\n \t},\n \t\"identifier\": [{\n \t\t\"system\": \"https://fhir.leedsth.nhs.uk/Id/procedure\",\n \t\t\"value\": \"100009\"\n \t}],\n \t\"status\": \"completed\",\n \t\"notDone\": false,\n\t\"category\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"387713003\",\n                \"display\": \"Surgical procedure\"\n            }\n        ]\n    },\n    \"code\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"713348007\",\n                \"display\": \"Thermoplasty of bronchus\"\n            }\n        ]\n    },\n \t\"subject\": {\n \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\"value\": \"{{lastTestNHSNumber}}\"\n\t\t}\n \t},\n \t\"context\": {\n \t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n \t},\n \t\"performedDateTime\": \"2019-06-24T09:15:00+00:00\",\n \t\"performer\": [\n            {\n                \"actor\": {\n                    \"reference\": \"Organisation/{{fhir_created_organization_id}}\",\n                    \"display\": \"LEEDS TEACHING HOSPITALS NHS TRUST\"\n                }\n            }\n        ]\n }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Procedure by identifier and include referenced Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient - identifier system and value === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].system).to.eql(\"https://fhir.leedsth.nhs.uk/Id/procedure\") && pm.expect(resource.identifier[0].value.toString()).to.eql(\"100009\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 Condition resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Procedure\");",
											"});",
											"",
											"pm.test(\"Can search for Condition by identifier and include referenced Patient - 1 Patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure?identifier=https://fhir.leedsth.nhs.uk/Id/procedure|100009&_include=Procedure:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.leedsth.nhs.uk/Id/procedure|100009"
										},
										{
											"key": "_include",
											"value": "Procedure:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Procedure by identifier and include referenced Patient, Encounter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - 3 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Can search for Procedure by identifier and include referenced Patient, Encounter - identifier system and value === that which was searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].system).to.eql(\"https://fhir.leedsth.nhs.uk/Id/procedure\") && pm.expect(resource.identifier[0].value.toString()).to.eql(\"100009\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure?identifier=https://fhir.leedsth.nhs.uk/Id/procedure|100009&_include=Procedure:patient&_include=Procedure:encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.leedsth.nhs.uk/Id/procedure|100009"
										},
										{
											"key": "_include",
											"value": "Procedure:patient"
										},
										{
											"key": "_include",
											"value": "Procedure:encounter"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Procedure resources by patient reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Procedure resources by patient reference - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Procedure resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 links are present in results...",
											"pm.test(\"Can search for Procedure resources by patient reference - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Procedure resources by patient reference - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Procedure resources by patient reference - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Procedure resources by patient reference - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Procedure resources by patient reference - resources returned are Observation resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Procedure\");",
											"});",
											"",
											"//Returned resource reference matches that of patient...",
											"pm.test(\"Can search for Procedure resources by patient reference - patient id === patient id searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.reference).to.eql('Patient/' + pm.environment.get(\"fhir_created_patient_id\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Procedure resources by patient nhs number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Procedure resources by patient nhs number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Procedure resources by patient nhs number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Procedure resources by patient nhs number - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Procedure resources by patient nhs number - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Procedure resources by patient nhs number - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Procedure resources by patient nhs number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Can search for Procedure resources by patient nhs number - resources returned are Procedure resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Procedure\");",
											"});",
											"//NHS number matches that of the NHS number searched for",
											"pm.test(\"Can search for Procedure resources by patient nhs number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.subject.identifier.value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Procedure?patient=https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Procedure"
									],
									"query": [
										{
											"key": "patient",
											"value": "https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Encounter resources by id and revinclude Procedures",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 1...",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 1st resource returned is an Encounter resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Encounter\");",
											"});",
											"",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - Encounter search mode === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    var entry = jsonData.entry[0];",
											"    pm.expect(entry.search.mode).to.eql('match');",
											"});",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - 2nd resource returned is a Proecure resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Procedure\");",
											"});",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - Procedure references correct Encounter\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.context.reference).to.eql('Encounter/' + jsonData.entry[0].resource.id);",
											"});",
											"",
											"pm.test(\"Can search for Encounter resources by id and revinclude Procedures - Procedure search mode === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    var entry = jsonData.entry[1];",
											"    pm.expect(entry.search.mode).to.eql('include');",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var resultIds = pm.environment.get(\"patient_search_result_ids\");",
											"if(typeof resultIds !== 'undefined' && Array.isArray(resultIds) && resultIds.length > 0) {",
											"    resultIds = [];",
											"    pm.environment.set(\"patient_search_result_ids\",resultIds);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?_id={{fhir_created_encounter_id}}&_revinclude=Procedure:encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_encounter_id}}"
										},
										{
											"key": "_revinclude",
											"value": "Procedure:encounter"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "repo-service",
			"item": [
				{
					"name": "crud",
					"item": [
						{
							"name": "Can create a Patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Create Patient in local repo - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Create Patient in local repo - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.service).to.eql(\"REPO\") && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create Patient in local repo - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"target_test_patient_id\", jsonData.data.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n        \"resourceType\": \"Patient\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"{{lastTestNHSNumber}}\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"ZZZTEST\",\r\n            \"given\": [\r\n                \"ZZZ\"\r\n            ],\r\n            \"prefix\": [\r\n                \"ZZZ\"\r\n            ]\r\n        }],\r\n        \"gender\": \"female\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a Patient resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Read Patient from local repo - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Read Patient from local repo - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.service).to.eql(\"REPO\") && ",
											"    pm.expect(jsonData.operation).to.eql(\"READ\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Read Patient from local repo - resource physical ID exactly equals that which was created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.exist;",
											"    pm.expect(jsonData.data.id).to.equal(pm.environment.get(\"target_test_patient_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/Patient/{{target_test_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"Patient",
										"{{target_test_patient_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "errors",
					"item": [
						{
							"name": "Is bad request returned when no resource sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Is bad request returned when no resource sent - 400 returned\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"//Error response returned contains the expected information...",
											"pm.test(\"Is bad request returned when no resource sent - Error response message returned contains expected information\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error.service).to.eql(\"REPO\") && ",
											"        pm.expect(jsonData.error.operation).to.eql(\"CREATE\") && ",
											"            pm.expect(jsonData.error.responseId).to.exist && ",
											"               pm.expect(jsonData.error.requestId).to.eql(pm.environment.get('requestId')) && ",
											"                pm.expect(jsonData.error.status).to.eql(400) &&   ",
											"                    pm.expect(jsonData.error.text).to.eql(\"Bad Request\") &&  ",
											"                        pm.expect(jsonData.error.diagnostics).to.eql(\"Resource cannot be empty or undefined\") &&",
											"                            pm.expect(jsonData.error.severity).to.eql(\"fatal\") &&",
											"                                pm.expect(jsonData.error.code).to.eql(\"processing\")",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"pipeline\",\r\n    \"checkId\":true,\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\": null\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "batch-read",
					"item": [
						{
							"name": "Can create a Patient resource 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can fetch batch of Patient resources - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can fetch batch of Patient resources - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can fetch batch of Patient resources - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"batch_first_target_test_patient_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n        \"resourceType\": \"Patient\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"{{lastTestNHSNumber}}\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"AAATEST\",\r\n            \"given\": [\r\n                \"AAA\"\r\n            ],\r\n            \"prefix\": [\r\n                \"AAA\"\r\n            ]\r\n        }],\r\n        \"gender\": \"female\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can fetch batch of Patient resources - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can fetch batch of Patient resources - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can fetch batch of Patient resources - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"batch_second_target_test_patient_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n        \"resourceType\": \"Patient\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"{{lastTestNHSNumber}}\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"BBBTEST\",\r\n            \"given\": [\r\n                \"BBB\"\r\n            ],\r\n            \"prefix\": [\r\n                \"BBB\"\r\n            ]\r\n        }],\r\n        \"gender\": \"female\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can fetch batch of Patient resources - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can fetch batch of Patient resources - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can fetch batch of Patient resources - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"batch_third_target_test_patient_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n        \"resourceType\": \"Patient\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"{{lastTestNHSNumber}}\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"CCCTEST\",\r\n            \"given\": [\r\n                \"CCC\"\r\n            ],\r\n            \"prefix\": [\r\n                \"CCC\"\r\n            ]\r\n        }],\r\n        \"gender\": \"female\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can fetch batch of Patient resources",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83d05ce3-c172-4cc1-a5f1-3154a934289c",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f309bfb1-249a-4dcb-ad4e-86782044ebd1",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can fetch batch of Patient resources - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can fetch batch of Patient resources - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"BATCH-READ\")",
											"});",
											"//Batch bundle length === 3",
											"pm.test(\"Can fetch batch of Patient resources - batch returned contains exactly 3 entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry.length).to.eql(3);",
											"});",
											"//Each resource returned is a Patient...",
											"pm.test(\"Can fetch batch of Patient resources - Each resource returned is a Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].resourceType).to.eql('Patient');",
											"    pm.expect(jsonData.data.entry[1].resourceType).to.eql('Patient');",
											"    pm.expect(jsonData.data.entry[2].resourceType).to.eql('Patient');",
											"});",
											"//Each resource id exactly matches that of the resources created...",
											"pm.test(\"Can fetch batch of Patient resources - Patient resource ids exactly match the ids of the resources created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].id).to.eql(pm.environment.get('batch_first_target_test_patient_id'));",
											"    pm.expect(jsonData.data.entry[1].id).to.eql(pm.environment.get('batch_second_target_test_patient_id'));",
											"    pm.expect(jsonData.data.entry[2].id).to.eql(pm.environment.get('batch_third_target_test_patient_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\": {\r\n    \"query\":{\"sort\":1},\r\n    \"batchRequest\":\r\n    {\r\n    \"resourceType\": \"Bundle\",\r\n\t  \"id\": \"{{uuid}}\",\r\n\t  \"type\": \"batch\",\r\n\t  \"entry\": [\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_first_target_test_patient_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_second_target_test_patient_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_third_target_test_patient_id}}\"\r\n\t      }\r\n\t    }\r\n\t  ]\t\r\n    }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/batch",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"batch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can batch return error resource for when resource not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83d05ce3-c172-4cc1-a5f1-3154a934289c",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f309bfb1-249a-4dcb-ad4e-86782044ebd1",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can batch return error resource for when resource not found - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can batch return error resource for when resource not found - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"BATCH-READ\")",
											"});",
											"//Batch bundle length === 3",
											"pm.test(\"Can batch return error resource for when resource not found - batch returned contains exactly 4 entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry.length).to.eql(4);",
											"});",
											"//Each resource returned is a Patient...",
											"pm.test(\"Can batch return error resource for when resource not found - 3 resources are a Patient, 4 is an error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].resourceType).to.eql('Patient');",
											"    pm.expect(jsonData.data.entry[1].resourceType).to.eql('Patient');",
											"    pm.expect(jsonData.data.entry[2].resourceType).to.eql('Patient');",
											"});",
											"//Each resource id exactly matches that of the resources created...",
											"pm.test(\"Can batch return error resource for when resource not found - Patient resource ids exactly match the ids of the resources created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].id).to.eql(pm.environment.get('batch_first_target_test_patient_id'));",
											"    pm.expect(jsonData.data.entry[1].id).to.eql(pm.environment.get('batch_second_target_test_patient_id'));",
											"    pm.expect(jsonData.data.entry[2].id).to.eql(pm.environment.get('batch_third_target_test_patient_id'));",
											"});",
											"//Last entry is an internal error response..",
											"pm.test(\"Can batch return error resource for when resource not found - last entry is an internal error response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[3].error.code).to.exist &&",
											"        pm.expect(jsonData.data.entry[3].error.severity).to.exist &&",
											"            pm.expect(jsonData.data.entry[3].error.diagnostics).to.exist && ",
											"                pm.expect(jsonData.data.entry[3].error.status).to.exist && ",
											"                    pm.expect(jsonData.data.entry[3].error.text).to.exist;",
											"});",
											"//Error message contents indicate that resource could not be found",
											"pm.test(\"Can batch return error resource for when resource not found - last entry message contents indicate that resource could not be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[3].error.code).to.eql('processing') &&",
											"        pm.expect(jsonData.data.entry[3].error.severity).to.eql('fatal') &&",
											"            pm.expect(jsonData.data.entry[3].error.diagnostics).to.eql('Resource Patient XXXXXXXXXXXXXX does not exist') && ",
											"                pm.expect(jsonData.data.entry[3].error.status).to.eql(404) && ",
											"                    pm.expect(jsonData.data.entry[3].error.text).to.eql('Not Found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\": {\r\n\t  \"resourceType\": \"Bundle\",\r\n\t  \"id\": \"{{uuid}}\",\r\n\t  \"type\": \"batch\",\r\n\t  \"entry\": [\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_first_target_test_patient_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_second_target_test_patient_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_third_target_test_patient_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/XXXXXXXXXXXXXX\"\r\n\t      }\r\n\t    }\r\n\t  ]\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/batch",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"batch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Organisation resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create an Organisation resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create an Organisation resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Organisation resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"batch_organization_id\", jsonData.data.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"resourceType\": \"Organization\",\n\t\t\"meta\": {\n\t\t\t\"profile\": [\n\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n\t\t\t]\n\t\t},\n\t\t\"identifier\": [{\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n\t\t\t\"value\": \"03X\"\n\t\t}],\n\t\t\"type\": [{\n\t\t\t\"coding\": [{\n\t\t\t\t\"system\": \"http://hl7.org/fhir/organization-type\",\n\t\t\t\t\"code\": \"prov\",\n\t\t\t\t\"display\": \"Healthcare Provider\"\n\t\t\t}]\n\t\t}],\n\t\t\"name\": \"NHS EREWASH\",\n\t\t\"address\": [{\n\t\t\t\"use\": \"work\",\n\t\t\t\"type\": \"both\",\n\t\t\t\"line\": [\n\t\t\t\t\"Toll Bar House\",\n\t\t\t\t\"1 Derby Road\"\n\t\t\t],\n\t\t\t\"city\": \"Ilkeston\",\n\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\"postalCode\": \"DE7 5FH\"\n\t\t}]\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create a Practitioner resource - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create a Practitioner resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Practitioner resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"batch_practitioner_id\", jsonData.data.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"resourceType\": \"Practitioner\",\n\t\t\"meta\": {\n\t\t\t\"profile\": [\n\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n\t\t\t]\n\t\t},\n\t\t\"identifier\": [{\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n\t\t\t\"value\": \"G8133438\"\n\t\t}],\n\t\t\"name\": [{\n\t\t\t\"family\": \"Bhatia\",\n\t\t\t\"given\": [\n\t\t\t\t\"AA\"\n\t\t\t],\n\t\t\t\"prefix\": [\n\t\t\t\t\"Dr.\"\n\t\t\t]\n\t\t}],\n\t\t\"telecom\": [{\n\t\t\t\t\"system\": \"email\",\n\t\t\t\t\"value\": \"abhatia@nhs.skynet\",\n\t\t\t\t\"use\": \"work\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\"value\": \"0115 9737320\",\n\t\t\t\t\"use\": \"work\"\n\t\t\t}\n\t\t],\n\t\t\"address\": [{\n\t\t\t\"line\": [\n\t\t\t\t\"Regent Street\",\n\t\t\t\t\"Long Eaton\"\n\t\t\t],\n\t\t\t\"city\": \"Nottingham\",\n\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\"postalCode\": \"NG10 1QQ\"\n\t\t}],\n\t\t\"gender\": \"male\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can fetch batch of mixed resource types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83d05ce3-c172-4cc1-a5f1-3154a934289c",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f309bfb1-249a-4dcb-ad4e-86782044ebd1",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can fetch batch of mixed resource types - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can fetch batch of mixed resource types- service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"BATCH-READ\")",
											"});",
											"//Batch bundle length === 4",
											"pm.test(\"Can fetch batch of mixed resource types - batch returned contains exactly 5 entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry.length).to.eql(5);",
											"});",
											"//Each resource returned is a Patient...",
											"pm.test(\"Can fetch batch of mixed resource types - Returns 3 patient resources, 1 organization resource and 1 practitioner resource\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].resourceType).to.eql('Patient');",
											"    pm.expect(jsonData.data.entry[1].resourceType).to.eql('Patient');",
											"    pm.expect(jsonData.data.entry[2].resourceType).to.eql('Patient');",
											"    pm.expect(jsonData.data.entry[3].resourceType).to.eql('Organization');",
											"    pm.expect(jsonData.data.entry[4].resourceType).to.eql('Practitioner');",
											"});",
											"//Each resource id exactly matches that of the resources created...",
											"pm.test(\"Can fetch batch of mixed resource types - resource ids exactly match the ids of the resources created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].id).to.eql(pm.environment.get('batch_first_target_test_patient_id'));",
											"    pm.expect(jsonData.data.entry[1].id).to.eql(pm.environment.get('batch_second_target_test_patient_id'));",
											"    pm.expect(jsonData.data.entry[2].id).to.eql(pm.environment.get('batch_third_target_test_patient_id'));",
											"    pm.expect(jsonData.data.entry[3].id).to.eql(pm.environment.get('batch_organization_id'));",
											"    pm.expect(jsonData.data.entry[4].id).to.eql(pm.environment.get('batch_practitioner_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\": {\r\n\t  \"resourceType\": \"Bundle\",\r\n\t  \"id\": \"{{uuid}}\",\r\n\t  \"type\": \"batch\",\r\n\t  \"entry\": [\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_first_target_test_patient_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_second_target_test_patient_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Patient/{{batch_third_target_test_patient_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Organization/{{batch_organization_id}}\"\r\n\t      }\r\n\t    },\r\n\t    {\r\n\t      \"request\": {\r\n\t        \"method\": \"GET\",\r\n\t        \"url\": \"/Practitioner/{{batch_practitioner_id}}\"\r\n\t      }\r\n\t    }\r\n\t  ]\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/batch",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"batch"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "search",
					"item": [
						{
							"name": "Can create a Patient resource 9657702070",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can fetch batch of Patient resources - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can fetch batch of Patient resources - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can fetch batch of Patient resources - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"search_first_target_test_patient_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n        \"resourceType\": \"Patient\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"9657702070\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"AAATEST\",\r\n            \"given\": [\r\n                \"AAA\"\r\n            ],\r\n            \"prefix\": [\r\n                \"AAA\"\r\n            ]\r\n        }],\r\n        \"gender\": \"female\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can index a patient resource 9657702070",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Create Patient Index - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Indices are returned in the service response...",
											"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.indices).to.exist &&",
											"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
											"});",
											"//Each index object is formed correctly...",
											"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
											"    var jsonData = pm.response.json();",
											"    var indices = jsonData.data.indices;",
											"    indices.forEach(function(index) {",
											"        pm.expect(index.indexType).to.exist &&",
											"            pm.expect(index.path).to.exist &&",
											"                pm.expect(index.path).to.be.an('array') &&",
											"                    pm.expect(index.value).to.exist",
											"    });",
											"    //hash index for comparison to read...",
											"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"pm.environment.set(\"indexResourceId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":{\r\n    \t\"results\":\r\n    \t{\r\n\t    \t \"resourceType\": \"Patient\",\r\n\t        \"id\":\"{{search_first_target_test_patient_id}}\",\r\n\t        \"identifier\": [{\r\n\t            \"extension\": [{\r\n\t                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                \"valueCodeableConcept\": {\r\n\t                    \"coding\": [{\r\n\t                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                        \"code\": \"01\",\r\n\t                        \"display\": \"Number present and verified\"\r\n\t                    }]\r\n\t                }\r\n\t            }],\r\n\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n\t            \"value\": \"9657702070\"\r\n\t        }],\r\n\t        \"active\": true,\r\n\t        \"name\": [{\r\n\t            \"use\": \"official\",\r\n\t            \"family\": \"AAATEST\",\r\n\t            \"given\": [\r\n\t                \"AAA\"\r\n\t            ],\r\n\t            \"prefix\": [\r\n\t                \"AAA\"\r\n\t            ]\r\n\t        }],\r\n\t        \"gender\": \"female\",\r\n\t        \"birthDate\": \"1986-02-27\",\r\n\t        \"address\": [{\r\n\t            \"use\": \"home\",\r\n\t            \"type\": \"physical\"\r\n\t        }],\r\n\t        \"maritalStatus\": {\r\n\t            \"coding\": [{\r\n\t                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n\t                \"code\": \"S\",\r\n\t                \"display\": \"Never Married\"\r\n\t            }]\r\n\t        },\r\n\t        \"generalPractitioner\": [{\r\n\t            \"reference\": \"Practitioner/203529\",\r\n\t            \"display\": \"Miss Nichole Gilbert\"\r\n\t        }],\r\n\t        \"managingOrganization\": {\r\n\t            \"reference\": \"Organization/200268\",\r\n\t            \"display\": \"HSCIC test Practice\"\r\n\t        }\r\n\t    }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource 9657702100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can fetch batch of Patient resources - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can fetch batch of Patient resources - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can fetch batch of Patient resources - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"batch_second_target_test_patient_id\", jsonData.data.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n        \"resourceType\": \"Patient\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"9657702100\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"BBBTEST\",\r\n            \"given\": [\r\n                \"BBB\"\r\n            ],\r\n            \"prefix\": [\r\n                \"BBB\"\r\n            ]\r\n        }],\r\n        \"gender\": \"female\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can index a patient resource 9657702100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Create Patient Index - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Indices are returned in the service response...",
											"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.indices).to.exist &&",
											"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
											"});",
											"//Each index object is formed correctly...",
											"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
											"    var jsonData = pm.response.json();",
											"    var indices = jsonData.data.indices;",
											"    indices.forEach(function(index) {",
											"        pm.expect(index.indexType).to.exist &&",
											"            pm.expect(index.path).to.exist &&",
											"                pm.expect(index.path).to.be.an('array') &&",
											"                    pm.expect(index.value).to.exist",
											"    });",
											"    //hash index for comparison to read...",
											"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"pm.environment.set(\"indexResourceId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":{\r\n    \"results\":\r\n    {\r\n\t     \"resourceType\": \"Patient\",\r\n\t        \"id\":\"{{search_first_target_test_patient_id}}\",\r\n\t        \"identifier\": [{\r\n\t            \"extension\": [{\r\n\t                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                \"valueCodeableConcept\": {\r\n\t                    \"coding\": [{\r\n\t                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                        \"code\": \"01\",\r\n\t                        \"display\": \"Number present and verified\"\r\n\t                    }]\r\n\t                }\r\n\t            }],\r\n\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n\t            \"value\": \"9657702100\"\r\n\t        }],\r\n\t        \"active\": true,\r\n\t        \"name\": [{\r\n\t            \"use\": \"official\",\r\n\t            \"family\": \"AAATEST\",\r\n\t            \"given\": [\r\n\t                \"AAA\"\r\n\t            ],\r\n\t            \"prefix\": [\r\n\t                \"AAA\"\r\n\t            ]\r\n\t        }],\r\n\t        \"gender\": \"female\",\r\n\t        \"birthDate\": \"1986-02-27\",\r\n\t        \"address\": [{\r\n\t            \"use\": \"home\",\r\n\t            \"type\": \"physical\"\r\n\t        }],\r\n\t        \"maritalStatus\": {\r\n\t            \"coding\": [{\r\n\t                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n\t                \"code\": \"S\",\r\n\t                \"display\": \"Never Married\"\r\n\t            }]\r\n\t        },\r\n\t        \"generalPractitioner\": [{\r\n\t            \"reference\": \"Practitioner/203529\",\r\n\t            \"display\": \"Miss Nichole Gilbert\"\r\n\t        }],\r\n\t        \"managingOrganization\": {\r\n\t            \"reference\": \"Organization/200268\",\r\n\t            \"display\": \"HSCIC test Practice\"\r\n\t        }\r\n\t    }\t\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Patient resource 9657702151",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can fetch batch of Patient resources - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can fetch batch of Patient resources - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can fetch batch of Patient resources - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"batch_third_target_test_patient_id\", jsonData.data.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n        \"resourceType\": \"Patient\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"9657702151\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"CCCTEST\",\r\n            \"given\": [\r\n                \"CCC\"\r\n            ],\r\n            \"prefix\": [\r\n                \"CCC\"\r\n            ]\r\n        }],\r\n        \"gender\": \"female\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can index a patient resource 9657702151",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Create Patient Index - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Indices are returned in the service response...",
											"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.indices).to.exist &&",
											"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
											"});",
											"//Each index object is formed correctly...",
											"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
											"    var jsonData = pm.response.json();",
											"    var indices = jsonData.data.indices;",
											"    indices.forEach(function(index) {",
											"        pm.expect(index.indexType).to.exist &&",
											"            pm.expect(index.path).to.exist &&",
											"                pm.expect(index.path).to.be.an('array') &&",
											"                    pm.expect(index.value).to.exist",
											"    });",
											"    //hash index for comparison to read...",
											"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"pm.environment.set(\"indexResourceId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":{\r\n    \t\"results\":\r\n\t    \t{\r\n\t        \"resourceType\": \"Patient\",\r\n\t        \"id\":\"{{search_first_target_test_patient_id}}\",\r\n\t        \"identifier\": [{\r\n\t            \"extension\": [{\r\n\t                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                \"valueCodeableConcept\": {\r\n\t                    \"coding\": [{\r\n\t                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                        \"code\": \"01\",\r\n\t                        \"display\": \"Number present and verified\"\r\n\t                    }]\r\n\t                }\r\n\t            }],\r\n\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n\t            \"value\": \"9657702151\"\r\n\t        }],\r\n\t        \"active\": true,\r\n\t        \"name\": [{\r\n\t            \"use\": \"official\",\r\n\t            \"family\": \"AAATEST\",\r\n\t            \"given\": [\r\n\t                \"AAA\"\r\n\t            ],\r\n\t            \"prefix\": [\r\n\t                \"AAA\"\r\n\t            ]\r\n\t        }],\r\n\t        \"gender\": \"female\",\r\n\t        \"birthDate\": \"1986-02-27\",\r\n\t        \"address\": [{\r\n\t            \"use\": \"home\",\r\n\t            \"type\": \"physical\"\r\n\t        }],\r\n\t        \"maritalStatus\": {\r\n\t            \"coding\": [{\r\n\t                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n\t                \"code\": \"S\",\r\n\t                \"display\": \"Never Married\"\r\n\t            }]\r\n\t        },\r\n\t        \"generalPractitioner\": [{\r\n\t            \"reference\": \"Practitioner/203529\",\r\n\t            \"display\": \"Miss Nichole Gilbert\"\r\n\t        }],\r\n\t        \"managingOrganization\": {\r\n\t            \"reference\": \"Organization/200268\",\r\n\t            \"display\": \"HSCIC test Practice\"\r\n\t        }\r\n\t    }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Patient 9657702070",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83d05ce3-c172-4cc1-a5f1-3154a934289c",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f309bfb1-249a-4dcb-ad4e-86782044ebd1",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Patient 9657702070 - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can search for Patient 9657702070 - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(5) && ",
											"    pm.expect(jsonData.operation).to.eql(\"BATCH-READ\")",
											"});",
											"//Batch bundle length === 1",
											"pm.test(\"Can search for Patient 9657702070 - batch returned contains exactly 1 entry\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry.length).to.eql(1);",
											"});",
											"//Each resource returned is a Patient...",
											"pm.test(\"Can search for Patient 9657702070 - Returns 1 patient resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].resourceType).to.eql('Patient');",
											"});",
											"//Each resource id exactly matches that of the resources created...",
											"pm.test(\"Can search for Patient 9657702070 - resource id exactly matches the id of the resource created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].id).to.eql(pm.environment.get('search_first_target_test_patient_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"pipeline\",\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"routes\":[\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/repo/index/query\"\t\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/search/results\"\t\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/repo/batch\"\t\r\n    \t\t}\r\n    \t],\r\n    \"data\": {\r\n    \t\"query\":{\r\n    \t\t\"resourceType\":\"Patient\",\r\n    \t\t\"parameters\":[\r\n    \t\t\t{\r\n\t\t        \t\"name\":\"identifier\",\r\n\t\t        \t\"value\":\"https://fhir.nhs.uk/Id/nhs-number|9657702070\"\r\n    \t\t\t}\r\n    \t\t]\r\n    \t}\r\n    \r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Patient 9657702100",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83d05ce3-c172-4cc1-a5f1-3154a934289c",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f309bfb1-249a-4dcb-ad4e-86782044ebd1",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Patient 9657702070 - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can search for Patient 9657702070 - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(5) && ",
											"    pm.expect(jsonData.operation).to.eql(\"BATCH-READ\")",
											"});",
											"//Batch bundle length === 1",
											"pm.test(\"Can search for Patient 9657702070 - batch returned contains exactly 1 entry\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry.length).to.eql(1);",
											"});",
											"//Each resource returned is a Patient...",
											"pm.test(\"Can search for Patient 9657702070 - Returns 1 patient resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].resourceType).to.eql('Patient');",
											"});",
											"//Each resource id exactly matches that of the resources created...",
											"pm.test(\"Can search for Patient 9657702070 - resource id exactly matches the id of the resource created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].id).to.eql(pm.environment.get('search_first_target_test_patient_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"pipeline\",\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"routes\":[\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/repo/index/query\"\t\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/search/results\"\t\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/repo/batch\"\t\r\n    \t\t}\r\n    \t],\r\n    \"data\": {\r\n    \t\"query\":{\r\n    \t\t\"resourceType\":\"Patient\",\r\n    \t\t\"parameters\":[\r\n    \t\t\t{\r\n\t\t        \t\"name\":\"identifier\",\r\n\t\t        \t\"value\":\"https://fhir.nhs.uk/Id/nhs-number|9657702100\"\r\n    \t\t\t}\r\n    \t\t]\r\n    \t}\r\n    \r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can search for Patient 9657702151",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83d05ce3-c172-4cc1-a5f1-3154a934289c",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f309bfb1-249a-4dcb-ad4e-86782044ebd1",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can search for Patient 9657702070 - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can search for Patient 9657702070 - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(5) && ",
											"    pm.expect(jsonData.operation).to.eql(\"BATCH-READ\")",
											"});",
											"//Batch bundle length === 1",
											"pm.test(\"Can search for Patient 9657702070 - batch returned contains exactly 1 entry\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry.length).to.eql(1);",
											"});",
											"//Each resource returned is a Patient...",
											"pm.test(\"Can search for Patient 9657702070 - Returns 1 patient resources\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].resourceType).to.eql('Patient');",
											"});",
											"//Each resource id exactly matches that of the resources created...",
											"pm.test(\"Can search for Patient 9657702070 - resource id exactly matches the id of the resource created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.entry[0].id).to.eql(pm.environment.get('search_first_target_test_patient_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"pipeline\",\r\n\t\"messageId\": \"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"routes\":[\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/repo/index/query\"\t\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/search/results\"\t\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"path\":\"/services/v1/repo/batch\"\t\r\n    \t\t}\r\n    \t],\r\n    \"data\": {\r\n    \t\"query\":{\r\n    \t\t\"resourceType\":\"Patient\",\r\n    \t\t\"parameters\":[\r\n    \t\t\t{\r\n\t\t        \t\"name\":\"identifier\",\r\n\t\t        \t\"value\":\"https://fhir.nhs.uk/Id/nhs-number|9657702151\"\r\n    \t\t\t}\r\n    \t\t]\r\n    \t}\r\n    \r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "index-service",
			"item": [
				{
					"name": "index",
					"item": [
						{
							"name": "success",
							"item": [
								{
									"name": "Can index a patient resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
												"exec": [
													"//Expect 200 success...",
													"pm.test(\"Can Create Patient Index - 201 returned\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"//Service response is returned",
													"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messageId).to.exist &&",
													"    pm.expect(jsonData.requestId).to.exist &&",
													"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
													"    pm.expect(jsonData.responseId).to.exist &&",
													"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
													"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
													"});",
													"//Indices are returned in the service response...",
													"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.indices).to.exist &&",
													"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
													"});",
													"//Each index object is formed correctly...",
													"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
													"    var jsonData = pm.response.json();",
													"    var indices = jsonData.data.indices;",
													"    indices.forEach(function(index) {",
													"        pm.expect(index.indexType).to.exist &&",
													"            pm.expect(index.path).to.exist &&",
													"                pm.expect(index.path).to.be.an('array') &&",
													"                    pm.expect(index.value).to.exist",
													"    });",
													"    //hash index for comparison to read...",
													"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "894473ea-c452-4d94-b9f7-75191b290674",
												"exec": [
													"//Get the last NHS number, increment it and persist new value in env vars...",
													"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
													"nhsNumber++;",
													"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
													"",
													"var uuid = require('uuid');",
													"pm.environment.set(\"messageId\", uuid.v4());",
													"pm.environment.set(\"requestId\", uuid.v4());",
													"pm.environment.set(\"indexResourceId\", uuid.v4());",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"requestedOn\", moment().utc().format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "application/fhir+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":{\r\n    \t\"results\":\r\n    \t{\r\n        \"resourceType\": \"Patient\",\r\n        \"id\":\"{{indexResourceId}}\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"{{lastTestNHSNumber}}\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"ZZZTEST\",\r\n            \"given\": [\r\n                \"ZZZ\"\r\n            ],\r\n            \"prefix\": [\r\n                \"ZZZ\"\r\n            ]\r\n        }],\r\n        \"gender\": \"female\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        }\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
											"host": [
												"{{proxy_server_address}}"
											],
											"path": [
												"api",
												"v1",
												"tests",
												"repo",
												"index"
											]
										}
									},
									"response": []
								},
								{
									"name": "Can read complete patient index",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
												"exec": [
													"//Expect 200 success...",
													"pm.test(\"Can Read Index from local index - 201 returned\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"//Service response is returned",
													"pm.test(\"Can Read Index from local index - service response message is returned (as opposed to error response)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messageId).to.exist &&",
													"    pm.expect(jsonData.requestId).to.exist &&",
													"    pm.expect(jsonData.responseId).to.exist &&",
													"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
													"    pm.expect(jsonData.operation).to.eql(\"READ\")",
													"});",
													"//Indices are the same as what was created",
													"pm.test(\"Can Read Index from local index - indices are the same as those which were created\", function() {",
													"   var jsonData = pm.response.json();",
													"   var createdIndices = pm.environment.get('hashedIndex');",
													"   var returnedIndices = CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString();",
													"   pm.expect(createdIndices).to.equal(returnedIndices);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "894473ea-c452-4d94-b9f7-75191b290674",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "application/fhir+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/Patient/{{indexResourceId}}",
											"host": [
												"{{proxy_server_address}}"
											],
											"path": [
												"api",
												"v1",
												"tests",
												"repo",
												"index",
												"Patient",
												"{{indexResourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Can read complete patient index Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
												"exec": [
													"//Expect 200 success...",
													"pm.test(\"Can Read Index from local index - 201 returned\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"//Service response is returned",
													"pm.test(\"Can Read Index from local index - service response message is returned (as opposed to error response)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messageId).to.exist &&",
													"    pm.expect(jsonData.requestId).to.exist &&",
													"    pm.expect(jsonData.responseId).to.exist &&",
													"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
													"    pm.expect(jsonData.operation).to.eql(\"READ\")",
													"});",
													"//Indices are the same as what was created",
													"pm.test(\"Can Read Index from local index - indices are the same as those which were created\", function() {",
													"   var jsonData = pm.response.json();",
													"   var createdIndices = pm.environment.get('hashedIndex');",
													"   var returnedIndices = CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString();",
													"   pm.expect(createdIndices).to.equal(returnedIndices);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "894473ea-c452-4d94-b9f7-75191b290674",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "application/fhir+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/Patient/{{indexResourceId}}",
											"host": [
												"{{proxy_server_address}}"
											],
											"path": [
												"api",
												"v1",
												"tests",
												"repo",
												"index",
												"Patient",
												"{{indexResourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Can read name index type from a patient index",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
												"exec": [
													"//Expect 200 success...",
													"pm.test(\"Can Read Index from local index - 201 returned\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"//Service response is returned",
													"pm.test(\"Can Read type of index from local index - service response message is returned (as opposed to error response)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messageId).to.exist &&",
													"    pm.expect(jsonData.requestId).to.exist &&",
													"    pm.expect(jsonData.responseId).to.exist &&",
													"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
													"    pm.expect(jsonData.operation).to.eql(\"READ\")",
													"});",
													"//Indices are the same as what was created",
													"pm.test(\"Can Read type of index from local index - 3 name indices are returned\", function() {",
													"   var jsonData = pm.response.json();",
													"   pm.expect(3).to.equal(jsonData.data.indices.length);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "894473ea-c452-4d94-b9f7-75191b290674",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "application/fhir+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/Patient/{{indexResourceId}}/name",
											"host": [
												"{{proxy_server_address}}"
											],
											"path": [
												"api",
												"v1",
												"tests",
												"repo",
												"index",
												"Patient",
												"{{indexResourceId}}",
												"name"
											]
										}
									},
									"response": []
								},
								{
									"name": "Can read reference index type from a patient index",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
												"exec": [
													"//Expect 200 success...",
													"pm.test(\"Can Read reference index type from local index - 201 returned\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"//Service response is returned",
													"pm.test(\"Can Read reference index type from local index - service response message is returned (as opposed to error response)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messageId).to.exist &&",
													"    pm.expect(jsonData.requestId).to.exist &&",
													"    pm.expect(jsonData.responseId).to.exist &&",
													"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
													"    pm.expect(jsonData.operation).to.eql(\"READ\")",
													"});",
													"//Indices are the same as what was created",
													"pm.test(\"Can Read reference index type from local index - 3 name indices are returned\", function() {",
													"   var jsonData = pm.response.json();",
													"   pm.expect(4).to.equal(jsonData.data.indices.length);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "894473ea-c452-4d94-b9f7-75191b290674",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"type": "text",
												"value": "application/fhir+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/Patient/{{indexResourceId}}/reference",
											"host": [
												"{{proxy_server_address}}"
											],
											"path": [
												"api",
												"v1",
												"tests",
												"repo",
												"index",
												"Patient",
												"{{indexResourceId}}",
												"reference"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "query",
					"item": [
						{
							"name": "success",
							"item": [
								{
									"name": "all-resources",
									"item": [
										{
											"name": "Can index a female patient resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Create Patient Index - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
															"});",
															"//Indices are returned in the service response...",
															"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.indices).to.exist &&",
															"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
															"});",
															"//Each index object is formed correctly...",
															"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
															"    var jsonData = pm.response.json();",
															"    var indices = jsonData.data.indices;",
															"    indices.forEach(function(index) {",
															"        pm.expect(index.indexType).to.exist &&",
															"            pm.expect(index.path).to.exist &&",
															"                pm.expect(index.path).to.be.an('array') &&",
															"                    pm.expect(index.value).to.exist",
															"    });",
															"    //hash index for comparison to read...",
															"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "894473ea-c452-4d94-b9f7-75191b290674",
														"exec": [
															"//Get the last NHS number, increment it and persist new value in env vars...",
															"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
															"nhsNumber++;",
															"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
															"",
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"pm.environment.set(\"indexResourceId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"type": "text",
														"value": "application/fhir+json"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n    \t\"results\":{\r\n\t        \"resourceType\": \"Patient\",\r\n\t        \"id\":\"{{indexResourceId}}\",\r\n\t        \"identifier\": [{\r\n\t            \"extension\": [{\r\n\t                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                \"valueCodeableConcept\": {\r\n\t                    \"coding\": [{\r\n\t                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                        \"code\": \"01\",\r\n\t                        \"display\": \"Number present and verified\"\r\n\t                    }]\r\n\t                }\r\n\t            }],\r\n\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n\t            \"value\": \"{{lastTestNHSNumber}}\"\r\n\t        }],\r\n\t        \"active\": true,\r\n\t        \"name\": [{\r\n\t            \"use\": \"official\",\r\n\t            \"family\": \"ZZZTEST\",\r\n\t            \"given\": [\r\n\t                \"ZZZ\"\r\n\t            ],\r\n\t            \"prefix\": [\r\n\t                \"ZZZ\"\r\n\t            ]\r\n\t        }],\r\n\t        \"gender\": \"female\",\r\n\t        \"birthDate\": \"1986-02-27\",\r\n\t        \"address\": [{\r\n\t            \"use\": \"home\",\r\n\t            \"type\": \"physical\"\r\n\t        }],\r\n\t        \"maritalStatus\": {\r\n\t            \"coding\": [{\r\n\t                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n\t                \"code\": \"S\",\r\n\t                \"display\": \"Never Married\"\r\n\t            }]\r\n\t        },\r\n\t        \"generalPractitioner\": [{\r\n\t            \"reference\": \"Practitioner/203529\",\r\n\t            \"display\": \"Miss Nichole Gilbert\"\r\n\t        }],\r\n\t        \"managingOrganization\": {\r\n\t            \"reference\": \"Organization/200268\",\r\n\t            \"display\": \"HSCIC test Practice\"\r\n\t        },\r\n\t        \"meta\": {\r\n\t            \"versionId\": \"1\",\r\n\t            \"lastUpdated\": \"{{requestedOn}}\"\r\n\t        }\r\n\t    }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Can index a male patient resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Create Patient Index - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
															"});",
															"//Indices are returned in the service response...",
															"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.indices).to.exist &&",
															"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
															"});",
															"//Each index object is formed correctly...",
															"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
															"    var jsonData = pm.response.json();",
															"    var indices = jsonData.data.indices;",
															"    indices.forEach(function(index) {",
															"        pm.expect(index.indexType).to.exist &&",
															"            pm.expect(index.path).to.exist &&",
															"                pm.expect(index.path).to.be.an('array') &&",
															"                    pm.expect(index.value).to.exist",
															"    });",
															"    //hash index for comparison to read...",
															"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "894473ea-c452-4d94-b9f7-75191b290674",
														"exec": [
															"//Get the last NHS number, increment it and persist new value in env vars...",
															"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
															"nhsNumber++;",
															"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
															"",
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"pm.environment.set(\"indexResourceId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"type": "text",
														"value": "application/fhir+json"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n    \"results\":\r\n    {\r\n        \"resourceType\": \"Patient\",\r\n        \"id\":\"{{indexResourceId}}\",\r\n        \"identifier\": [{\r\n            \"extension\": [{\r\n                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n                \"valueCodeableConcept\": {\r\n                    \"coding\": [{\r\n                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                        \"code\": \"01\",\r\n                        \"display\": \"Number present and verified\"\r\n                    }]\r\n                }\r\n            }],\r\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n            \"value\": \"{{lastTestNHSNumber}}\"\r\n        }],\r\n        \"active\": true,\r\n        \"name\": [{\r\n            \"use\": \"official\",\r\n            \"family\": \"AAATEST\",\r\n            \"given\": [\r\n                \"AAA\"\r\n            ],\r\n            \"prefix\": [\r\n                \"AAA\"\r\n            ]\r\n        }],\r\n        \"gender\": \"male\",\r\n        \"birthDate\": \"1986-02-27\",\r\n        \"address\": [{\r\n            \"use\": \"home\",\r\n            \"type\": \"physical\"\r\n        }],\r\n        \"maritalStatus\": {\r\n            \"coding\": [{\r\n                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n                \"code\": \"S\",\r\n                \"display\": \"Never Married\"\r\n            }]\r\n        },\r\n        \"generalPractitioner\": [{\r\n            \"reference\": \"Practitioner/203529\",\r\n            \"display\": \"Miss Nichole Gilbert\"\r\n        }],\r\n        \"managingOrganization\": {\r\n            \"reference\": \"Organization/200268\",\r\n            \"display\": \"HSCIC test Practice\"\r\n        },\r\n        \"meta\": {\r\n            \"versionId\": \"1\",\r\n            \"lastUpdated\": \"{{requestedOn}}\"\r\n        }\r\n    }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Can fetch patient resource by _id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c5d4b96b-db8b-4048-95c3-b8c642d18dd1",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Query Patient Index - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Query Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"pm.test(\"Can Query Patient Index - exactly one result is returned (as expected)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});",
															"pm.test(\"Can Query Patient Index - id returned by query matches that of the resource created\", function () {",
															"    var jsonData = pm.response.json();",
															"    var resultId = jsonData.data.query[0].results[0];",
															"    pm.expect(resultId).to.eql(pm.environment.get(\"indexResourceId\"));",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "057fec58-4b37-4723-b67b-2e5d8e10408a",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"checkId\":true,\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"id\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"id\",\n\t\t        \t\"value\":\"{{indexResourceId}}\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Can fetch patient resource where _lastUpdated = date resource was created (less time)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c5d4b96b-db8b-4048-95c3-b8c642d18dd1",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Query Patient Index by LastUpdated (less time) - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Query Patient Index by LastUpdated (less time) - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"//Based on the assumption that two resources are indexed on the same day...",
															"pm.test(\"Can Query Patient Index by LastUpdated (less time) - exactly two results are returned (as expected)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(2);",
															"});",
															"pm.test(\"Can Query Patient Index by LastUpdated (less time) - results returned by query matches that of the resource created\", function () {",
															"    var jsonData = pm.response.json();",
															"    var resultId = jsonData.data.query[0].results[0];",
															"    pm.expect(resultId).to.eql(pm.environment.get(\"indexResourceId\"));",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "96c3e279-7a4a-4d8f-ad44-954f734ca875",
														"exec": [
															"var moment = require('moment');",
															"var lastUpdated = moment(pm.environment.get('requestedOn')).format('YYYY-MM-DD');",
															"pm.environment.set('lastUpdated',lastUpdated);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"datetime\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"lastUpdated\",\n\t\t        \t\"value\":\"{{lastUpdated}}\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Can fetch patient resource where _lastUpdated = date and time resource was created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b80e1138-adf3-4379-a7cb-931efbab326e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9018e74c-19c4-4b32-a09f-959169e80e27",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Query Patient Index by LastUpdated - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Query Patient Index by LastUpdated - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"pm.test(\"Can Query Patient Index by LastUpdated - exactly one result is returned (as expected)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});",
															"pm.test(\"Can Query Patient Index by LastUpdated - results returned by query matches that of the resource created\", function () {",
															"    var jsonData = pm.response.json();",
															"    var resultId = jsonData.data.query[0].results[0];",
															"    pm.expect(resultId).to.eql(pm.environment.get(\"indexResourceId\"));",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"datetime\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"lastUpdated\",\n\t\t        \t\"value\":\"{{requestedOn}}\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "patients",
									"item": [
										{
											"name": "Can index a male patient resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Create Patient Index - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
															"});",
															"//Indices are returned in the service response...",
															"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.indices).to.exist &&",
															"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
															"});",
															"//Each index object is formed correctly...",
															"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
															"    var jsonData = pm.response.json();",
															"    var indices = jsonData.data.indices;",
															"    indices.forEach(function(index) {",
															"        pm.expect(index.indexType).to.exist &&",
															"            pm.expect(index.path).to.exist &&",
															"                pm.expect(index.path).to.be.an('array') &&",
															"                    pm.expect(index.value).to.exist",
															"    });",
															"    //hash index for comparison to read...",
															"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "894473ea-c452-4d94-b9f7-75191b290674",
														"exec": [
															"//Get the last NHS number, increment it and persist new value in env vars...",
															"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
															"nhsNumber++;",
															"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
															"",
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"pm.environment.set(\"indexResourceId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"type": "text",
														"value": "application/fhir+json"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":{\r\n    \t\"results\":{\r\n    \t\t\"resourceType\": \"Patient\",\r\n\t\t        \"id\":\"{{indexResourceId}}\",\r\n\t\t        \"identifier\": [{\r\n\t\t            \"extension\": [{\r\n\t\t                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n\t\t                \"valueCodeableConcept\": {\r\n\t\t                    \"coding\": [{\r\n\t\t                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n\t\t                        \"code\": \"01\",\r\n\t\t                        \"display\": \"Number present and verified\"\r\n\t\t                    }]\r\n\t\t                }\r\n\t\t            }],\r\n\t\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n\t\t            \"value\": \"{{lastTestNHSNumber}}\"\r\n\t\t        }],\r\n\t\t        \"active\": true,\r\n\t\t        \"name\": [{\r\n\t\t            \"use\": \"official\",\r\n\t\t            \"family\": \"AAATEST\",\r\n\t\t            \"given\": [\r\n\t\t                \"AAA\"\r\n\t\t            ],\r\n\t\t            \"prefix\": [\r\n\t\t                \"AAA\"\r\n\t\t            ]\r\n\t\t        }],\r\n\t\t        \"gender\": \"male\",\r\n\t\t        \"birthDate\": \"1986-02-27\",\r\n\t\t        \"address\": [{\r\n\t\t            \"use\": \"home\",\r\n\t\t            \"type\": \"physical\"\r\n\t\t        }],\r\n\t\t        \"maritalStatus\": {\r\n\t\t            \"coding\": [{\r\n\t\t                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n\t\t                \"code\": \"S\",\r\n\t\t                \"display\": \"Never Married\"\r\n\t\t            }]\r\n\t\t        },\r\n\t\t        \"generalPractitioner\": [{\r\n\t\t            \"reference\": \"Practitioner/203529\",\r\n\t\t            \"display\": \"Miss Nichole Gilbert\"\r\n\t\t        }],\r\n\t\t        \"managingOrganization\": {\r\n\t\t            \"reference\": \"Organization/200268\",\r\n\t\t            \"display\": \"HSCIC test Practice\"\r\n\t\t        },\r\n\t\t        \"meta\": {\r\n\t\t            \"versionId\": \"1\",\r\n\t\t            \"lastUpdated\": \"{{requestedOn}}\"\r\n\t\t        }\r\n\t\t    }\r\n    \t}\r\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "By nhs number",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Create Patient Index - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index by NHS Number - Only 1 result is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Can query index by NHS Number - - id returned by query matches that of the resource created\", function () {",
															"    var jsonData = pm.response.json();",
															"    var resultId = jsonData.data.query[0].results[0];",
															"    pm.expect(resultId).to.eql(pm.environment.get(\"indexResourceId\"));",
															"});",
															"",
															"",
															"",
															"",
															"",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"token\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"identifier\",\n\t\t        \t\"value\":\"https://fhir.nhs.uk/Id/nhs-number|{{lastTestNHSNumber}}\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Where name is exactly AAA AAATEST",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index by exact match on name - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index by exact match on name - Only 1 result is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Can query index by exact match on name - id returned by query matches that of the resource created\", function () {",
															"    var jsonData = pm.response.json();",
															"    var resultId = jsonData.data.query[0].results[0];",
															"    pm.expect(resultId).to.eql(pm.environment.get(\"indexResourceId\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"name\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"name\",\n\t\t        \t\"modifier\":\"exact\",\n\t\t        \t\"value\":\"AAA AAATEST\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Can index a female patient resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Create Patient Index - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
															"});",
															"//Indices are returned in the service response...",
															"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.indices).to.exist &&",
															"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
															"});",
															"//Each index object is formed correctly...",
															"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
															"    var jsonData = pm.response.json();",
															"    var indices = jsonData.data.indices;",
															"    indices.forEach(function(index) {",
															"        pm.expect(index.indexType).to.exist &&",
															"            pm.expect(index.path).to.exist &&",
															"                pm.expect(index.path).to.be.an('array') &&",
															"                    pm.expect(index.value).to.exist",
															"    });",
															"    //hash index for comparison to read...",
															"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "894473ea-c452-4d94-b9f7-75191b290674",
														"exec": [
															"//Get the last NHS number, increment it and persist new value in env vars...",
															"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
															"nhsNumber++;",
															"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
															"",
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"pm.environment.set(\"indexResourceId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"type": "text",
														"value": "application/fhir+json"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n    \t\"results\":{\r\n\t        \"resourceType\": \"Patient\",\r\n\t        \"id\":\"{{indexResourceId}}\",\r\n\t        \"identifier\": [{\r\n\t            \"extension\": [{\r\n\t                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                \"valueCodeableConcept\": {\r\n\t                    \"coding\": [{\r\n\t                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                        \"code\": \"01\",\r\n\t                        \"display\": \"Number present and verified\"\r\n\t                    }]\r\n\t                }\r\n\t            }],\r\n\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n\t            \"value\": \"{{lastTestNHSNumber}}\"\r\n\t        }],\r\n\t        \"active\": true,\r\n\t        \"name\": [{\r\n\t            \"use\": \"official\",\r\n\t            \"family\": \"ZZZTEST\",\r\n\t            \"given\": [\r\n\t                \"ZZZ\"\r\n\t            ],\r\n\t            \"prefix\": [\r\n\t                \"ZZZ\"\r\n\t            ]\r\n\t        }],\r\n\t        \"gender\": \"female\",\r\n\t        \"birthDate\": \"1986-02-27\",\r\n\t        \"address\": [{\r\n\t            \"use\": \"home\",\r\n\t            \"type\": \"physical\"\r\n\t        }],\r\n\t        \"maritalStatus\": {\r\n\t            \"coding\": [{\r\n\t                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n\t                \"code\": \"S\",\r\n\t                \"display\": \"Never Married\"\r\n\t            }]\r\n\t        },\r\n\t        \"generalPractitioner\": [{\r\n\t            \"reference\": \"Practitioner/203529\",\r\n\t            \"display\": \"Miss Nichole Gilbert\"\r\n\t        }],\r\n\t        \"managingOrganization\": {\r\n\t            \"reference\": \"Organization/200268\",\r\n\t            \"display\": \"HSCIC test Practice\"\r\n\t        },\r\n\t        \"meta\": {\r\n\t            \"versionId\": \"1\",\r\n\t            \"lastUpdated\": \"{{requestedOn}}\"\r\n\t        }\r\n\t    }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Female Patients where family name starting with ZZZ",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index by exact match on name - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index by exact match on name and gender - Only 1 result is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Can query index by exact match on name and gender - id returned by query matches that of the resource created\", function () {",
															"    var jsonData = pm.response.json();",
															"    var resultId = jsonData.data.query[0].results[0];",
															"    pm.expect(resultId).to.eql(pm.environment.get(\"indexResourceId\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"string\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"gender\",\n\t\t        \t\"value\":\"female\"\n\t\t\t    },\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"name\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"family\",\n\t\t        \t\"value\":\"ZZZ\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Male patients where name contains test",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index by LIKE/CONTAINS match on name - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index by LIKE/CONTAINS match on name - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index by LIKE/CONTAINS match on name - Only 1 result is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Can query index by LIKE/CONTAINS match on name - id returned by query matches that of the resource created\", function () {",
															"    var jsonData = pm.response.json();",
															"    var resultId = jsonData.data.query[0].results[0];",
															"    pm.expect(resultId).to.eql(pm.environment.get(\"indexResourceId\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"string\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"gender\",\n\t\t        \t\"value\":\"male\"\n\t\t\t    },\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"name\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"name\",\n\t\t        \t\"modifier\":\"contains\",\n\t\t        \t\"value\":\"test\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Male or female patients",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index by LIKE/CONTAINS match on name - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index by LIKE/CONTAINS match on name - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for male or female patients - 2 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(2);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"string\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"gender\",\n\t\t        \t\"value\":\"male,female\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "DOB equals 1986-02-27",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index for patient's with DOB of 1986-02-27 - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index for patient's with DOB of 1986-02-27 - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for patient's with DOB of 1986-02-27 - 2 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(2);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"datetime\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"birthDate\",\n\t\t        \t\"value\":\"1986-02-27\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Managing organization equals Organization/200268",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index for patient's with Managing Organization/200268 - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index for patient's with Managing Organization/200268 - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for patient's with Managing Organization/200268- 2 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"reference\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"organization\",\n\t\t        \t\"value\":\"Organization/200268\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Managing organization equals 200268",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index for patient's with Managing Organization === 200268 - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index for patient's with Managing Organization === 200268 - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for patient's with Managing Organization === 200268 - 2 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"reference\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"organization\",\n\t\t        \t\"value\":\"200268\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "General practitioner equals Practitioner/203529",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index for patient's where Practitioner === Practitioner/203529 - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index for patient's where Practitioner === Practitioner/203529 - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for patient's where Practitioner === Practitioner/203529 - 2 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"reference\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"general-practitioner\",\n\t\t        \t\"value\":\"203529\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "General practitioner equals 203529",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index for patient's where Practitioner === 203529 - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index for patient's where Practitioner === 203529 - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for patient's where Practitioner === 203529 - 2 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Patient\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"reference\",\n\t\t\t    \t\"documentType\":\"patient\",\n\t\t        \t\"node\":\"general-practitioner\",\n\t\t        \t\"value\":\"Practitioner/203529\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "encounters",
									"item": [
										{
											"name": "Can index a female patient resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can Create Patient Index - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
															"});",
															"//Indices are returned in the service response...",
															"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.indices).to.exist &&",
															"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
															"});",
															"//Each index object is formed correctly...",
															"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
															"    var jsonData = pm.response.json();",
															"    var indices = jsonData.data.indices;",
															"    indices.forEach(function(index) {",
															"        pm.expect(index.indexType).to.exist &&",
															"            pm.expect(index.path).to.exist &&",
															"                pm.expect(index.path).to.be.an('array') &&",
															"                    pm.expect(index.value).to.exist",
															"    });",
															"    //hash index for comparison to read...",
															"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "894473ea-c452-4d94-b9f7-75191b290674",
														"exec": [
															"//Get the last NHS number, increment it and persist new value in env vars...",
															"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
															"nhsNumber++;",
															"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
															"",
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"pm.environment.set(\"indexResourceId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"type": "text",
														"value": "application/fhir+json"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n    \t\"results\":{\r\n\t        \"resourceType\": \"Patient\",\r\n\t        \"id\":\"{{indexResourceId}}\",\r\n\t        \"identifier\": [{\r\n\t            \"extension\": [{\r\n\t                \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                \"valueCodeableConcept\": {\r\n\t                    \"coding\": [{\r\n\t                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n\t                        \"code\": \"01\",\r\n\t                        \"display\": \"Number present and verified\"\r\n\t                    }]\r\n\t                }\r\n\t            }],\r\n\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n\t            \"value\": \"{{lastTestNHSNumber}}\"\r\n\t        }],\r\n\t        \"active\": true,\r\n\t        \"name\": [{\r\n\t            \"use\": \"official\",\r\n\t            \"family\": \"ZZZTEST\",\r\n\t            \"given\": [\r\n\t                \"ZZZ\"\r\n\t            ],\r\n\t            \"prefix\": [\r\n\t                \"ZZZ\"\r\n\t            ]\r\n\t        }],\r\n\t        \"gender\": \"female\",\r\n\t        \"birthDate\": \"1986-02-27\",\r\n\t        \"address\": [{\r\n\t            \"use\": \"home\",\r\n\t            \"type\": \"physical\"\r\n\t        }],\r\n\t        \"maritalStatus\": {\r\n\t            \"coding\": [{\r\n\t                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n\t                \"code\": \"S\",\r\n\t                \"display\": \"Never Married\"\r\n\t            }]\r\n\t        },\r\n\t        \"generalPractitioner\": [{\r\n\t            \"reference\": \"Practitioner/203529\",\r\n\t            \"display\": \"Miss Nichole Gilbert\"\r\n\t        }],\r\n\t        \"managingOrganization\": {\r\n\t            \"reference\": \"Organization/200268\",\r\n\t            \"display\": \"HSCIC test Practice\"\r\n\t        },\r\n\t        \"meta\": {\r\n\t            \"versionId\": \"1\",\r\n\t            \"lastUpdated\": \"{{requestedOn}}\"\r\n\t        }\r\n\t    }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Can index an IMP encounter resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can index an encounter resource - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can index an encounter resource - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
															"});",
															"//Indices are returned in the service response...",
															"pm.test(\"Can index an encounter resource - service response message contains indices)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.indices).to.exist &&",
															"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
															"});",
															"//Each index object is formed correctly...",
															"pm.test(\"Can index an encounter resource - each index object returned is formed correctly)\", function () {",
															"    var jsonData = pm.response.json();",
															"    var indices = jsonData.data.indices;",
															"    indices.forEach(function(index) {",
															"        pm.expect(index.indexType).to.exist &&",
															"            pm.expect(index.path).to.exist &&",
															"                pm.expect(index.path).to.be.an('array') &&",
															"                    pm.expect(index.value).to.exist",
															"    });",
															"    //hash index for comparison to read...",
															"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "894473ea-c452-4d94-b9f7-75191b290674",
														"exec": [
															"//Get the last NHS number, increment it and persist new value in env vars...",
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"type": "text",
														"value": "application/fhir+json"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n\t\t    \"results\":{\r\n\t\t    \"resourceType\": \"Encounter\",\r\n\t\t        \"id\": \"759\",\r\n\t\t        \"meta\": {\r\n\t\t            \"lastUpdated\": \"2019-03-06T13:34:37.072+00:00\",\r\n\t\t            \"profile\": [\r\n\t\t                \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\r\n\t\t            ]\r\n\t\t        },\r\n\t\t        \"identifier\": [\r\n\t\t            {\r\n\t\t                \"system\": \"https://tools.ietf.org/html/rfc4122\",\r\n\t\t                \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\r\n\t\t            }\r\n\t\t        ],\r\n\t\t        \"status\": \"arrived\",\r\n\t\t        \"class\": {\r\n\t\t            \"system\": \"http://hl7.org/fhir/v3/ActCode\",\r\n\t\t            \"code\": \"IMP\",\r\n\t\t            \"display\": \"inpatient encounter\"\r\n\t\t        },\r\n\t\t        \"subject\": {\r\n\t\t            \"reference\": \"Patient/{{indexResourceId}}\",\r\n\t\t        \t\"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\r\n\t\t        },\r\n\t\t        \"participant\": [\r\n\t\t            {\r\n\t\t                \"type\": [\r\n\t\t                    {\r\n\t\t                        \"coding\": [\r\n\t\t                            {\r\n\t\t                                \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\r\n\t\t                                \"code\": \"DIS\",\r\n\t\t                                \"display\": \"discharger\"\r\n\t\t                            }\r\n\t\t                        ]\r\n\t\t                    }\r\n\t\t                ],\r\n\t\t                \"individual\": {\r\n\t\t                    \"reference\": \"Practitioner/203557\",\r\n\t\t                    \"display\": \"Dr Harold Heart\"\r\n\t\t                }\r\n\t\t            }\r\n\t\t        ],\r\n                \"period\": {\r\n                    \"start\": \"2018-11-30T09:00:00\",\r\n                    \"end\": \"2018-11-30T10:00:00\"\r\n                }\r\n\t\t    }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Can index an EMER encounter resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can index an encounter resource - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can index an encounter resource - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
															"});",
															"//Indices are returned in the service response...",
															"pm.test(\"Can index an encounter resource - service response message contains indices)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.indices).to.exist &&",
															"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
															"});",
															"//Each index object is formed correctly...",
															"pm.test(\"Can index an encounter resource - each index object returned is formed correctly)\", function () {",
															"    var jsonData = pm.response.json();",
															"    var indices = jsonData.data.indices;",
															"    indices.forEach(function(index) {",
															"        pm.expect(index.indexType).to.exist &&",
															"            pm.expect(index.path).to.exist &&",
															"                pm.expect(index.path).to.be.an('array') &&",
															"                    pm.expect(index.value).to.exist",
															"    });",
															"    //hash index for comparison to read...",
															"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "894473ea-c452-4d94-b9f7-75191b290674",
														"exec": [
															"//Get the last NHS number, increment it and persist new value in env vars...",
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"type": "text",
														"value": "application/fhir+json"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":\r\n    {\r\n\t\t    \"results\":{\r\n\t\t    \"resourceType\": \"Encounter\",\r\n\t\t        \"id\": \"755\",\r\n\t\t        \"meta\": {\r\n\t\t            \"lastUpdated\": \"2019-03-06T13:34:37.072+00:00\",\r\n\t\t            \"profile\": [\r\n\t\t                \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\r\n\t\t            ]\r\n\t\t        },\r\n\t\t        \"identifier\": [\r\n\t\t            {\r\n\t\t                \"system\": \"https://tools.ietf.org/html/rfc4122\",\r\n\t\t                \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\r\n\t\t            }\r\n\t\t        ],\r\n\t\t        \"status\": \"finished\",\r\n\t\t        \"class\": {\r\n\t\t            \"system\": \"http://hl7.org/fhir/v3/ActCode\",\r\n\t\t            \"code\": \"EMER\",\r\n\t\t            \"display\": \"emergency attendance\"\r\n\t\t        },\r\n\t\t        \"subject\": {\r\n\t\t            \"reference\": \"Patient/{{indexResourceId}}\",\r\n\t\t        \t\"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\r\n\t\t        },\r\n\t\t        \"participant\": [\r\n\t\t            {\r\n\t\t                \"type\": [\r\n\t\t                    {\r\n\t\t                        \"coding\": [\r\n\t\t                            {\r\n\t\t                                \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\r\n\t\t                                \"code\": \"DIS\",\r\n\t\t                                \"display\": \"discharger\"\r\n\t\t                            }\r\n\t\t                        ]\r\n\t\t                    }\r\n\t\t                ],\r\n\t\t                \"individual\": {\r\n\t\t                    \"reference\": \"Practitioner/203557\",\r\n\t\t                    \"display\": \"Dr Harold Heart\"\r\n\t\t                }\r\n\t\t            }\r\n\t\t        ],\r\n                \"period\": {\r\n                    \"start\": \"2018-11-28T09:00:00\",\r\n                    \"end\": \"2018-11-28T10:00:00\"\r\n                }\r\n\t\t    }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Encounter where participant type code = DIS",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index for Encounter where participant type code === 'DIS' - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index for Encounter where participant type code === 'DIS'  - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for Encounter where participant type code === 'DIS' - 1 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Encounter\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"token\",\n\t\t\t    \t\"documentType\":\"encounter\",\n\t\t        \t\"node\":\"participant-type\",\n\t\t        \t\"value\":\"DIS\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Encounter where class = IMP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index for Encounter where class === 'IMP' - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index for Encounter where class === 'IMP' - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for Encounter where class === 'IMP' - 1 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Encounter\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"token\",\n\t\t\t    \t\"documentType\":\"encounter\",\n\t\t        \t\"node\":\"class\",\n\t\t        \t\"value\":\"IMP\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Encounter where class = IMP or EMER",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Can query index for Encounter where class === 'IMP' OR 'EMER' - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can query index for Encounter where class === 'IMP' OR 'EMER' - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Can query index for Encounter where class === 'IMP' OR 'EMER' - 1 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Encounter\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"token\",\n\t\t\t    \t\"documentType\":\"encounter\",\n\t\t        \t\"node\":\"class\",\n\t\t        \t\"value\":\"IMP,EMER\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Encounter where start is after 29-Nov-2018 and end is before 02-Dec-2018",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "90e34122-da2f-4115-833f-063e067df9d4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
														"exec": [
															"//Expect 200 success...",
															"pm.test(\"Encounter where start is after 29-Nov-2018 and end is before 02-Dec-2018 - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Encounter where start is after 29-Nov-2018 and end is before 02-Dec-2018 - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"",
															"pm.test(\"Encounter where start is after 29-Nov-2018 and end is before 02-Dec-2018 - 1 results is returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"documentType\":\"Encounter\",\n    \t\t\"parameters\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t    \t\"indexType\": \"period\",\n\t\t\t    \t\"documentType\":\"encounter\",\n\t\t        \t\"node\":\"startDate\",\n\t\t        \t\"modifier\":\"gt\",\n\t\t        \t\"value\":\"2018-11-29\"\n\t\t\t    },\n\t\t\t    {\n\t\t\t    \t\"indexType\": \"period\",\n\t\t\t    \t\"documentType\":\"encounter\",\n\t\t        \t\"node\":\"endDate\",\n\t\t        \t\"modifier\":\"lt\",\n\t\t        \t\"value\":\"2018-12-01\"\n\t\t\t    }\n\t\t\t]\n    \t}\n    }\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										},
										{
											"name": "Can execute multiple encounter index queries",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59ad638e-4aaa-485a-98e9-789fc7ff0f97",
														"exec": [
															"//Encounter class= EMER and status = finished",
															"//Encounter class= IMP and status = arrived",
															"//This test provides a template for the inbound message that the publisher service needs to create in order to test a resource against the criteria within a subscription... publisher service needs to add _id parameter (where id === resource id created/updated)",
															"//Expect 201 success...",
															"pm.test(\"Can execute multiple encounter index queries - 201 returned\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"//Service response is returned",
															"pm.test(\"Can execute multiple encounter index queries - service response message is returned (as opposed to error response)\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messageId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.exist &&",
															"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
															"    pm.expect(jsonData.responseId).to.exist &&",
															"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
															"    pm.expect(jsonData.operation).to.eql(\"QUERY\")",
															"});",
															"//Expect two result sets (based on the creation of an IMP and EMER resource)",
															"pm.test(\"Can execute multiple encounter index queries - 2 result sets are returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query.length).to.eql(2);",
															"});",
															"//Expect the first result id to === id 755",
															"pm.test(\"Can execute multiple encounter index queries - 1st result set contains a single id === 755\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[0].results.length).to.eql(1);",
															"    pm.expect(jsonData.data.query[0].results[0]).to.eql(\"755\");",
															"});",
															"//Expect the first result id to === id 759",
															"pm.test(\"Can execute multiple encounter index queries - 2nd result set contains a single id === 759\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.query[1].results.length).to.eql(1);",
															"    pm.expect(jsonData.data.query[1].results[0]).to.eql(\"759\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "49bc8e08-8075-4c0d-bfea-1a8650389eea",
														"exec": [
															"//Get the last NHS number, increment it and persist new value in env vars...",
															"var uuid = require('uuid');",
															"pm.environment.set(\"messageId\", uuid.v4());",
															"pm.environment.set(\"requestId\", uuid.v4());",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"requestedOn\", moment().utc().format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "accept",
														"value": "application/fhir+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"subscription\":{\"test\":\"1\"},\n    \"data\":{\n    \t\"query\":[\n\t    \t\t    {\n\t\t                \"documentType\": \"Encounter\",\n\t\t                \"parameters\": [\n\t\t                    {\n\t\t                        \"indexType\": \"token\",\n\t\t                        \"documentType\": \"encounter\",\n\t\t                        \"node\": \"class\",\n\t\t                        \"value\": \"EMER\"\n\t\t                    },\n\t\t                    {\n\t\t\t\t\t\t    \t\"indexType\": \"string\",\n\t\t\t\t\t\t    \t\"documentType\":\"encounter\",\n\t\t\t\t\t        \t\"node\":\"status\",\n\t\t\t\t\t        \t\"value\":\"finished\"\n\t\t\t\t\t\t\t }\n\t\t                ]\n\t            \t},\n\t            \t{\n\t\t                \"documentType\": \"Encounter\",\n\t\t                \"parameters\": [\n\t\t                    {\n\t\t                        \"indexType\": \"token\",\n\t\t                        \"documentType\": \"encounter\",\n\t\t                        \"node\": \"class\",\n\t\t                        \"value\": \"IMP\"\n\t\t                    },\n\t\t                    {\n\t\t\t\t\t\t    \t\"indexType\": \"string\",\n\t\t\t\t\t\t    \t\"documentType\":\"encounter\",\n\t\t\t\t\t        \t\"node\":\"status\",\n\t\t\t\t\t        \t\"value\":\"arrived\"\n\t\t\t\t\t\t\t }\n\t\t                ]\n\t            \t}\n            \t]\n    \t\t}\n}"
												},
												"url": {
													"raw": "{{proxy_server_address}}/api/v1/tests/repo/index/query",
													"host": [
														"{{proxy_server_address}}"
													],
													"path": [
														"api",
														"v1",
														"tests",
														"repo",
														"index",
														"query"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "search-service",
			"item": [
				{
					"name": "sorting",
					"item": [
						{
							"name": "Save search result set",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Fetch the bundle id from response...",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"bundleId\", jsonData.searchSetId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"query\":{\"sort\":\"1\"},\n\t\t\"bundle\":\n\t\t{\n\t\t\t\"resourceType\": \"Bundle\",\n\t\t\t\t\"type\": \"searchset\",\n\t\t\t\t\"total\": 3,\n\t\t\t\t\"link\": [{\n\t\t\t\t\t\"relation\": \"self\",\n\t\t\t\t\t\"url\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=smith\"\n\t\t\t\t}],\n\t\t\t\t\"entry\": [{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/4\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"1\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-20T11:52:26.055+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\t\t\"code\": \"CY\",\n\t\t\t\t\t\t\t\t\t\t\"display\": \"Other white European, European unspecified, European mixed\"\n\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"3333333333\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"AAATEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"AAA\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mrs\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"telecom\": [{\n\t\t\t\t\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\t\t\t\t\"value\": \"+441234567890\",\n\t\t\t\t\t\t\t\t\"use\": \"home\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"female\",\n\t\t\t\t\t\t\t\"birthDate\": \"1965-12-13\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"29 West Avenue\",\n\t\t\t\t\t\t\t\t\t\"Bury Thorpe\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Malton\",\n\t\t\t\t\t\t\t\t\"district\": \"North Yorkshire\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"YO32 5TT\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\t\"reference\": \"Practitioner/200000\",\n\t\t\t\t\t\t\t\t\"display\": \"Dr. Gregory Townley\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\t\"reference\": \"Organization/200000\",\n\t\t\t\t\t\t\t\t\"display\": \"Malton GP Practice\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1170\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"2\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2018-09-21T15:55:59.403+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"2378954317\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"BBBTEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"BBB\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\t\"birthDate\": \"1956-02-04\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"use\": \"home\",\n\t\t\t\t\t\t\t\t\"type\": \"both\",\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"14 Sunny Mews\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Overtown\",\n\t\t\t\t\t\t\t\t\"district\": \"West Yorkshire\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"LS17 4NK\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\t\"reference\": \"Practitioner/203508\",\n\t\t\t\t\t\t\t\t\"display\": \"Dr Paul Rastall\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\t\"reference\": \"Organization/200236\",\n\t\t\t\t\t\t\t\t\"display\": \"MGP Medical Centre\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1172\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"3\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-23T07:46:05.576+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"1352465790\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"CCCTEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"CCC\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\t\"birthDate\": \"1957-01-01\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"21, Grove Street, Overtown\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Leeds\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"LS21 1PF\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patients sorted by -family",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Give me patients sorted by family name in reverse alphabetical order ...",
											"",
											"//Expect 200 success...",
											"pm.test(\"Can Query and Sort Patient Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Query and Sort Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"SORT\")",
											"});",
											"",
											"pm.test(\"Can Query and Sort Patient Index - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.resourceType).to.eql(\"Bundle\");",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - exactly three results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(3);",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (reverse alphabetical)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.name[0].family).to.eql(\"CCCTEST\") && ",
											"        pm.expect(jsonData.data.results.entry[1].resource.name[0].family).to.eql(\"BBBTEST\") && ",
											"            pm.expect(jsonData.data.results.entry[2].resource.name[0].family).to.eql(\"AAATEST\")",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"sort\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"family\",\n\t\t\t\t\t\"direction\":\"desc\"\n\t\t\t\t}\n\t\t\t]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/sort",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"sort"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patients sorted by birthdate, gender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Give me patients sorted by oldest first then in gender alphabetical order ...",
											"//F first, youngest male last",
											"var moment = require('moment');",
											"//Expect 200 success...",
											"pm.test(\"Can Query and Sort Patient Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Query and Sort Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"SORT\")",
											"});",
											"",
											"pm.test(\"Can Query and Sort Patient Index - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.resourceType).to.eql(\"Bundle\");",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - exactly three results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(3);",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (alphabetically by gender)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.gender).to.eql(\"female\") && ",
											"        pm.expect(jsonData.data.results.entry[1].resource.gender).to.eql(\"male\") && ",
											"            pm.expect(jsonData.data.results.entry[2].resource.gender).to.eql(\"male\")",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (oldest first in gender groups)\", function () {",
											"    var jsonData = pm.response.json();",
											"    var birthDate1 = moment(jsonData.data.results.entry[1].resource.birthDate,[\"YYYY-MM-DD\"]).valueOf();",
											"    var birthDate2 = moment(jsonData.data.results.entry[2].resource.birthDate,[\"YYYY-MM-DD\"]).valueOf();",
											"    pm.expect(birthDate1).to.be.below(birthDate2)//read as date1 to be before date2",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"sort\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"birthDate\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"gender\"\n\t\t\t\t}\n\t\t\t]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/sort",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"sort"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patients sorted by -birthdate, gender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Give me patients sorted by youngest first then in gender alphabetical order ...",
											"//F first, youngest male first, oldest male last",
											"var moment = require('moment');",
											"//Expect 200 success...",
											"pm.test(\"Can Query and Sort Patient Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Query and Sort Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"SORT\")",
											"});",
											"",
											"pm.test(\"Can Query and Sort Patient Index - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.resourceType).to.eql(\"Bundle\");",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - exactly three results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(3);",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (alphabetically by gender)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.gender).to.eql(\"female\") && ",
											"        pm.expect(jsonData.data.results.entry[1].resource.gender).to.eql(\"male\") && ",
											"            pm.expect(jsonData.data.results.entry[2].resource.gender).to.eql(\"male\")",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (youngest first in gender groups)\", function () {",
											"    var jsonData = pm.response.json();",
											"    var birthDate1 = moment(jsonData.data.results.entry[1].resource.birthDate,[\"YYYY-MM-DD\"]).valueOf();",
											"    var birthDate2 = moment(jsonData.data.results.entry[2].resource.birthDate,[\"YYYY-MM-DD\"]).valueOf();",
											"    pm.expect(birthDate1).to.be.above(birthDate2)//read as date1 to be after date2",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"sort\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"birthDate\",\n\t\t\t\t\t\"direction\":\"desc\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"gender\"\n\t\t\t\t}\n\t\t\t]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/sort",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"sort"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patients sorted by -family, gender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Sort reverse alphabetically by family name then sort by gender",
											"//F first, then CC, BB",
											"",
											"//Expect 200 success...",
											"pm.test(\"Can Query and Sort Patient Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Query and Sort Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"SORT\")",
											"});",
											"",
											"pm.test(\"Can Query and Sort Patient Index - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.resourceType).to.eql(\"Bundle\");",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - exactly three results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(3);",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (reverse alphabetical)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.name[0].family).to.eql(\"AAATEST\") && ",
											"        pm.expect(jsonData.data.results.entry[1].resource.name[0].family).to.eql(\"CCCTEST\") && ",
											"            pm.expect(jsonData.data.results.entry[2].resource.name[0].family).to.eql(\"BBBTEST\")",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (alphabetically by gender)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.gender).to.eql(\"female\") && ",
											"        pm.expect(jsonData.data.results.entry[1].resource.gender).to.eql(\"male\") && ",
											"            pm.expect(jsonData.data.results.entry[2].resource.gender).to.eql(\"male\")",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"sort\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"family\",\n\t\t\t\t\t\"direction\":\"desc\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"gender\"\n\t\t\t\t}\n\t\t\t]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/sort",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"sort"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patients sorted by -id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Sort id descending",
											"//3,2,1",
											"",
											"//Expect 200 success...",
											"pm.test(\"Can Query and Sort Patient Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Query and Sort Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"SORT\")",
											"});",
											"",
											"pm.test(\"Can Query and Sort Patient Index - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.resourceType).to.eql(\"Bundle\");",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - exactly three results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(3);",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (id getting smaller)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.id).to.eql(3) && ",
											"        pm.expect(jsonData.data.results.entry[1].resource.id).to.eql(2) && ",
											"            pm.expect(jsonData.data.results.entry[2].resource.id).to.eql(1)",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"sort\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"_id\",\n\t\t\t\t\t\"direction\":\"desc\"\n\t\t\t\t}\n\t\t\t]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/sort",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"sort"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "crud",
					"item": [
						{
							"name": "Can save a search result set",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f23de5a0-e54c-4a82-aa64-9da881387f8f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e7f6bec5-cfdd-49ba-9102-bdde56f2cd27",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can persist a search result set - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can persist a search result set - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can persist a search result set - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.searchSetId).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"bundleId\", jsonData.searchSetId);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": \n\t\t{\n\t\t\t\"query\":{\"sort\":\"1\"},\n\t\t\t\"bundle\":{\n\t\t\t\t\"resourceType\": \"Bundle\",\n\t\t\t\t\"type\": \"searchset\",\n\t\t\t\t\"total\": 3,\n\t\t\t\t\"link\": [{\n\t\t\t\t\t\"relation\": \"self\",\n\t\t\t\t\t\"url\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=smith\"\n\t\t\t\t}],\n\t\t\t\t\"entry\": [{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/4\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"4\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-20T11:52:26.055+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\t\t\"code\": \"CY\",\n\t\t\t\t\t\t\t\t\t\t\"display\": \"Other white European, European unspecified, European mixed\"\n\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"3333333333\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"Smith\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"Fredrica\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mrs\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"telecom\": [{\n\t\t\t\t\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\t\t\t\t\"value\": \"+441234567890\",\n\t\t\t\t\t\t\t\t\"use\": \"home\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"female\",\n\t\t\t\t\t\t\t\"birthDate\": \"1965-12-13\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"29 West Avenue\",\n\t\t\t\t\t\t\t\t\t\"Bury Thorpe\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Malton\",\n\t\t\t\t\t\t\t\t\"district\": \"North Yorkshire\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"YO32 5TT\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\t\"reference\": \"Practitioner/200000\",\n\t\t\t\t\t\t\t\t\"display\": \"Dr. Gregory Townley\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\t\"reference\": \"Organization/200000\",\n\t\t\t\t\t\t\t\t\"display\": \"Malton GP Practice\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1170\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"1170\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2018-09-21T15:55:59.403+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"2378954317\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"Smith\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"William\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\t\"birthDate\": \"1956-02-04\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"use\": \"home\",\n\t\t\t\t\t\t\t\t\"type\": \"both\",\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"14 Sunny Mews\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Overtown\",\n\t\t\t\t\t\t\t\t\"district\": \"West Yorkshire\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"LS17 4NK\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\t\"reference\": \"Practitioner/203508\",\n\t\t\t\t\t\t\t\t\"display\": \"Dr Paul Rastall\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\t\"reference\": \"Organization/200236\",\n\t\t\t\t\t\t\t\t\"display\": \"MGP Medical Centre\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1172\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"1172\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-23T07:46:05.576+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"1352465790\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"Smith\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"Richard\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\t\"birthDate\": \"1957-01-01\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"21, Grove Street, Overtown\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Leeds\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"LS21 1PF\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\t\n\t\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can update a search result set",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f23de5a0-e54c-4a82-aa64-9da881387f8f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e7f6bec5-cfdd-49ba-9102-bdde56f2cd27",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can update a search result set - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can update a search result set - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"UPDATE\")",
											"});",
											"//Search set id returned is the same as the id assigned by the server...",
											"pm.test(\"Can update a search result set - Search set id returned is the same as the id assigned by the server\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.searchSetId).to.exist;",
											"    pm.expect(jsonData.searchSetId).to.eql(pm.environment.get('bundleId'));",
											"});",
											"",
											"//Expected update is persisted...",
											"pm.test(\"Can update a search result set - total in updated result set === 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.total).to.eql(4);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n    \"data\": {\n    \t\"query\":{\"sort\":1},\n    \t\"results\":{\n    \t\t \"resourceType\": \"Bundle\",\n\t\t        \"type\": \"searchset\",\n\t\t        \"total\": 4,\n\t\t        \"link\": [\n\t\t            {\n\t\t                \"relation\": \"self\",\n\t\t                \"url\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=smith\"\n\t\t            }\n\t\t        ],\n\t\t        \"entry\": [\n\t\t            {\n\t\t                \"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/4\",\n\t\t                \"resource\": {\n\t\t                    \"resourceType\": \"Patient\",\n\t\t                    \"id\": \"4\",\n\t\t                    \"meta\": {\n\t\t                        \"lastUpdated\": \"2019-03-20T11:52:26.055+00:00\",\n\t\t                        \"profile\": [\n\t\t                            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t                        ]\n\t\t                    },\n\t\t                    \"extension\": [\n\t\t                        {\n\t\t                            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-EthnicCategory-1\",\n\t\t                            \"valueCodeableConcept\": {\n\t\t                                \"coding\": [\n\t\t                                    {\n\t\t                                        \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-EthnicCategory-1\",\n\t\t                                        \"code\": \"CY\",\n\t\t                                        \"display\": \"Other white European, European unspecified, European mixed\"\n\t\t                                    }\n\t\t                                ]\n\t\t                            }\n\t\t                        }\n\t\t                    ],\n\t\t                    \"identifier\": [\n\t\t                        {\n\t\t                            \"extension\": [\n\t\t                                {\n\t\t                                    \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t                                    \"valueCodeableConcept\": {\n\t\t                                        \"coding\": [\n\t\t                                            {\n\t\t                                                \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t                                                \"code\": \"01\",\n\t\t                                                \"display\": \"Number present and verified\"\n\t\t                                            }\n\t\t                                        ]\n\t\t                                    }\n\t\t                                }\n\t\t                            ],\n\t\t                            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t                            \"value\": \"3333333333\"\n\t\t                        }\n\t\t                    ],\n\t\t                    \"name\": [\n\t\t                        {\n\t\t                            \"use\": \"official\",\n\t\t                            \"family\": \"Smith\",\n\t\t                            \"given\": [\n\t\t                                \"Fredrica\"\n\t\t                            ],\n\t\t                            \"prefix\": [\n\t\t                                \"Mrs\"\n\t\t                            ]\n\t\t                        }\n\t\t                    ],\n\t\t                    \"telecom\": [\n\t\t                        {\n\t\t                            \"system\": \"phone\",\n\t\t                            \"value\": \"+441234567890\",\n\t\t                            \"use\": \"home\"\n\t\t                        }\n\t\t                    ],\n\t\t                    \"gender\": \"female\",\n\t\t                    \"birthDate\": \"1965-12-13\",\n\t\t                    \"address\": [\n\t\t                        {\n\t\t                            \"use\": \"work\",\n\t\t                            \"line\": [\n\t\t                                \"29 West Avenue\",\n\t\t                                \"Bury Thorpe\"\n\t\t                            ],\n\t\t                            \"city\": \"Malton\",\n\t\t                            \"district\": \"North Yorkshire\",\n\t\t                            \"postalCode\": \"YO32 5TT\"\n\t\t                        }\n\t\t                    ],\n\t\t                    \"maritalStatus\": {\n\t\t                        \"coding\": [\n\t\t                            {\n\t\t                                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t                                \"code\": \"M\",\n\t\t                                \"display\": \"Married\"\n\t\t                            }\n\t\t                        ]\n\t\t                    },\n\t\t                    \"generalPractitioner\": [\n\t\t                        {\n\t\t                            \"reference\": \"Practitioner/200000\",\n\t\t                            \"display\": \"Dr. Gregory Townley\"\n\t\t                        }\n\t\t                    ],\n\t\t                    \"managingOrganization\": {\n\t\t                        \"reference\": \"Organization/200000\",\n\t\t                        \"display\": \"Malton GP Practice\"\n\t\t                    }\n\t\t                }\n\t\t            },\n\t\t            {\n\t\t                \"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1170\",\n\t\t                \"resource\": {\n\t\t                    \"resourceType\": \"Patient\",\n\t\t                    \"id\": \"1170\",\n\t\t                    \"meta\": {\n\t\t                        \"lastUpdated\": \"2018-09-21T15:55:59.403+00:00\",\n\t\t                        \"profile\": [\n\t\t                            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t                        ]\n\t\t                    },\n\t\t                    \"identifier\": [\n\t\t                        {\n\t\t                            \"extension\": [\n\t\t                                {\n\t\t                                    \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t                                    \"valueCodeableConcept\": {\n\t\t                                        \"coding\": [\n\t\t                                            {\n\t\t                                                \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t                                                \"code\": \"01\",\n\t\t                                                \"display\": \"Number present and verified\"\n\t\t                                            }\n\t\t                                        ]\n\t\t                                    }\n\t\t                                }\n\t\t                            ],\n\t\t                            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t                            \"value\": \"2378954317\"\n\t\t                        }\n\t\t                    ],\n\t\t                    \"name\": [\n\t\t                        {\n\t\t                            \"use\": \"official\",\n\t\t                            \"family\": \"Smith\",\n\t\t                            \"given\": [\n\t\t                                \"William\"\n\t\t                            ],\n\t\t                            \"prefix\": [\n\t\t                                \"Mr\"\n\t\t                            ]\n\t\t                        }\n\t\t                    ],\n\t\t                    \"gender\": \"male\",\n\t\t                    \"birthDate\": \"1956-02-04\",\n\t\t                    \"address\": [\n\t\t                        {\n\t\t                            \"use\": \"home\",\n\t\t                            \"type\": \"both\",\n\t\t                            \"line\": [\n\t\t                                \"14 Sunny Mews\"\n\t\t                            ],\n\t\t                            \"city\": \"Overtown\",\n\t\t                            \"district\": \"West Yorkshire\",\n\t\t                            \"postalCode\": \"LS17 4NK\"\n\t\t                        }\n\t\t                    ],\n\t\t                    \"maritalStatus\": {\n\t\t                        \"coding\": [\n\t\t                            {\n\t\t                                \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t                                \"code\": \"M\",\n\t\t                                \"display\": \"Married\"\n\t\t                            }\n\t\t                        ]\n\t\t                    },\n\t\t                    \"generalPractitioner\": [\n\t\t                        {\n\t\t                            \"reference\": \"Practitioner/203508\",\n\t\t                            \"display\": \"Dr Paul Rastall\"\n\t\t                        }\n\t\t                    ],\n\t\t                    \"managingOrganization\": {\n\t\t                        \"reference\": \"Organization/200236\",\n\t\t                        \"display\": \"MGP Medical Centre\"\n\t\t                    }\n\t\t                }\n\t\t            },\n\t\t            {\n\t\t                \"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1172\",\n\t\t                \"resource\": {\n\t\t                    \"resourceType\": \"Patient\",\n\t\t                    \"id\": \"1172\",\n\t\t                    \"meta\": {\n\t\t                        \"lastUpdated\": \"2019-03-23T07:46:05.576+00:00\",\n\t\t                        \"profile\": [\n\t\t                            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t                        ]\n\t\t                    },\n\t\t                    \"identifier\": [\n\t\t                        {\n\t\t                            \"extension\": [\n\t\t                                {\n\t\t                                    \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t                                    \"valueCodeableConcept\": {\n\t\t                                        \"coding\": [\n\t\t                                            {\n\t\t                                                \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t                                                \"code\": \"01\",\n\t\t                                                \"display\": \"Number present and verified\"\n\t\t                                            }\n\t\t                                        ]\n\t\t                                    }\n\t\t                                }\n\t\t                            ],\n\t\t                            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t                            \"value\": \"1352465790\"\n\t\t                        }\n\t\t                    ],\n\t\t                    \"name\": [\n\t\t                        {\n\t\t                            \"use\": \"official\",\n\t\t                            \"family\": \"Smith\",\n\t\t                            \"given\": [\n\t\t                                \"Richard\"\n\t\t                            ],\n\t\t                            \"prefix\": [\n\t\t                                \"Mr\"\n\t\t                            ]\n\t\t                        }\n\t\t                    ],\n\t\t                    \"gender\": \"male\",\n\t\t                    \"birthDate\": \"1957-01-01\",\n\t\t                    \"address\": [\n\t\t                        {\n\t\t                            \"line\": [\n\t\t                                \"21, Grove Street, Overtown\"\n\t\t                            ],\n\t\t                            \"city\": \"Leeds\",\n\t\t                            \"postalCode\": \"LS21 1PF\"\n\t\t                        }\n\t\t                    ]\n\t\t                }\n\t\t            }\n\t\t        ],\n\t\t        \"id\": \"{{bundleId}}\",\n\t\t        \"meta\": {\n\t\t            \"versionId\": \"1\",\n\t\t            \"lastUpdated\": \"2019-05-13T10:26:52Z\"\n\t\t        }\n\t\t    }\n    \t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can read a search result set",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f23de5a0-e54c-4a82-aa64-9da881387f8f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e7f6bec5-cfdd-49ba-9102-bdde56f2cd27",
										"exec": [
											"//paginate/1/* Translates to give me one page containing all records",
											"//Expect 200 success...",
											"pm.test(\"Can read a search result set - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can read a search result set - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"READ\")",
											"});",
											"//Search set id returned is the same as the id assigned by the server...",
											"pm.test(\"Can read a search result set - Search set id returned is the same as the id assigned by the server\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.exist;",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get('bundleId'));",
											"});",
											"//Expected number of results are returned",
											"pm.test(\"Can read a search result set - total in result set === 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.total).to.eql(4);",
											"});",
											"//Expected page and pagesize are returned",
											"pm.test(\"Can read a search result set - page and pagesize are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.query.current).to.eql(\"1\") &&",
											"        pm.expect(jsonData.data.query.pageSize).to.eql(\"*\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"operation\":\"READ\",\n\t\"data\":{\n\t\t\"query\":{\"page\":\"\",\"pageSize\":\"\"}\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/paginate/1/*",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"paginate",
										"1",
										"*"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "pagination",
					"item": [
						{
							"name": "Save search result set",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Fetch the bundle id from response...",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"bundleId\", jsonData.searchSetId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"query\":[{\"sort\":\"1\",\"raw\":\"http://localhost:8080/fhir/stu3/Patient?name=smith\"}],\n\t\t\"bundle\":\n\t\t{\n\t\t\t\"resourceType\": \"Bundle\",\n\t\t\t\t\"type\": \"searchset\",\n\t\t\t\t\"total\": 3,\n\t\t\t\t\"link\": [{\n\t\t\t\t\t\"relation\": \"self\",\n\t\t\t\t\t\"url\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=smith\"\n\t\t\t\t}],\n\t\t\t\t\"entry\": [{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/4\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"1\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-20T11:52:26.055+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\t\t\"code\": \"CY\",\n\t\t\t\t\t\t\t\t\t\t\"display\": \"Other white European, European unspecified, European mixed\"\n\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"3333333333\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"AAATEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"AAA\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mrs\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"telecom\": [{\n\t\t\t\t\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\t\t\t\t\"value\": \"+441234567890\",\n\t\t\t\t\t\t\t\t\"use\": \"home\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"female\",\n\t\t\t\t\t\t\t\"birthDate\": \"1965-12-13\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"29 West Avenue\",\n\t\t\t\t\t\t\t\t\t\"Bury Thorpe\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Malton\",\n\t\t\t\t\t\t\t\t\"district\": \"North Yorkshire\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"YO32 5TT\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\t\"reference\": \"Practitioner/200000\",\n\t\t\t\t\t\t\t\t\"display\": \"Dr. Gregory Townley\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\t\"reference\": \"Organization/200000\",\n\t\t\t\t\t\t\t\t\"display\": \"Malton GP Practice\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1170\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"2\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2018-09-21T15:55:59.403+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"2378954317\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"BBBTEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"BBB\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\t\"birthDate\": \"1956-02-04\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"use\": \"home\",\n\t\t\t\t\t\t\t\t\"type\": \"both\",\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"14 Sunny Mews\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Overtown\",\n\t\t\t\t\t\t\t\t\"district\": \"West Yorkshire\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"LS17 4NK\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\t\"reference\": \"Practitioner/203508\",\n\t\t\t\t\t\t\t\t\"display\": \"Dr Paul Rastall\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\t\"reference\": \"Organization/200236\",\n\t\t\t\t\t\t\t\t\"display\": \"MGP Medical Centre\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1172\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"3\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-23T07:46:05.576+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"1352465790\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"CCCTEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"CCC\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\t\"birthDate\": \"1957-01-01\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"21, Grove Street, Overtown\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Leeds\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"LS21 1PF\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Is paging calculated correctly for 3 entries, page size of 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//paginate/1/1 Translates to give me the first page of the search set containing 1 record",
											"//Expect 200 success...",
											"pm.test(\"Can paginate a search result set (3 entries, page size 1) - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page size 1) - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"PAGINATE\")",
											"});",
											"//Search set id returned is the same as the id assigned by the server...",
											"pm.test(\"Can paginate a search result set (3 entries, page size 1) - Search set id returned is the same as the id assigned by the server\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.exist;",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get('bundleId'));",
											"});",
											"//Expected total number of results are returned",
											"pm.test(\"Can paginate a search result set (3 entries, page size 1) - total result set === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.total).to.eql(3);",
											"});",
											"//Expected that 1 result is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page size 1) - entry length === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(1);",
											"});",
											"//Expected paging information is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page size 1) - paging information is returned as expected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.query.pageSize).to.eql(\"1\") &&",
											"        pm.expect(jsonData.data.query.current).to.eql(\"1\") &&",
											"           pm.expect(jsonData.data.query.totalPages).to.eql(\"3\") &&",
											"            pm.expect(jsonData.data.query.previous).to.eql(\"1\") && ",
											"                pm.expect(jsonData.data.query.next).to.eql(\"2\") && ",
											"                    pm.expect(jsonData.data.query.last).to.eql(\"3\");",
											"});",
											"//Expected resource returned in paged set is as expected (id === 4)",
											"pm.test(\"Can paginate a search result set (3 entries, page size 1) - resource returned in paged set is as expected (id === 1)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.id).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"operation\":\"PAGINATE\",\n    \"data\":{\n\t\t\"query\":{\"page\":\"1\",\"pageSize\":\"1\"}\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/paginate/1/1",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"paginate",
										"1",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Is paging calculated correctly for 3 entries, page size of 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//paginate/1/2 Translates to give me the first page of the search set containing 2 records",
											"",
											"//Expect 200 success...",
											"pm.test(\"Can paginate a search result set (3 entries, page size 2) - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page size 2) - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"PAGINATE\")",
											"});",
											"//Search set id returned is the same as the id assigned by the server...",
											"pm.test(\"Can paginate a search result set (3 entries, page size 2) - Search set id returned is the same as the id assigned by the server\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.exist;",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get('bundleId'));",
											"});",
											"//Expected total number of results are returned",
											"pm.test(\"Can paginate a search result set (3 entries, page size 2) - total result set === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.total).to.eql(3);",
											"});",
											"//Expected that 1 result is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page size 2) - entry length === 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(2);",
											"});",
											"//Expected paging information is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page size 2) - paging information is returned as expected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.query.pageSize).to.eql(\"2\") &&",
											"        pm.expect(jsonData.data.query.current).to.eql(\"1\") &&",
											"           pm.expect(jsonData.data.query.totalPages).to.eql(\"2\") &&",
											"            pm.expect(jsonData.data.query.previous).to.eql(\"1\") && ",
											"                pm.expect(jsonData.data.query.next).to.eql(\"2\") && ",
											"                    pm.expect(jsonData.data.query.last).to.eql(\"2\");",
											"});",
											"//Expected resource returned in paged set is as expected (id === 4)",
											"pm.test(\"Can paginate a search result set (3 entries, page size 2) - resources returned in paged set are as expected (id === 1, id === 2)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.id).to.eql(1) && ",
											"        pm.expect(jsonData.data.results.entry[1].resource.id).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"operation\":\"PAGINATE\",\n     \"data\":{\n\t\t\"query\":{\"page\":\"2\",\"pageSize\":\"1\"}\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/paginate/1/2",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"paginate",
										"1",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Paging returns 1 result for page 2 of 3 entries using a page size of 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//paginate/2/2 Translates to give me the second page of the search set that contains 3 records using page size of 2",
											"",
											"//Expect 200 success...",
											"pm.test(\"Can paginate a search result set (3 entries, page 2, page size 2) - 200 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page 2, page size 2) - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"PAGINATE\")",
											"});",
											"//Search set id returned is the same as the id assigned by the server...",
											"pm.test(\"Can paginate a search result set (3 entries, page 2, page size 2) - Search set id returned is the same as the id assigned by the server\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.exist;",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get('bundleId'));",
											"});",
											"//Expected total number of results are returned",
											"pm.test(\"Can paginate a search result set (3 entries, page 2, page size 2) - total result set === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.total).to.eql(3);",
											"});",
											"//Expected that 1 result is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page 2, page size 2) - entry length === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(1);",
											"});",
											"//Expected paging information is returned",
											"pm.test(\"Can paginate a search result set (3 entries, page 2, page size 2) - paging information is returned as expected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.query.pageSize).to.eql(\"2\") &&",
											"        pm.expect(jsonData.data.query.current).to.eql(\"2\") &&",
											"           pm.expect(jsonData.data.query.totalPages).to.eql(\"2\") &&",
											"            pm.expect(jsonData.data.query.previous).to.eql(\"1\") && ",
											"                pm.expect(jsonData.data.query.next).to.eql(\"2\") && ",
											"                    pm.expect(jsonData.data.query.last).to.eql(\"2\");",
											"});",
											"//Expected resource returned in paged set is as expected (id === 4)",
											"pm.test(\"Can paginate a search result set (3 entries, page 2, page size 2) - resource returned in paged set is as expected (id === 3)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.id).to.eql(3)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"operation\":\"PAGINATE\",\n    \"data\":{\n\t\t\"query\":{\"page\":\"2\",\"pageSize\":\"2\"}\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/paginate/2/2",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"paginate",
										"2",
										"2"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "sorting-and-paging",
					"item": [
						{
							"name": "Save search result set",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Fetch the bundle id from response...",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"bundleId\", jsonData.searchSetId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"query\":[{\"sort\":\"1\",\"raw\":\"http://localhost:8080/fhir/stu3/Patient?name=smith\"}],\n\t\t\"bundle\":\n\t\t{\n\t\t\t\"resourceType\": \"Bundle\",\n\t\t\t\t\"type\": \"searchset\",\n\t\t\t\t\"total\": 3,\n\t\t\t\t\"entry\": [{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/4\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"1\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-20T11:52:26.055+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\t\t\"code\": \"CY\",\n\t\t\t\t\t\t\t\t\t\t\"display\": \"Other white European, European unspecified, European mixed\"\n\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"3333333333\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"AAATEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"AAA\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mrs\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"telecom\": [{\n\t\t\t\t\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\t\t\t\t\"value\": \"+441234567890\",\n\t\t\t\t\t\t\t\t\"use\": \"home\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"female\",\n\t\t\t\t\t\t\t\"birthDate\": \"1965-12-13\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"29 West Avenue\",\n\t\t\t\t\t\t\t\t\t\"Bury Thorpe\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Malton\",\n\t\t\t\t\t\t\t\t\"district\": \"North Yorkshire\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"YO32 5TT\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\t\"reference\": \"Practitioner/200000\",\n\t\t\t\t\t\t\t\t\"display\": \"Dr. Gregory Townley\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\t\"reference\": \"Organization/200000\",\n\t\t\t\t\t\t\t\t\"display\": \"Malton GP Practice\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1170\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"2\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2018-09-21T15:55:59.403+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"2378954317\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"BBBTEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"BBB\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\t\"birthDate\": \"1956-02-04\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"use\": \"home\",\n\t\t\t\t\t\t\t\t\"type\": \"both\",\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"14 Sunny Mews\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Overtown\",\n\t\t\t\t\t\t\t\t\"district\": \"West Yorkshire\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"LS17 4NK\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\t\"reference\": \"Practitioner/203508\",\n\t\t\t\t\t\t\t\t\"display\": \"Dr Paul Rastall\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\t\"reference\": \"Organization/200236\",\n\t\t\t\t\t\t\t\t\"display\": \"MGP Medical Centre\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1172\",\n\t\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\t\"id\": \"3\",\n\t\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-23T07:46:05.576+00:00\",\n\t\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\t\"value\": \"1352465790\"\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\t\"family\": \"CCCTEST\",\n\t\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\t\"CCC\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\t\"birthDate\": \"1957-01-01\",\n\t\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\t\"21, Grove Street, Overtown\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"city\": \"Leeds\",\n\t\t\t\t\t\t\t\t\"postalCode\": \"LS21 1PF\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patients sorted by -family",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Give me patients sorted by family name in reverse alphabetical order ...",
											"",
											"//Expect 200 success...",
											"pm.test(\"Can Query and Sort Patient Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Query and Sort Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"SORT\")",
											"});",
											"",
											"pm.test(\"Can Query and Sort Patient Index - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.resourceType).to.eql(\"Bundle\");",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - exactly three results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(3);",
											"});",
											"pm.test(\"Can Query and Sort Patient Index - results are returned in the correct order (reverse alphabetical)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.name[0].family).to.eql(\"CCCTEST\") && ",
											"        pm.expect(jsonData.data.results.entry[1].resource.name[0].family).to.eql(\"BBBTEST\") && ",
											"            pm.expect(jsonData.data.results.entry[2].resource.name[0].family).to.eql(\"AAATEST\")",
											"});",
											"",
											"//Store the sorted bundle as this will need to be persisted...",
											"var jsonData = pm.response.json();",
											"var sortedBundle = jsonData.data.results;",
											"pm.environment.set(\"sortedBundle\", JSON.stringify(sortedBundle));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":{\n    \t\"query\":{\n    \t\t\"sort\":\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"name\":\"family\",\n\t\t\t\t\t\"direction\":\"desc\"\n\t\t\t\t}\n\t\t\t]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/sort",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"sort"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can update a search result set",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f23de5a0-e54c-4a82-aa64-9da881387f8f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e7f6bec5-cfdd-49ba-9102-bdde56f2cd27",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can update a search result set - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can update a search result set - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"UPDATE\")",
											"});",
											"//Search set id returned is the same as the id assigned by the server...",
											"pm.test(\"Can update a search result set - Search set id returned is the same as the id assigned by the server\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.exist;",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get('bundleId'));",
											"});",
											"",
											"//Expected update is persisted...",
											"pm.test(\"Can update a search result set - total in updated result set === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.total).to.eql(3);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n    \"data\": {\n    \t\t\"query\":{\"sort\":1},\n    \t\t\"results\":{{sortedBundle}}\n    \t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Paging returns correct result for page 1 of 3 entries using a page size of 2 and sort of -family",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Give me the last result in a reverse alpha sort consisting of 3 records with a page size of 2",
											"//Given test data of family names AAATEST, BBBTEST, CCCTEST then alpha reverse should be that CCCTEST, BBBTEST are included on page 1",
											"//Expect 200 success...",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can paginate a sorted search result set set (3 entries, page 2, page size 2) - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"PAGINATE\")",
											"});",
											"//Search set id returned is the same as the id assigned by the server...",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 1, page size 2) - Search set id returned is the same as the id assigned by the server\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.exist;",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get('bundleId'));",
											"});",
											"//Expected total number of results are returned",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - total result set === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.total).to.eql(3);",
											"});",
											"//Expected that 1 result is returned",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - entry length ===2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(2);",
											"});",
											"//Expected paging information is returned",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - paging information is returned as expected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.query.pageSize).to.eql(\"2\") &&",
											"        pm.expect(jsonData.data.query.current).to.eql(\"1\") &&",
											"           pm.expect(jsonData.data.query.totalPages).to.eql(\"2\") &&",
											"            pm.expect(jsonData.data.query.previous).to.eql(\"1\") && ",
											"                pm.expect(jsonData.data.query.next).to.eql(\"2\") && ",
											"                    pm.expect(jsonData.data.query.last).to.eql(\"2\");",
											"});",
											"//Expected resource returned in paged set is as expected (id === 4)",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - resource returned in paged set are as expected (id === 3, 2 and family name === CCCTEST and BBBTEST)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.id).to.eql(3) &&",
											"        pm.expect(jsonData.data.results.entry[0].resource.name[0].family).to.eql(\"CCCTEST\") &&",
											"            pm.expect(jsonData.data.results.entry[1].resource.id).to.eql(2) &&",
											"                 pm.expect(jsonData.data.results.entry[1].resource.name[0].family).to.eql(\"BBBTEST\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"operation\":\"PAGINATE\",\n     \"data\":{\n\t\t\"query\":{\"page\":\"1\",\"pageSize\":\"1\"}\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/paginate/1/2",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"paginate",
										"1",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Paging returns correct result for page 2 of 3 entries using a page size of 2 and sort of -family",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Give me the last result in a reverse alpha sort consisting of 3 records with a page size of 2",
											"//Given test data of AAATEST, BBBTEST, CCCTEST then alpha reverse should be AAATEST as last entry (and therefore on page 2 - the last page)",
											"//Expect 200 success...",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can paginate a sorted search result set set (3 entries, page 2, page size 2) - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"PAGINATE\")",
											"});",
											"//Search set id returned is the same as the id assigned by the server...",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - Search set id returned is the same as the id assigned by the server\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.exist;",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get('bundleId'));",
											"});",
											"//Expected total number of results are returned",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - total result set === 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.total).to.eql(3);",
											"});",
											"//Expected that 1 result is returned",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - entry length === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(1);",
											"});",
											"//Expected paging information is returned",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - paging information is returned as expected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.query.pageSize).to.eql(\"2\") &&",
											"        pm.expect(jsonData.data.query.current).to.eql(\"2\") &&",
											"           pm.expect(jsonData.data.query.totalPages).to.eql(\"2\") &&",
											"            pm.expect(jsonData.data.query.previous).to.eql(\"1\") && ",
											"                pm.expect(jsonData.data.query.next).to.eql(\"2\") && ",
											"                    pm.expect(jsonData.data.query.last).to.eql(\"2\");",
											"});",
											"//Expected resource returned in paged set is as expected (id === 4)",
											"pm.test(\"Can paginate a sorted search result set (3 entries, page 2, page size 2) - resource returned in paged set is as expected (id === 1, family name === AAATEST)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry[0].resource.id).to.eql(1) &&",
											"        pm.expect(jsonData.data.results.entry[0].resource.name[0].family).to.eql(\"AAATEST\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"operation\":\"PAGINATE\",\n     \"data\":{\n\t\t\"query\":{\"page\":\"1\",\"pageSize\":\"1\"}\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/paginate/2/2",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"paginate",
										"2",
										"2"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "revinclude",
					"item": [
						{
							"name": "Create a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create a Practitioner resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Practitioner resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"include_practitioner_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"resourceType\": \"Practitioner\",\n\t\t\"meta\": {\n\t\t\t\"profile\": [\n\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n\t\t\t]\n\t\t},\n\t\t\"identifier\": [{\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n\t\t\t\"value\": \"G8133438\"\n\t\t}],\n\t\t\"name\": [{\n\t\t\t\"family\": \"Bhatia\",\n\t\t\t\"given\": [\n\t\t\t\t\"AA\"\n\t\t\t],\n\t\t\t\"prefix\": [\n\t\t\t\t\"Dr.\"\n\t\t\t]\n\t\t}],\n\t\t\"telecom\": [{\n\t\t\t\t\"system\": \"email\",\n\t\t\t\t\"value\": \"abhatia@nhs.skynet\",\n\t\t\t\t\"use\": \"work\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\"value\": \"0115 9737320\",\n\t\t\t\t\"use\": \"work\"\n\t\t\t}\n\t\t],\n\t\t\"address\": [{\n\t\t\t\"line\": [\n\t\t\t\t\"Regent Street\",\n\t\t\t\t\"Long Eaton\"\n\t\t\t],\n\t\t\t\"city\": \"Nottingham\",\n\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\"postalCode\": \"NG10 1QQ\"\n\t\t}],\n\t\t\"gender\": \"male\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Organisation resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create an Organisation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create an Organisation resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Organisation resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"include_organization_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"resourceType\": \"Organization\",\n\t\t\"meta\": {\n\t\t\t\"profile\": [\n\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n\t\t\t]\n\t\t},\n\t\t\"identifier\": [{\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n\t\t\t\"value\": \"03X\"\n\t\t}],\n\t\t\"type\": [{\n\t\t\t\"coding\": [{\n\t\t\t\t\"system\": \"http://hl7.org/fhir/organization-type\",\n\t\t\t\t\"code\": \"prov\",\n\t\t\t\t\"display\": \"Healthcare Provider\"\n\t\t\t}]\n\t\t}],\n\t\t\"name\": \"NHS EREWASH\",\n\t\t\"address\": [{\n\t\t\t\"use\": \"work\",\n\t\t\t\"type\": \"both\",\n\t\t\t\"line\": [\n\t\t\t\t\"Toll Bar House\",\n\t\t\t\t\"1 Derby Road\"\n\t\t\t],\n\t\t\t\"city\": \"Ilkeston\",\n\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\"postalCode\": \"DE7 5FH\"\n\t\t}]\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Encounter resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create a Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create a Encounter resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Encounter resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"include_encounter_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n        \"resourceType\": \"Encounter\",\n        \"meta\": {\n            \"profile\": [\n                \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n            ]\n        },\n        \"identifier\": [\n            {\n                \"system\": \"https://tools.ietf.org/html/rfc4122\",\n                \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n            }\n        ],\n        \"status\": \"finished\",\n        \"class\": {\n            \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n            \"code\": \"IMP\",\n            \"display\": \"inpatient encounter\"\n        },\n        \"subject\": {\n            \"reference\": \"Patient/1\"\n        },\n        \"participant\": [\n            {\n                \"type\": [\n                    {\n                        \"coding\": [\n                            {\n                                \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                                \"code\": \"DIS\",\n                                \"display\": \"discharger\"\n                            }\n                        ]\n                    }\n                ],\n                \"individual\": {\n                    \"reference\": \"Practitioner/203557\",\n                    \"display\": \"Dr Harold Heart\"\n                }\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can index an Encounter resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Create Patient Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Create Patient Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Indices are returned in the service response...",
											"pm.test(\"Can Create Patient Index - service response message contains indices)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.indices).to.exist &&",
											"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
											"});",
											"//Each index object is formed correctly...",
											"pm.test(\"Can Create Patient Index - each index object returned is formed correctly)\", function () {",
											"    var jsonData = pm.response.json();",
											"    var indices = jsonData.data.indices;",
											"    indices.forEach(function(index) {",
											"        pm.expect(index.indexType).to.exist &&",
											"            pm.expect(index.path).to.exist &&",
											"                pm.expect(index.path).to.be.an('array') &&",
											"                    pm.expect(index.value).to.exist",
											"    });",
											"    //hash index for comparison to read...",
											"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"pm.environment.set(\"indexResourceId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":{\r\n    \t\"results\":\r\n    \t{\r\n    \t\t\"resourceType\": \"Encounter\",\r\n            \"meta\": {\r\n                \"profile\": [\r\n                    \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\r\n                ],\r\n                \"versionId\": \"1\",\r\n                \"lastUpdated\": \"2019-05-29T13:34:08Z\"\r\n            },\r\n            \"identifier\": [\r\n                {\r\n                    \"system\": \"https://tools.ietf.org/html/rfc4122\",\r\n                    \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\r\n                }\r\n            ],\r\n            \"status\": \"finished\",\r\n            \"class\": {\r\n                \"system\": \"http://hl7.org/fhir/v3/ActCode\",\r\n                \"code\": \"IMP\",\r\n                \"display\": \"inpatient encounter\"\r\n            },\r\n            \"subject\": {\r\n                \"reference\": \"Patient/1\"\r\n            },\r\n            \"participant\": [\r\n                {\r\n                    \"type\": [\r\n                        {\r\n                            \"coding\": [\r\n                                {\r\n                                    \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\r\n                                    \"code\": \"DIS\",\r\n                                    \"display\": \"discharger\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    ],\r\n                    \"individual\": {\r\n                        \"reference\": \"Practitioner/203557\",\r\n                        \"display\": \"Dr Harold Heart\"\r\n                    }\r\n                }\r\n            ],\r\n            \"id\": \"{{include_encounter_id}}\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save search result set",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Fetch the bundle id from response...",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"bundleId\", jsonData.data.bundle.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"query\":{\"sort\":\"1\"},\n\t\t\"bundle\":\n\t\t{\n\t\t\t\"resourceType\": \"Bundle\",\n\t\t\t\"type\": \"searchset\",\n\t\t\t\"total\": 1,\n\t\t\t\"link\": [{\n\t\t\t\t\"relation\": \"self\",\n\t\t\t\t\"url\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=smith\"\n\t\t\t}],\n\t\t\t\"entry\": [{\n\t\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/4\",\n\t\t\t\t\t\"search\":{\n\t\t\t\t\t\t\"mode\":\"match\"\n\t\t\t\t\t},\n\t\t\t\t\t\"resource\": {\n\t\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\t\"id\": \"1\",\n\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\"lastUpdated\": \"2019-03-20T11:52:26.055+00:00\",\n\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\t\"code\": \"CY\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Other white European, European unspecified, European mixed\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\t\"value\": \"3333333333\"\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\t\"family\": \"AAATEST\",\n\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\"AAA\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\"Mrs\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"telecom\": [{\n\t\t\t\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\t\t\t\"value\": \"+441234567890\",\n\t\t\t\t\t\t\t\"use\": \"home\"\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"gender\": \"female\",\n\t\t\t\t\t\t\"birthDate\": \"1965-12-13\",\n\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\"29 West Avenue\",\n\t\t\t\t\t\t\t\t\"Bury Thorpe\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"city\": \"Malton\",\n\t\t\t\t\t\t\t\"district\": \"North Yorkshire\",\n\t\t\t\t\t\t\t\"postalCode\": \"YO32 5TT\"\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\t\"reference\": \"Practitioner/{{include_practitioner_id}}\"\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\t\"reference\": \"Organization/{{include_organisation_id}}\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Encounter revincluded in Patient search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Encounter revincluded in Patient search - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Encounter revincluded in Patient search - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(6) && ",
											"    pm.expect(jsonData.operation).to.eql(\"ADD\")",
											"});",
											"",
											"pm.test(\"Encounter included in Patient search - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Encounter included in Patient search - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.resourceType).to.eql(\"Bundle\");",
											"});",
											"//Practitioner is the same so only include it once in the include section",
											"pm.test(\"Encounter included in Patient search - exactly 2 results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(2);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Encounter included in Patient search - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.data.results.entry.forEach(function(entry) {",
											"         if(entry.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Entry search mode for Encounter is set to \"include\"",
											"pm.test(\"Encounter included in Patient search - search mode for each encounter resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.data.results.entry.forEach(function(entry) {",
											"         if(entry.resourceType === 'Encounter') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The Encounter does reference the Patient...",
											"pm.test(\"Encounter included in Patient search - Encounter references Patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    var subjectReferenceId = 0;",
											"    jsonData.data.results.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Encounter') {",
											"            subjectReferenceId = parseInt(entry.resource.subject.reference.split(\"/\")[1]);",
											"         }",
											"    });",
											"       jsonData.data.results.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.id).to.eql(subjectReferenceId);",
											"         }",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"pipeline\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"routes\":[\n\t    \t\t{\n\t    \t\t\t\"paths\":{\"path\":\"/services/v1/repo/index/query\"}\n\t    \t\t},\n\t    \t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/search/results\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/repo/batch\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/search/:searchSetId/add\"}\n    \t\t\t}\n\t    \t],\n    \"data\":{\n    \t\"query\":{\n    \t\t\"includes\":[],\n    \t\t\"revincludes\":[\n    \t\t\t\"Encounter:patient\"\n    \t\t]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/revinclude",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"revinclude"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "include",
					"item": [
						{
							"name": "Create a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create a Practitioner resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Practitioner resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"include_practitioner_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"resourceType\": \"Practitioner\",\n\t\t\"meta\": {\n\t\t\t\"profile\": [\n\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n\t\t\t]\n\t\t},\n\t\t\"identifier\": [{\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n\t\t\t\"value\": \"G8133438\"\n\t\t}],\n\t\t\"name\": [{\n\t\t\t\"family\": \"Bhatia\",\n\t\t\t\"given\": [\n\t\t\t\t\"AA\"\n\t\t\t],\n\t\t\t\"prefix\": [\n\t\t\t\t\"Dr.\"\n\t\t\t]\n\t\t}],\n\t\t\"telecom\": [{\n\t\t\t\t\"system\": \"email\",\n\t\t\t\t\"value\": \"abhatia@nhs.skynet\",\n\t\t\t\t\"use\": \"work\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\"value\": \"0115 9737320\",\n\t\t\t\t\"use\": \"work\"\n\t\t\t}\n\t\t],\n\t\t\"address\": [{\n\t\t\t\"line\": [\n\t\t\t\t\"Regent Street\",\n\t\t\t\t\"Long Eaton\"\n\t\t\t],\n\t\t\t\"city\": \"Nottingham\",\n\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\"postalCode\": \"NG10 1QQ\"\n\t\t}],\n\t\t\"gender\": \"male\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can index an Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Create Practitioner Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Create Practitioner Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Indices are returned in the service response...",
											"pm.test(\"Can Create Practitioner Index - service response message contains indices)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.indices).to.exist &&",
											"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
											"});",
											"//Each index object is formed correctly...",
											"pm.test(\"Can Create Practitioner Index - each index object returned is formed correctly)\", function () {",
											"    var jsonData = pm.response.json();",
											"    var indices = jsonData.data.indices;",
											"    indices.forEach(function(index) {",
											"        pm.expect(index.indexType).to.exist &&",
											"            pm.expect(index.path).to.exist &&",
											"                pm.expect(index.path).to.be.an('array') &&",
											"                    pm.expect(index.value).to.exist",
											"    });",
											"    //hash index for comparison to read...",
											"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"pm.environment.set(\"indexResourceId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":{\r\n\t\t\"results\": {\r\n            \"resourceType\": \"Practitioner\",\r\n            \"meta\": {\r\n                \"profile\": [\r\n                    \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\r\n                ],\r\n                \"versionId\": \"1\",\r\n                \"lastUpdated\": \"2019-06-14T19:50:06Z\"\r\n            },\r\n            \"identifier\": [\r\n                {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\r\n                    \"value\": \"G8133438\"\r\n                }\r\n            ],\r\n            \"name\": [\r\n                {\r\n                    \"family\": \"Bhatia\",\r\n                    \"given\": [\r\n                        \"AA\"\r\n                    ],\r\n                    \"prefix\": [\r\n                        \"Dr.\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"telecom\": [\r\n                {\r\n                    \"system\": \"email\",\r\n                    \"value\": \"abhatia@nhs.skynet\",\r\n                    \"use\": \"work\"\r\n                },\r\n                {\r\n                    \"system\": \"phone\",\r\n                    \"value\": \"0115 9737320\",\r\n                    \"use\": \"work\"\r\n                }\r\n            ],\r\n            \"address\": [\r\n                {\r\n                    \"line\": [\r\n                        \"Regent Street\",\r\n                        \"Long Eaton\"\r\n                    ],\r\n                    \"city\": \"Nottingham\",\r\n                    \"district\": \"Derbyshire\",\r\n                    \"postalCode\": \"NG10 1QQ\"\r\n                }\r\n            ],\r\n            \"gender\": \"male\",\r\n            \"id\": \"{{include_practitioner_id}}\"\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Organisation resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create an Organisation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create an Organisation resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Organisation resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"include_organization_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"resourceType\": \"Organization\",\n\t\t\"meta\": {\n\t\t\t\"profile\": [\n\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n\t\t\t]\n\t\t},\n\t\t\"identifier\": [{\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n\t\t\t\"value\": \"03X\"\n\t\t}],\n\t\t\"type\": [{\n\t\t\t\"coding\": [{\n\t\t\t\t\"system\": \"http://hl7.org/fhir/organization-type\",\n\t\t\t\t\"code\": \"prov\",\n\t\t\t\t\"display\": \"Healthcare Provider\"\n\t\t\t}]\n\t\t}],\n\t\t\"name\": \"NHS EREWASH\",\n\t\t\"address\": [{\n\t\t\t\"use\": \"work\",\n\t\t\t\"type\": \"both\",\n\t\t\t\"line\": [\n\t\t\t\t\"Toll Bar House\",\n\t\t\t\t\"1 Derby Road\"\n\t\t\t],\n\t\t\t\"city\": \"Ilkeston\",\n\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\"postalCode\": \"DE7 5FH\"\n\t\t}]\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can index an Organisation resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Create Organisation Index - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can Create Organisation Index - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Indices are returned in the service response...",
											"pm.test(\"Can Create Organisation Index - service response message contains indices)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.indices).to.exist &&",
											"    pm.expect(jsonData.data.indices.length).to.not.eql(0)",
											"});",
											"//Each index object is formed correctly...",
											"pm.test(\"Can Create Organisation Index - each index object returned is formed correctly)\", function () {",
											"    var jsonData = pm.response.json();",
											"    var indices = jsonData.data.indices;",
											"    indices.forEach(function(index) {",
											"        pm.expect(index.indexType).to.exist &&",
											"            pm.expect(index.path).to.exist &&",
											"                pm.expect(index.path).to.be.an('array') &&",
											"                    pm.expect(index.value).to.exist",
											"    });",
											"    //hash index for comparison to read...",
											"    pm.environment.set(\"hashedIndex\",CryptoJS.MD5(JSON.stringify(jsonData.data.indices)).toString());",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"pm.environment.set(\"indexResourceId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"serviceMode\":\"standalone\",\r\n    \"checkId\":true,\r\n    \"messageId\":\"{{messageId}}\",\r\n    \"requestId\":\"{{requestId}}\",\r\n    \"requestedOn\":\"{{requestedOn}}\",\r\n    \"data\":{\r\n\t\t\"results\":\r\n\t\t{\r\n\t\t\t\"resourceType\": \"Organization\",\r\n\t\t\t\"meta\": {\r\n\t\t\t\t\"profile\": [\r\n\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t\"id\":\"{{include_organization_id}}\",\r\n\t\t\t\"identifier\": [{\r\n\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n\t\t\t\t\"value\": \"03X\"\r\n\t\t\t}],\r\n\t\t\t\"type\": [{\r\n\t\t\t\t\"coding\": [{\r\n\t\t\t\t\t\"system\": \"http://hl7.org/fhir/organization-type\",\r\n\t\t\t\t\t\"code\": \"prov\",\r\n\t\t\t\t\t\"display\": \"Healthcare Provider\"\r\n\t\t\t\t}]\r\n\t\t\t}],\r\n\t\t\t\"name\": \"NHS EREWASH\",\r\n\t\t\t\"address\": [{\r\n\t\t\t\t\"use\": \"work\",\r\n\t\t\t\t\"type\": \"both\",\r\n\t\t\t\t\"line\": [\r\n\t\t\t\t\t\"Toll Bar House\",\r\n\t\t\t\t\t\"1 Derby Road\"\r\n\t\t\t\t],\r\n\t\t\t\t\"city\": \"Ilkeston\",\r\n\t\t\t\t\"district\": \"Derbyshire\",\r\n\t\t\t\t\"postalCode\": \"DE7 5FH\"\r\n\t\t\t}]\r\n\t    }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/index",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save search result set",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Fetch the bundle id from response...",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"bundleId\", jsonData.searchSetId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": \n\t\t{\n\t\t\"query\":{\"sort\":\"1\"},\n\t\t\"bundle\":\n\t\t{\n\t\t\"resourceType\": \"Bundle\",\n\t\t\"type\": \"searchset\",\n\t\t\"total\": 3,\n\t\t\"link\": [{\n\t\t\t\"relation\": \"self\",\n\t\t\t\"url\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=smith\"\n\t\t}],\n\t\t\"entry\": [{\n\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/4\",\n\t\t\t\t\"search\":{\n\t\t\t\t\t\"mode\":\"match\"\n\t\t\t\t},\n\t\t\t\t\"resource\": {\n\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\"id\": \"1\",\n\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\"lastUpdated\": \"2019-03-20T11:52:26.055+00:00\",\n\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\"code\": \"CY\",\n\t\t\t\t\t\t\t\t\"display\": \"Other white European, European unspecified, European mixed\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\"value\": \"3333333333\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\"family\": \"AAATEST\",\n\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\"AAA\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\"Mrs\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}],\n\t\t\t\t\t\"telecom\": [{\n\t\t\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\t\t\"value\": \"+441234567890\",\n\t\t\t\t\t\t\"use\": \"home\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"gender\": \"female\",\n\t\t\t\t\t\"birthDate\": \"1965-12-13\",\n\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\"29 West Avenue\",\n\t\t\t\t\t\t\t\"Bury Thorpe\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"city\": \"Malton\",\n\t\t\t\t\t\t\"district\": \"North Yorkshire\",\n\t\t\t\t\t\t\"postalCode\": \"YO32 5TT\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\"reference\": \"Practitioner/{{include_practitioner_id}}\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\"reference\": \"Organization/{{include_organization_id}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1170\",\n\t\t\t\t\"search\":{\n\t\t\t\t\t\"mode\":\"match\"\n\t\t\t\t},\n\t\t\t\t\"resource\": {\n\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\"id\": \"2\",\n\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\"lastUpdated\": \"2018-09-21T15:55:59.403+00:00\",\n\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\"value\": \"2378954317\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\"family\": \"BBBTEST\",\n\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\"BBB\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}],\n\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\"birthDate\": \"1956-02-04\",\n\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\"use\": \"home\",\n\t\t\t\t\t\t\"type\": \"both\",\n\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\"14 Sunny Mews\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"city\": \"Overtown\",\n\t\t\t\t\t\t\"district\": \"West Yorkshire\",\n\t\t\t\t\t\t\"postalCode\": \"LS17 4NK\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\"reference\": \"Practitioner/{{include_practitioner_id}}\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\"reference\": \"Organization/{{include_organization_id}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1172\",\n\t\t\t\t\"search\":{\n\t\t\t\t\t\"mode\":\"match\"\n\t\t\t\t},\n\t\t\t\t\"resource\": {\n\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\"id\": \"3\",\n\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\"lastUpdated\": \"2019-03-23T07:46:05.576+00:00\",\n\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\"value\": \"1352465790\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\"family\": \"CCCTEST\",\n\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\"CCC\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}],\n\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\"birthDate\": \"1957-01-01\",\n\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\"21, Grove Street, Overtown\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"city\": \"Leeds\",\n\t\t\t\t\t\t\"postalCode\": \"LS21 1PF\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\"reference\": \"Practitioner/{{include_practitioner_id}}\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\"reference\": \"Organization/{{include_organization_id}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n\t\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Practitioner included in Patient search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Practitioner included in Patient search - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Practitioner included in Patient search - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Practitioner included in Patient search - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//Practitioner is the same so only include it once in the include section",
											"pm.test(\"Practitioner included in Patient search - exactly 4 results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(4);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Practitioner included in Patient search - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one practitioner is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Practitioner included in Patient search - only 1 unique Practitioner resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerCount++;",
											"         }",
											"    });",
											"    pm.expect(practitionerCount).to.eql(1);  ",
											"});",
											"//Entry search mode for practitioner is set to \"include\"",
											"pm.test(\"Practitioner included in Patient search - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct practitioner resource is included",
											"pm.test(\"Practitioner included in Patient search - Practitioner resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerReferenceId = \"Practitioner/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerReferenceId = practitionerReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.generalPractitioner[0].reference).to.eql(practitionerReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"pipeline\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"routes\":[\n\t    \t\t{\n\t    \t\t\t\"paths\":{\"path\":\"/services/v1/repo/index/query\"}\n\t    \t\t},\n\t    \t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/search/results\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/repo/batch\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/search/:searchSetId/add\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\": \"/services/v1/adapters/repo/respond\"}\n    \t\t\t},\n    \t\t\t{\n            \t\t\"paths\":{\"path\": \"/services/v1/responder/create\"}\n            \t}\n    \t\t],\n    \"data\":{\n    \t\"query\":{\n    \t\t\"includes\":\n\t\t\t[\n\t\t\t\t\"Patient:general-practitioner\"\n\t\t\t],\n\t\t\t\"revincludes\":[]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/include",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"include"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organisation included in Patient search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Organisation included in Patient search - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Organisation included in Patient search - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Organisation included in Patient search - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//Organisation is the same so only include it once in the include section",
											"pm.test(\"Organisation included in Patient search - exactly 4 results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(4);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Organisation included in Patient search - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one Organisation is included (the search set contains references to the same Organisation resource)",
											"pm.test(\"Organisation included in Patient search - only 1 unique Organisation resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organisationCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organisationCount++;",
											"         }",
											"    });",
											"    pm.expect(organisationCount).to.eql(1);  ",
											"});",
											"//Entry search mode for Organisation is set to \"include\"",
											"pm.test(\"Organisation included in Patient search - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct Organization resource is included",
											"pm.test(\"Organization included in Patient search - Organization resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organisationReferenceId = \"Organization/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organisationReferenceId = organisationReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.managingOrganization.reference).to.eql(organisationReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"pipeline\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"routes\":[\n\t    \t\t{\n\t    \t\t\t\"paths\":{\"path\":\"/services/v1/repo/index/query\"}\n\t    \t\t},\n\t    \t\t\t\t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/search/results\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/repo/batch\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/search/:searchSetId/add\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\": \"/services/v1/adapters/repo/respond\"}\n    \t\t\t},\n    \t\t\t{\n            \t\t\"paths\":{\"path\": \"/services/v1/responder/create\"}\n            \t}\n    \t\t],\n    \"data\":{\n    \t\"query\":{\n    \t\t\"includes\":\n\t\t\t[\n\t\t\t\t\"Patient:organization\"\n\t\t\t],\n\t\t\t\"revincludes\":[]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/include",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"include"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organisation and Practitioner Included in Patient Search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90e34122-da2f-4115-833f-063e067df9d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fad6da3-02b4-4da8-b9f2-a49d19f3edb6",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Organisation and Practitioner included in Patient search - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Organisation and Practitioner included in Patient search - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Organisation and Practitioner included in Patient search - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//3 patient records, 1 organisation, 1 practitioner",
											"pm.test(\"Organisation and Practitioner included in Patient search - exactly 5 results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(5);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Organisation and Practitioner in Patient search - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Only one Organisation is included (the search set contains references to the same Organisation resource)",
											"pm.test(\"Organisation and Practitioner included in Patient search - only 1 unique Organisation resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organisationCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organisationCount++;",
											"         }",
											"    });",
											"    pm.expect(organisationCount).to.eql(1);  ",
											"});",
											"//Entry search mode for Organisation is set to \"include\"",
											"pm.test(\"Organisation and Practitioner included in Patient search - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct Organization resource is included",
											"pm.test(\"Organisation and Practitioner included in Patient search - Organization resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var organisationReferenceId = \"Organization/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Organization') {",
											"            organisationReferenceId = organisationReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.managingOrganization.reference).to.eql(organisationReferenceId);",
											"         }",
											"    });",
											"});",
											"//Only one practitioner is included (the search set contains references to the same practitioner resource)",
											"pm.test(\"Practitioner included in Patient search - only 1 unique Practitioner resource is included\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerCount = 0;",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerCount++;",
											"         }",
											"    });",
											"    pm.expect(practitionerCount).to.eql(1);  ",
											"});",
											"//Entry search mode for practitioner is set to \"include\"",
											"pm.test(\"Practitioner included in Patient search - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											"//The correct practitioner resource is included",
											"pm.test(\"Practitioner included in Patient search - Practitioner resource included is referenced by the Patient entries\", function () {",
											"    var jsonData = pm.response.json();",
											"    var practitionerReferenceId = \"Practitioner/\";",
											"    jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Practitioner') {",
											"            practitionerReferenceId = practitionerReferenceId + entry.resource.id;",
											"         }",
											"    });",
											"       jsonData.entry.forEach(function(entry) {",
											"         if(entry.resource.resourceType === 'Patient') {",
											"            pm.expect(entry.resource.generalPractitioner[0].reference).to.eql(practitionerReferenceId);",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"pipeline\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"routes\":[\n\t    \t\t{\n\t    \t\t\t\"paths\":{\"path\":\"/services/v1/repo/index/query\"}\n\t    \t\t},\n\t    \t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/search/results\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/repo/batch\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\":\"/services/v1/search/:searchSetId/add\"}\n    \t\t\t},\n    \t\t\t{\n    \t\t\t\t\"paths\":{\"path\": \"/services/v1/adapters/repo/respond\"}\n    \t\t\t},\n    \t\t\t{\n            \t\t\"paths\":{\"path\": \"/services/v1/responder/create\"}\n            \t}\n    \t\t],\n    \"data\":{\n    \t\"query\":{\n    \t\t\"includes\":\n\t\t\t[\n\t\t\t\t\"Patient:general-practitioner\",\n\t\t\t\t\"Patient:organization\"\n\t\t\t],\n\t\t\t\"revincludes\":[]\n    \t}\n    }\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/include",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"include"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "add",
					"item": [
						{
							"name": "Create a Practitioner resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create a Practitioner resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Practitioner resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"include_practitioner_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"resourceType\": \"Practitioner\",\n\t\t\"meta\": {\n\t\t\t\"profile\": [\n\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n\t\t\t]\n\t\t},\n\t\t\"identifier\": [{\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n\t\t\t\"value\": \"G8133438\"\n\t\t}],\n\t\t\"name\": [{\n\t\t\t\"family\": \"Bhatia\",\n\t\t\t\"given\": [\n\t\t\t\t\"AA\"\n\t\t\t],\n\t\t\t\"prefix\": [\n\t\t\t\t\"Dr.\"\n\t\t\t]\n\t\t}],\n\t\t\"telecom\": [{\n\t\t\t\t\"system\": \"email\",\n\t\t\t\t\"value\": \"abhatia@nhs.skynet\",\n\t\t\t\t\"use\": \"work\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\"value\": \"0115 9737320\",\n\t\t\t\t\"use\": \"work\"\n\t\t\t}\n\t\t],\n\t\t\"address\": [{\n\t\t\t\"line\": [\n\t\t\t\t\"Regent Street\",\n\t\t\t\t\"Long Eaton\"\n\t\t\t],\n\t\t\t\"city\": \"Nottingham\",\n\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\"postalCode\": \"NG10 1QQ\"\n\t\t}],\n\t\t\"gender\": \"male\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Organisation resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can create an Organisation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Can create an Organisation resource - service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"CREATE\")",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Organisation resource - Service assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.data.results.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"include_organisation_id\", jsonData.data.results.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"checkId\": true,\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": {\n\t\t\"resourceType\": \"Organization\",\n\t\t\"meta\": {\n\t\t\t\"profile\": [\n\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n\t\t\t]\n\t\t},\n\t\t\"identifier\": [{\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n\t\t\t\"value\": \"03X\"\n\t\t}],\n\t\t\"type\": [{\n\t\t\t\"coding\": [{\n\t\t\t\t\"system\": \"http://hl7.org/fhir/organization-type\",\n\t\t\t\t\"code\": \"prov\",\n\t\t\t\t\"display\": \"Healthcare Provider\"\n\t\t\t}]\n\t\t}],\n\t\t\"name\": \"NHS EREWASH\",\n\t\t\"address\": [{\n\t\t\t\"use\": \"work\",\n\t\t\t\"type\": \"both\",\n\t\t\t\"line\": [\n\t\t\t\t\"Toll Bar House\",\n\t\t\t\t\"1 Derby Road\"\n\t\t\t],\n\t\t\t\"city\": \"Ilkeston\",\n\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\"postalCode\": \"DE7 5FH\"\n\t\t}]\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/repo/create",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"repo",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save search result set",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Fetch the bundle id from response...",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"bundleId\", jsonData.searchSetId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"data\": \n\t\t{\n\t\t\"query\":{\"sort\":\"1\"},\n\t\t\"bundle\":\n\t\t{\n\t\t\"resourceType\": \"Bundle\",\n\t\t\"type\": \"searchset\",\n\t\t\"total\": 3,\n\t\t\"link\": [{\n\t\t\t\"relation\": \"self\",\n\t\t\t\"url\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient?name=smith\"\n\t\t}],\n\t\t\"entry\": [{\n\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/4\",\n\t\t\t\t\"search\":{\n\t\t\t\t\t\"mode\":\"match\"\n\t\t\t\t},\n\t\t\t\t\"resource\": {\n\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\"id\": \"1\",\n\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\"lastUpdated\": \"2019-03-20T11:52:26.055+00:00\",\n\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-EthnicCategory-1\",\n\t\t\t\t\t\t\t\t\"code\": \"CY\",\n\t\t\t\t\t\t\t\t\"display\": \"Other white European, European unspecified, European mixed\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\"value\": \"3333333333\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\"family\": \"AAATEST\",\n\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\"AAA\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\"Mrs\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}],\n\t\t\t\t\t\"telecom\": [{\n\t\t\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\t\t\"value\": \"+441234567890\",\n\t\t\t\t\t\t\"use\": \"home\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"gender\": \"female\",\n\t\t\t\t\t\"birthDate\": \"1965-12-13\",\n\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\"29 West Avenue\",\n\t\t\t\t\t\t\t\"Bury Thorpe\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"city\": \"Malton\",\n\t\t\t\t\t\t\"district\": \"North Yorkshire\",\n\t\t\t\t\t\t\"postalCode\": \"YO32 5TT\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\"reference\": \"Practitioner/{{include_practitioner_id}}\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\"reference\": \"Organization/{{include_organization_id}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1170\",\n\t\t\t\t\"search\":{\n\t\t\t\t\t\"mode\":\"match\"\n\t\t\t\t},\n\t\t\t\t\"resource\": {\n\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\"id\": \"2\",\n\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\"lastUpdated\": \"2018-09-21T15:55:59.403+00:00\",\n\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\"value\": \"2378954317\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\"family\": \"BBBTEST\",\n\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\"BBB\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}],\n\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\"birthDate\": \"1956-02-04\",\n\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\"use\": \"home\",\n\t\t\t\t\t\t\"type\": \"both\",\n\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\"14 Sunny Mews\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"city\": \"Overtown\",\n\t\t\t\t\t\t\"district\": \"West Yorkshire\",\n\t\t\t\t\t\t\"postalCode\": \"LS17 4NK\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"maritalStatus\": {\n\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n\t\t\t\t\t\t\t\"code\": \"M\",\n\t\t\t\t\t\t\t\"display\": \"Married\"\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\"reference\": \"Practitioner/{{include_practitioner_id}}\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\"reference\": \"Organization/{{include_organization_id}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fullUrl\": \"https://data.developer.nhs.uk/ccri-fhir/STU3/Patient/1172\",\n\t\t\t\t\"search\":{\n\t\t\t\t\t\"mode\":\"match\"\n\t\t\t\t},\n\t\t\t\t\"resource\": {\n\t\t\t\t\t\"resourceType\": \"Patient\",\n\t\t\t\t\t\"id\": \"3\",\n\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\"lastUpdated\": \"2019-03-23T07:46:05.576+00:00\",\n\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\"extension\": [{\n\t\t\t\t\t\t\t\"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n\t\t\t\t\t\t\t\t\t\"code\": \"01\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Number present and verified\"\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\t\t\t\"value\": \"1352465790\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\"use\": \"official\",\n\t\t\t\t\t\t\"family\": \"CCCTEST\",\n\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\"CCC\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\"Mr\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}],\n\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\"birthDate\": \"1957-01-01\",\n\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\"21, Grove Street, Overtown\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"city\": \"Leeds\",\n\t\t\t\t\t\t\"postalCode\": \"LS21 1PF\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"generalPractitioner\": [{\n\t\t\t\t\t\t\"reference\": \"Practitioner/{{include_practitioner_id}}\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"managingOrganization\": {\n\t\t\t\t\t\t\"reference\": \"Organization/{{include_organization_id}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n\t\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add practitioner resources bundle to existing search set",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Add resources bundle to existing search set - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Service response is returned",
											"pm.test(\"Add resources bundle to existing search set- service response message is returned (as opposed to error response)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.messageId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.exist &&",
											"    pm.expect(jsonData.requestId).to.eql(pm.environment.get(\"requestId\")) &&",
											"    pm.expect(jsonData.responseId).to.exist &&",
											"    pm.expect(jsonData.pipeline.length).to.eql(2) && ",
											"    pm.expect(jsonData.operation).to.eql(\"ADD\")",
											"});",
											"",
											"pm.test(\"Add resources bundle to existing search set - bundle id is exactly the same as the requested bundle id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.eql(pm.environment.get(\"bundleId\"));",
											"});",
											"pm.test(\"Add resources bundle to existing search set - a FHIR bundle is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.resourceType).to.eql(\"Bundle\");",
											"});",
											"//Practitioner is the same so only include it once in the include section",
											"pm.test(\"Add resources bundle to existing search set - exactly 4 results are returned (as expected)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.entry.length).to.eql(4);",
											"});",
											"//Entry search mode for each patient is set to \"match\"",
											"pm.test(\"Add resources bundle to existing search set - search mode for each patient resource === 'match'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.data.results.entry.forEach(function(entry) {",
											"         if(entry.resourceType === 'Patient') {",
											"            pm.expect(entry.search.mode).to.eql('match');  ",
											"         }",
											"    });",
											"});",
											"//Entry search mode for practitioner is set to \"include\"",
											"pm.test(\"Add resources bundle to existing search set - search mode for each patient resource === 'include'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.data.results.entry.forEach(function(entry) {",
											"         if(entry.resourceType === 'Practitioner') {",
											"            pm.expect(entry.search.mode).to.eql('include');  ",
											"         }",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\": \"standalone\",\n\t\"messageId\": \"{{messageId}}\",\n\t\"requestId\": \"{{requestId}}\",\n\t\"requestedOn\": \"{{requestedOn}}\",\n\t\"mode\":\"include\",\n\t\"data\": {\n\t\t\"query\": [\n            {\n                \"documentType\": \"Practitioner\",\n                \"parameters\": [\n                    {\n                        \"indexType\": \"id\",\n                        \"documentType\": \"practitioner\",\n                        \"node\": \"id\",\n                        \"value\": \"{{include_practitioner_id}}\"\n                    }\n                ],\n                \"results\": [\"{{include_practitioner_id}}\"]\n            }\n        ],\n        \"bundle\": {\n            \"resourceType\": \"Bundle\",\n            \"id\": \"{{messageId}}\",\n            \"type\": \"searchset\",\n\t\t\t\"entry\": [\n\t\t\t\t\t\t{\"resource\":{\n\t\t\t\t\t\t\"address\": [{\n\t\t\t\t\t\t\t\"city\": \"Nottingham\",\n\t\t\t\t\t\t\t\"district\": \"Derbyshire\",\n\t\t\t\t\t\t\t\"line\": [\n\t\t\t\t\t\t\t\t\"Regent Street\",\n\t\t\t\t\t\t\t\t\"Long Eaton\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"postalCode\": \"NG10 1QQ\"\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"gender\": \"male\",\n\t\t\t\t\t\t\"id\": \"{{include_practitioner_id}}\",\n\t\t\t\t\t\t\"identifier\": [{\n\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n\t\t\t\t\t\t\t\"value\": \"G8133438\"\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"meta\": {\n\t\t\t\t\t\t\t\"lastUpdated\": \"2019-05-20T14:54:43Z\",\n\t\t\t\t\t\t\t\"profile\": [\n\t\t\t\t\t\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"versionId\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"name\": [{\n\t\t\t\t\t\t\t\"family\": \"Bhatia\",\n\t\t\t\t\t\t\t\"given\": [\n\t\t\t\t\t\t\t\t\"AA\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"prefix\": [\n\t\t\t\t\t\t\t\t\"Dr.\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t\"resourceType\": \"Practitioner\",\n\t\t\t\t\t\t\"telecom\": [{\n\t\t\t\t\t\t\t\t\"system\": \"email\",\n\t\t\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\t\t\"value\": \"abhatia@nhs.skynet\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"system\": \"phone\",\n\t\t\t\t\t\t\t\t\"use\": \"work\",\n\t\t\t\t\t\t\t\t\"value\": \"0115 9737320\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t]\n        }\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/tests/search/{{bundleId}}/add",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"tests",
										"search",
										"{{bundleId}}",
										"add"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "fhir-response-service",
			"item": [
				{
					"name": "Can create an outcome operation from error response",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\":{\"error\": {\n        \"responseId\": \"086be1a9-47a5-4da7-875a-2b0282876cc8\",\n        \"requestId\": \"1f29c214-bab6-4f71-9997-c1866262a550\",\n        \"pipeline\": [\n            \"tests\",\n            \"repo\"\n        ],\n        \"operation\": \"CREATE\",\n        \"requestedOn\": \"2019-05-23T18:43:32Z\",\n        \"respondedOn\": \"2019-05-23T18:43:32Z\",\n        \"code\": \"processing\",\n        \"severity\": \"fatal\",\n        \"diagnostics\": \"Resource cannot be empty or undefined\",\n        \"status\": 400,\n        \"text\": \"Bad Request\"\n    }\n    }\n}"
						},
						"url": {
							"raw": "{{proxy_server_address}}/api/v1/tests/fhir-response/create",
							"host": [
								"{{proxy_server_address}}"
							],
							"path": [
								"api",
								"v1",
								"tests",
								"fhir-response",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "publisher-service",
			"item": [
				{
					"name": "Can create a subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
								"exec": [
									"//Expect 201 created...",
									"pm.test(\"Can create a subscription - 201 returned\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"//Created resource is returned in body - NOT operation outcome",
									"pm.test(\"Can create a subscription - created resource is returned)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.resourceType).to.exist &&",
									"    pm.expect(jsonData.resourceType).to.eql(\"Subscription\");",
									"});",
									"//Service assigned internal ID to resource...",
									"pm.test(\"Can create a subscription - Server assigned physical ID\", function () {",
									"    var jsonData = pm.response.json();",
									"        pm.expect(jsonData.id).to.exist;",
									"    //Set target test patient id...",
									"    pm.environment.set(\"fhir_created_subscription_id\", jsonData.id);",
									"});",
									"//Meta.versionid is present...",
									"pm.test(\"Can create a subscription - Resource.meta.versionId is present and === 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.versionId).to.exist &&",
									"        pm.expect(jsonData.meta.versionId).to.eql(1);",
									"});",
									"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
									"pm.test(\"Can create a subscription - Location header is present and in correct format /Subscription/[id]/_history/[vid]\", function () {",
									"    ",
									"    var header = pm.response.headers.get(\"Location\");",
									"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Subscription/\" + pm.environment.get(\"fhir_created_subscription_id\") + \"/_history/1\");",
									"});",
									"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
									"    pm.response.to.have.header(\"ETag\") && ",
									"        pm.response.to.have.header(\"Last-Modified\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceType\": \"Subscription\",\r\n    \"criteria\": \"Encounter?status=arrived&class=IMP\",\r\n    \"contact\": [\r\n      {\r\n          \"system\":\"email\",\r\n          \"value\":\"testing@test.fhir.nhs.uk\"\r\n      }\r\n    ],\r\n    \"reason\": \"A Test Subscription\",\r\n    \"status\": \"active\",\r\n      \"channel\": {\r\n\t\t\t\"type\": \"rest-hook\",\r\n        \t\"endpoint\": \"https://api.jsonbin.io/b\",\r\n        \t\"payload\": \"application/json\",\r\n        \t\"header\":[\r\n\t            \"secret-key:$2a$10$B/rO8dlkqg5FD0dhMgYk..fiH0/rNLlnTKxBiHYSBY/vIzjQFMoGO\",\r\n\t            \"private:true\",\r\n\t            \"name:Subscription Bin\",\r\n\t            \"collection-id:5c4850e31ca2fd17f8d7c80e\"]\r\n      }\r\n  }"
						},
						"url": {
							"raw": "{{proxy_server_address}}/fhir/stu3/Subscription",
							"host": [
								"{{proxy_server_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can create a Patient resource EEEGREYJOY",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
								"exec": [
									"//Expect 201 created...",
									"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"//Created resource is returned in body - NOT operation outcome",
									"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.resourceType).to.exist &&",
									"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
									"});",
									"//Service assigned internal ID to resource...",
									"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
									"    var jsonData = pm.response.json();",
									"        pm.expect(jsonData.id).to.exist;",
									"    //Set target test patient id...",
									"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
									"});",
									"//Meta.versionid is present...",
									"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.versionId).to.exist &&",
									"        pm.expect(jsonData.meta.versionId).to.eql(1);",
									"});",
									"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
									"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
									"    ",
									"    var header = pm.response.headers.get(\"Location\");",
									"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
									"});",
									"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
									"    pm.response.to.have.header(\"ETag\") && ",
									"        pm.response.to.have.header(\"Last-Modified\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "894473ea-c452-4d94-b9f7-75191b290674",
								"exec": [
									"//Get the last NHS number, increment it and persist new value in env vars...",
									"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
									"nhsNumber++;",
									"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"EEE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"EEE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1995-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
							"host": [
								"{{proxy_server_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an inpatient Encounter resource status === arrived",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
								"exec": [
									"//Expect 201 created...",
									"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"//Created resource is returned in body - NOT operation outcome",
									"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.resourceType).to.exist &&",
									"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
									"});",
									"//Service assigned internal ID to resource...",
									"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
									"    var jsonData = pm.response.json();",
									"        pm.expect(jsonData.id).to.exist;",
									"    //Set target test patient id...",
									"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
									"});",
									"//Meta.versionid is present...",
									"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.versionId).to.exist &&",
									"        pm.expect(jsonData.meta.versionId).to.eql(1);",
									"});",
									"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
									"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
									"    ",
									"    var header = pm.response.headers.get(\"Location\");",
									"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
									"});",
									"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
									"    pm.response.to.have.header(\"ETag\") && ",
									"        pm.response.to.have.header(\"Last-Modified\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "894473ea-c452-4d94-b9f7-75191b290674",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"messageId\", uuid.v4());",
									"pm.environment.set(\"requestId\", uuid.v4());",
									"",
									"var moment = require('moment');",
									"pm.environment.set(\"requestedOn\", moment().utc().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"type\":[\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"TYPE\",\n                            \"display\": \"type test\"\n                        }\n                    ]\n                }\n            ],\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"arrived\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
							"host": [
								"{{proxy_server_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Encounter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can subscription search be executed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
								"exec": [
									"pm.test(\"Can subscription search be executed - 200 returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Created resource is returned in body - NOT operation outcome",
									"pm.test(\"Can subscription search be executed - Bundle is returned)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.resourceType).to.exist &&",
									"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
									"});",
									"//1 resource is returned and that resource is a patient...",
									"pm.test(\"Can subscription search be executed - 1 resource is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entry.length).to.eql(1);",
									"});",
									"//Only 1 link is present in results...",
									"pm.test(\"Can subscription search be executed - only 1 link is present in the bundle\", function () {",
									"    var jsonData = pm.response.json();",
									"    var links = jsonData.link;",
									"    pm.expect(links.length).to.eql(1);",
									"});",
									"//relation self link is present",
									"pm.test(\"Can subscription search be executed - link relation === self is present in returned bundle\", function () {",
									"    var jsonData = pm.response.json();",
									"    var links = jsonData.link;",
									"    var self;",
									"    links.forEach(function(link) {",
									"       if(link.relation === \"self\") {",
									"           self = link.relation;",
									"       } ",
									"    }); ",
									"    pm.expect(self).to.eql(\"self\");",
									"});",
									"//Self url === request.url",
									"pm.test(\"Can subscription search be executed - self.url === request.url\", function () {",
									"    var jsonData = pm.response.json();",
									"    var links = jsonData.link;",
									"    var url;",
									"    links.forEach(function(link) {",
									"       if(link.relation === \"self\") {",
									"           url = link.url;",
									"       } ",
									"    }); ",
									"    pm.expect(url).to.eql(request.url);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "894473ea-c452-4d94-b9f7-75191b290674",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"messageId\", uuid.v4());",
									"pm.environment.set(\"requestId\", uuid.v4());",
									"",
									"var moment = require('moment');",
									"pm.environment.set(\"requestedOn\", moment().utc().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"arrived\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"{{lastTestNHSNumber}}\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{proxy_server_address}}/fhir/stu3/Encounter?_id={{fhir_created_encounter_id}}&status=arrived&class=IMP",
							"host": [
								"{{proxy_server_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Encounter"
							],
							"query": [
								{
									"key": "_id",
									"value": "{{fhir_created_encounter_id}}"
								},
								{
									"key": "status",
									"value": "arrived"
								},
								{
									"key": "class",
									"value": "IMP"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication-service",
			"item": [
				{
					"name": "Can validate a token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7ec5d73-bd43-4f44-af47-eba71ad106bc",
								"exec": [
									"//Get the last NHS number, increment it and persist new value in env vars...",
									"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
									"nhsNumber++;",
									"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"EEE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"EEE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1995-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
							"host": [
								"{{proxy_server_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can validation fail for invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7ec5d73-bd43-4f44-af47-eba71ad106bc",
								"exec": [
									"var invalid_jwt = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NjMxNDEzMjE5MzYsImlhdCI6MTU2MTQwNzExNCwiaXNzIjoiMTIzNDU2NTY3NTY3NTY3NTY3NTY3NTYzNDYzNDU2MzQ2IiwiYXBwbGljYXRpb24iOiJhdXRoZW50aWNhdGlvbiIsInRpbWVvdXQiOjE1NjE1Nzk5MTQ4MjIsInFld2QiOiI3ZjZkOGZiMjg3N2ExNWVhNjM3OGU0Yjg4ODk3N2VhMjhjNDBhMzY3NTE4YmE4ODA0YTFmMDA0ZGIyMTQ5ZjkzNmE0OTA1YTA2NWI1YjZhMjk1MzRiY2I3MjAxODhlODkzMTg2OTc4ZWI3ODk0ZGYxZjVjMWVlZGU1ZmRjYWUzYTA4NzhkYjBjY2ZjNDRjZWE2YzI2OTlhOGMyMjA3MDJjZDA5ZWU2MzljOTdkM2JmNmFlY2ZlYTJkODY1ZTRkZjMiLCJhdWQiOiJJQU0iLCJqdGkiOiIyODJmODAzMC05NmE3LTRiODctODYwNi1mOGQyN2E2MjkzZDMifQ.BJz3MnDrMqOLzpZmh5S_CA8GdtxoFjhvI2o-V80aH_o\";",
									"pm.environment.set(\"jwt_token\",invalid_jwt);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"EEE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"EEE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1995-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
							"host": [
								"{{proxy_server_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can fail authentication with a 401 status response",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a37c156a-d9f1-4d40-a50a-afbcd667ce62",
								"exec": [
									"pm.test(\"Can fail authentication with a 401 status response - 401 returned\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "grant_type",
								"type": "text",
								"value": "client_credentials"
							},
							{
								"key": "client_id",
								"type": "text",
								"value": "{{registered_client_id}}"
							},
							{
								"key": "client_secret",
								"type": "text",
								"value": "NOTTHESECRET!2312312"
							}
						],
						"url": {
							"raw": "{{proxy_server_address}}/api/v1/auth/token",
							"host": [
								"{{proxy_server_address}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "reverse-proxy",
			"item": [
				{
					"name": "Can create an Organization via reverse proxy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04bff793-65e8-4763-b629-bdfc579adc12",
								"exec": [
									"//Expect 201 created...",
									"pm.test(\"Can Create an Organization resource - 201 returned\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"//Created resource is returned in body - NOT operation outcome",
									"pm.test(\"Can Create an Organization resource - created resource is returned)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.resourceType).to.exist &&",
									"    pm.expect(jsonData.resourceType).to.eql(\"Organization\");",
									"});",
									"//Service assigned internal ID to resource...",
									"pm.test(\"Can Create an Organization resource - Server assigned physical ID\", function () {",
									"    var jsonData = pm.response.json();",
									"        pm.expect(jsonData.id).to.exist;",
									"    //Set target test patient id...",
									"    pm.environment.set(\"fhir_created_organization_id\", jsonData.id);",
									"});",
									"//Meta.versionid is present...",
									"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.versionId).to.exist &&",
									"        pm.expect(jsonData.meta.versionId).to.eql(1);",
									"});",
									"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
									"pm.test(\"Can Create an Organization resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
									"    ",
									"    var header = pm.response.headers.get(\"Location\");",
									"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Organization/\" + pm.environment.get(\"fhir_created_organization_id\") + \"/_history/1\");",
									"});",
									"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
									"    pm.response.to.have.header(\"ETag\") && ",
									"        pm.response.to.have.header(\"Last-Modified\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"resourceType\": \"Organization\",\n            \"meta\": {\n                \"profile\": [\n                    \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n                ]\n            },\n            \"identifier\": [\n                {\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n                    \"value\": \"03X\"\n                }\n            ],\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/organization-type\",\n                            \"code\": \"prov\",\n                            \"display\": \"Healthcare Provider\"\n                        }\n                    ]\n                }\n            ],\n            \"name\": \"NHS EREWASH\",\n            \"address\": [\n                {\n                    \"use\": \"work\",\n                    \"type\": \"both\",\n                    \"line\": [\n                        \"Toll Bar House\",\n                        \"1 Derby Road\"\n                    ],\n                    \"city\": \"Ilkeston\",\n                    \"district\": \"Derbyshire\",\n                    \"postalCode\": \"DE7 5FH\"\n                }\n            ]\n        }"
						},
						"url": {
							"raw": "{{reverse_proxy_address}}/fhir/stu3/Organization",
							"host": [
								"{{reverse_proxy_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can register client",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "663d7185-198f-4fc1-8e17-272bb6aae47c",
								"exec": [
									"//Get the last NHS number, increment it and persist new value in env vars...",
									"var uuid = require('uuid');",
									"pm.environment.set(\"messageId\", uuid.v4());",
									"pm.environment.set(\"requestId\", uuid.v4());",
									"",
									"var moment = require('moment');",
									"pm.environment.set(\"requestedOn\", moment().utc().format());",
									"",
									"pm.environment.set('registered_client_secret', 'TopSecret!&*123')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db9f7fea-81ae-494a-8105-3d1630013a3b",
								"exec": [
									"pm.test(\"Can register client - 200 returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Registered Client is returned",
									"pm.test(\"Can register client - a registered client is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.results.id).to.exist &&",
									"            pm.expect(jsonData.data.results.name).to.exist;",
									"            ",
									"    pm.environment.set(\"registered_client_id\", jsonData.data.results.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":\n    {\n\t\t\"name\":\"A Trusted Client\",\n\t\t\"secret\":\"{{registered_client_secret}}\"\n\t}\n}\n\n"
						},
						"url": {
							"raw": "{{reverse_proxy_address}}/api/v1/auth/register",
							"host": [
								"{{reverse_proxy_address}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can authenticate and receive token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b68ff901-c2f2-4cf6-867e-d057b1146dd2",
								"exec": [
									"pm.test(\"Can authenticate and receive token - 200 returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Registered Client is returned",
									"pm.test(\"Can authenticate and receive token - login is a success and a JWT token is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ok).to.eql(true) && ",
									"        pm.expect(jsonData.token).to.exist",
									"            ",
									"    pm.environment.set(\"jwt_token\", jsonData.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_id\":\"{{registered_client_id}}\",\n\t\"client_secret\":\"{{registered_client_secret}}\"\n}"
						},
						"url": {
							"raw": "{{reverse_proxy_address}}/api/v1/auth/token",
							"host": [
								"{{reverse_proxy_address}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can validate a token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7ec5d73-bd43-4f44-af47-eba71ad106bc",
								"exec": [
									"//Get the last NHS number, increment it and persist new value in env vars...",
									"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
									"nhsNumber++;",
									"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"EEE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"EEE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1995-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{reverse_proxy_address}}/fhir/stu3/Patient",
							"host": [
								"{{reverse_proxy_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can validation fail for invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7ec5d73-bd43-4f44-af47-eba71ad106bc",
								"exec": [
									"var invalid_jwt = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NjMxNDEzMjE5MzYsImlhdCI6MTU2MTQwNzExNCwiaXNzIjoiMTIzNDU2NTY3NTY3NTY3NTY3NTY3NTYzNDYzNDU2MzQ2IiwiYXBwbGljYXRpb24iOiJhdXRoZW50aWNhdGlvbiIsInRpbWVvdXQiOjE1NjE1Nzk5MTQ4MjIsInFld2QiOiI3ZjZkOGZiMjg3N2ExNWVhNjM3OGU0Yjg4ODk3N2VhMjhjNDBhMzY3NTE4YmE4ODA0YTFmMDA0ZGIyMTQ5ZjkzNmE0OTA1YTA2NWI1YjZhMjk1MzRiY2I3MjAxODhlODkzMTg2OTc4ZWI3ODk0ZGYxZjVjMWVlZGU1ZmRjYWUzYTA4NzhkYjBjY2ZjNDRjZWE2YzI2OTlhOGMyMjA3MDJjZDA5ZWU2MzljOTdkM2JmNmFlY2ZlYTJkODY1ZTRkZjMiLCJhdWQiOiJJQU0iLCJqdGkiOiIyODJmODAzMC05NmE3LTRiODctODYwNi1mOGQyN2E2MjkzZDMifQ.BJz3MnDrMqOLzpZmh5S_CA8GdtxoFjhvI2o-V80aH_o\";",
									"pm.environment.set(\"jwt_token\",invalid_jwt);",
									"//Get the last NHS number, increment it and persist new value in env vars...",
									"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
									"nhsNumber++;",
									"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceType\": \"Patient\",\r\n    \"identifier\": [{\r\n        \"extension\": [{\r\n            \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\r\n                    \"code\": \"01\",\r\n                    \"display\": \"Number present and verified\"\r\n                }]\r\n            }\r\n        }],\r\n        \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\r\n        \"value\": \"{{lastTestNHSNumber}}\"\r\n    }],\r\n    \"active\": true,\r\n    \"name\": [{\r\n        \"use\": \"official\",\r\n        \"family\": \"GREYJOY\",\r\n        \"given\": [\r\n            \"EEE\"\r\n        ],\r\n        \"prefix\": [\r\n            \"EEE\"\r\n        ]\r\n    }],\r\n    \"gender\": \"female\",\r\n    \"birthDate\": \"1995-04-05\",\r\n    \"address\": [{\r\n        \"use\": \"home\",\r\n        \"type\": \"physical\"\r\n    }],\r\n    \"maritalStatus\": {\r\n        \"coding\": [{\r\n            \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\r\n            \"code\": \"S\",\r\n            \"display\": \"Never Married\"\r\n        }]\r\n    },\r\n    \"generalPractitioner\": [{\r\n        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\r\n        \"display\": \"Mrs AA Bhatia\"\r\n    }],\r\n    \"managingOrganization\": {\r\n        \"reference\": \"Organization/{{fhir_created_organization_id}}\",\r\n        \"display\": \"HSCIC test Practice\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{reverse_proxy_address}}/fhir/stu3/Patient",
							"host": [
								"{{reverse_proxy_address}}"
							],
							"path": [
								"fhir",
								"stu3",
								"Patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can fail authentication with a 401 status response",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a37c156a-d9f1-4d40-a50a-afbcd667ce62",
								"exec": [
									"pm.test(\"Can fail authentication with a 401 status response - 401 returned\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_id\":\"{{registered_client_id}}\",\n\t\"client_secret\":\"NOTTHESECRET!2312312\"\n}"
						},
						"url": {
							"raw": "{{reverse_proxy_address}}/api/v1/auth/token",
							"host": [
								"{{reverse_proxy_address}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "fhir-hack-2019",
			"item": [
				{
					"name": "michaels-story-episode-4",
					"item": [
						{
							"name": "Can register client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "663d7185-198f-4fc1-8e17-272bb6aae47c",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());",
											"",
											"var plainTextSecret = '';",
											"pm.environment.set('registered_client_secret', 'TopSecret!&*123')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db9f7fea-81ae-494a-8105-3d1630013a3b",
										"exec": [
											"pm.test(\"Can register client - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Registered Client is returned",
											"pm.test(\"Can register client - a registered client is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.results.id).to.exist &&",
											"            pm.expect(jsonData.data.results.name).to.exist;",
											"            ",
											"    pm.environment.set(\"registered_client_id\", jsonData.data.results.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"serviceMode\":\"standalone\",\n    \"messageId\":\"{{messageId}}\",\n    \"requestId\":\"{{requestId}}\",\n    \"requestedOn\":\"{{requestedOn}}\",\n    \"data\":\n    {\n\t\t\"name\":\"A Trusted Client\",\n\t\t\"secret\":\"{{registered_client_secret}}\"\n\t}\n}\n\n"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/auth/register",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can authenticate and receive token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b68ff901-c2f2-4cf6-867e-d057b1146dd2",
										"exec": [
											"pm.test(\"Can authenticate and receive token - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Registered Client is returned",
											"pm.test(\"Can authenticate and receive token - login is a success and a JWT token is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ok).to.eql(true) && ",
											"        pm.expect(jsonData.token).to.exist",
											"            ",
											"    pm.environment.set(\"jwt_token\", jsonData.token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_id\":\"{{registered_client_id}}\",\n\t\"client_secret\":\"{{registered_client_secret}}\"\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/api/v1/auth/token",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create Michael's GP Practice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Organization resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Organization resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Organization\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Organization resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_organization_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Organization resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Organization/\" + pm.environment.get(\"fhir_created_organization_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Organization\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Organization-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n            \"value\": \"A20047\"\n        }\n    ],\n    \"active\": false,\n    \"name\": \"HSCIC test Practice\",\n    \"telecom\": [\n        {\n            \"system\": \"phone\",\n            \"use\": \"work\"\n        }\n    ],\n    \"address\": [\n        {\n            \"use\": \"work\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Organization"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create Michael's GP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65282cbb-c6e9-4b48-9692-7a433c4bdcb3",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Practitioner resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Practitioner resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Practitioner\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Practitioner resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_practitioner_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Practitioner resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Practitioner resource - Location header is present and in correct format /Organization/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Practitioner/\" + pm.environment.get(\"fhir_created_practitioner_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Practitioner resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Practitioner\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Practitioner-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n            \"value\": \"G13579135\"\n        }\n    ],\n    \"active\": false,\n    \"name\": [\n        {\n            \"family\": \"Gilbert\",\n            \"given\": [\n                \"Nichole\"\n            ],\n            \"prefix\": [\n                \"Miss\"\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Practitioner",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Practitioner"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create Michael",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create a Patient resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create a Patient resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Patient\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create a Patient resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_patient_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create a Patient resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create a Patient resource - Location header is present and in correct format /Patient/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_patient_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Patient resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"//Get the last NHS number, increment it and persist new value in env vars...",
											"var nhsNumber = pm.environment.get(\"lastTestNHSNumber\");",
											"nhsNumber++;",
											"pm.environment.set(\"lastTestNHSNumber\", nhsNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"resourceType\": \"Patient\",\n        \"meta\": {\n            \"profile\": [\n                \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Patient-1\"\n            ]\n        },\n        \"identifier\": [\n            {\n                \"extension\": [\n                    {\n                        \"url\": \"https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSNumberVerificationStatus-1\",\n                        \"valueCodeableConcept\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-NHSNumberVerificationStatus-1\",\n                                    \"code\": \"01\",\n                                    \"display\": \"Number present and verified\"\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n                \"value\": \"9658218873\"\n            },\n            {\n                \"system\": \"https://fhir.rkh.nhs.uk/Id/local-patient-identifier\",\n                \"value\": \"A1234521\"\n            }\n        ],\n        \"active\": true,\n        \"name\": [\n          {\n            \"use\": \"official\",\n            \"family\": \"MEAKIN\",\n            \"given\": [\n              \"Michael\"\n            ],\n            \"prefix\": [\n              \"Mr\"\n            ]\n          }\n        ],\n        \"telecom\": [\n          {\n            \"system\": \"phone\",\n            \"value\": \"0208 412 8867\",\n            \"use\": \"home\"\n          }\n        ],\n        \"gender\": \"male\",\n        \"birthDate\": \"1960-06-06\",\n        \"address\": [\n          {\n            \"use\": \"home\",\n            \"type\": \"physical\",\n            \"line\": [\n              \"7 Trinity Way\"\n            ],\n            \"city\": \"London\",\n            \"postalCode\": \"W3 7JF\"\n          }\n        ],\n        \"maritalStatus\": {\n            \"coding\": [\n                {\n                    \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n                    \"code\": \"S\",\n                    \"display\": \"Never Married\"\n                }\n            ]\n        },\n        \"generalPractitioner\": [\n            {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Miss Nichole Gilbert\"\n            }\n        ],\n        \"managingOrganization\": {\n            \"reference\": \"Organization/{{fhir_created_organization_id}}\",\n            \"display\": \"HSCIC test Practice\"\n        }\n    }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can find Michael using his NHS Number and include GP, GP Practice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|9658218873&_include=Patient:general-practitioner&_include=Patient:organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|9658218873"
										},
										{
											"key": "_include",
											"value": "Patient:general-practitioner"
										},
										{
											"key": "_include",
											"value": "Patient:organization"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can find Michael using his NHS Number and include GP, GP Practice Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NjMxNDEzMjE5MzYsImlhdCI6MTU2MTQwNzExNCwiaXNzIjoiMTIzNDU2NTY3NTY3NTY3NTY3NTY3NTYzNDYzNDU2MzQ2IiwiYXBwbGljYXRpb24iOiJhdXRoZW50aWNhdGlvbiIsInRpbWVvdXQiOjE1NjE1Nzk5MTQ4MjIsInFld2QiOiI3ZjZkOGZiMjg3N2ExNWVhNjM3OGU0Yjg4ODk3N2VhMjhjNDBhMzY3NTE4YmE4ODA0YTFmMDA0ZGIyMTQ5ZjkzNmE0OTA1YTA2NWI1YjZhMjk1MzRiY2I3MjAxODhlODkzMTg2OTc4ZWI3ODk0ZGYxZjVjMWVlZGU1ZmRjYWUzYTA4NzhkYjBjY2ZjNDRjZWE2YzI2OTlhOGMyMjA3MDJjZDA5ZWU2MzljOTdkM2JmNmFlY2ZlYTJkODY1ZTRkZjMiLCJhdWQiOiJJQU0iLCJqdGkiOiIyODJmODAzMC05NmE3LTRiODctODYwNi1mOGQyN2E2MjkzZDMifQ.BJz3MnDrMqOLzpZmh5S_CA8GdtxoFjhvI2o-V80aH_o",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?identifier=https://fhir.nhs.uk/Id/nhs-number|9658218873&_include=Patient:general-practitioner&_include=Patient:organization",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "https://fhir.nhs.uk/Id/nhs-number|9658218873"
										},
										{
											"key": "_include",
											"value": "Patient:general-practitioner"
										},
										{
											"key": "_include",
											"value": "Patient:organization"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a finished inpatient encounter for Michael",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can Create an Encounter resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can Create an Encounter resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Encounter\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can Create an Encounter resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_encounter_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can Create an Organization resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can Create an Encounter resource - Location header is present and in correct format /Encounter/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Encounter/\" + pm.environment.get(\"fhir_created_encounter_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can Create a Encounter resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"messageId\", uuid.v4());",
											"pm.environment.set(\"requestId\", uuid.v4());",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"requestedOn\", moment().utc().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Encounter\",\n    \"meta\": {\n        \"profile\": [\n            \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Encounter-1\"\n        ]\n    },\n    \"identifier\": [\n        {\n            \"system\": \"https://tools.ietf.org/html/rfc4122\",\n            \"value\": \"db00be4b-2f33-4cc3-8eff-4a57e56b185b\"\n        }\n    ],\n    \"status\": \"finished\",\n    \"class\": {\n        \"system\": \"http://hl7.org/fhir/v3/ActCode\",\n        \"code\": \"IMP\",\n        \"display\": \"inpatient encounter\"\n    },\n    \"subject\": {\n        \"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\"value\":\"9658218873\"}\n    },\n    \"participant\": [\n        {\n            \"type\": [\n                {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://hl7.org/fhir/v3/ParticipationType\",\n                            \"code\": \"DIS\",\n                            \"display\": \"discharger\"\n                        }\n                    ]\n                }\n            ],\n            \"individual\": {\n                \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                \"display\": \"Mrs AA Bhatia\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Encounter",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Encounter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\"resourceType\": \"Observation\",\n \t\"meta\": {\n \t\t\"profile\": [\n \t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n \t\t]\n \t},\n \t\"status\": \"final\",\n \t\"category\": [{\n \t\t\"coding\": [{\n \t\t\t\"system\": \"http://hl7.org/fhir/observation-category\",\n \t\t\t\"code\": \"vital-signs\",\n \t\t\t\"display\": \"Vital Signs\"\n \t\t}],\n \t\t\"text\": \"Vital Signs\"\n \t}],\n \t\"code\": {\n \t\t\"coding\": [{\n \t\t\t\"system\": \"http://snomed.info/sct\",\n \t\t\t\"code\": \"75367002\",\n \t\t\t\"display\": \"Blood pressure\"\n \t\t}],\n \t\t\"text\": \"Blood pressure\"\n \t},\n \t\"subject\": {\n \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n            \"value\": \"9658218873\"\n        },\n        \"display\": \"MR Mike MEAKIN\"\n \t},\n \t\"context\": {\n \t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n \t},\n \t\"effectiveDateTime\": \"2019-06-27T10:49:25+00:00\",\n \t\"component\": [{\n \t\t\t\"code\": {\n \t\t\t\t\"coding\": [{\n \t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n \t\t\t\t\t\"code\": \"1091811000000102\",\n \t\t\t\t\t\"display\": \"Diastolic arterial pressure\"\n \t\t\t\t}]\n \t\t\t},\n \t\t\t\"valueQuantity\": {\n \t\t\t\t\"value\": 87,\n \t\t\t\t\"unit\": \"mm[Hg]\",\n \t\t\t\t\"system\": \"http://unitsofmeasure.org\",\n \t\t\t\t\"code\": \"mm[Hg]\"\n \t\t\t}\n \t\t},\n \t\t{\n \t\t\t\"code\": {\n \t\t\t\t\"coding\": [{\n \t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n \t\t\t\t\t\"code\": \"72313002\",\n \t\t\t\t\t\"display\": \"Systolic blood pressure\"\n \t\t\t\t}]\n \t\t\t},\n \t\t\t\"valueQuantity\": {\n \t\t\t\t\"value\": 127,\n \t\t\t\t\"unit\": \"mm[Hg]\",\n \t\t\t\t\"system\": \"http://unitsofmeasure.org\",\n \t\t\t\t\"code\": \"mm[Hg]\"\n \t\t\t}\n \t\t}\n \t]\n }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"Observation\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n\t\t]\n\t},\n\t\"status\": \"final\",\n\t\"category\": [{\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://hl7.org/fhir/observation-category\",\n\t\t\t\"code\": \"vital-signs\",\n\t\t\t\"display\": \"Vital Signs\"\n\t\t}],\n\t\t\"text\": \"Vital Signs\"\n\t}],\n\t\"code\": {\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"75367002\",\n\t\t\t\"display\": \"Blood pressure\"\n\t\t}],\n\t\t\"text\": \"Blood pressure\"\n\t},\n \t\"subject\": {\n \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n            \"value\": \"9658218873\"\n        },\n        \"display\": \"MR Mike MEAKIN\"\n \t},\n\t\"context\": {\n\t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n\t},\n\t\"effectiveDateTime\": \"2019-06-27T10:47:34+00:00\",\n\t\"component\": [{\n\t\t\t\"code\": {\n\t\t\t\t\"coding\": [{\n\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\"code\": \"72313002\",\n\t\t\t\t\t\"display\": \"Systolic blood pressure\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\"valueQuantity\": {\n\t\t\t\t\"value\": 180,\n\t\t\t\t\"unit\": \"mm[Hg]\",\n\t\t\t\t\"system\": \"http://unitsofmeasure.org\",\n\t\t\t\t\"code\": \"mm[Hg]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"code\": {\n\t\t\t\t\"coding\": [{\n\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\"code\": \"1091811000000102\",\n\t\t\t\t\t\"display\": \"Diastolic arterial pressure\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\"valueQuantity\": {\n\t\t\t\t\"value\": 150,\n\t\t\t\t\"unit\": \"mm[Hg]\",\n\t\t\t\t\"system\": \"http://unitsofmeasure.org\",\n\t\t\t\t\"code\": \"mm[Hg]\"\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Observation\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n                    ]\n                },\n                \"status\": \"final\",\n                \"category\": [\n                    {\n                        \"coding\": [\n                            {\n                                \"system\": \"http://hl7.org/fhir/observation-category\",\n                                \"code\": \"vital-signs\",\n                                \"display\": \"Vital Signs\"\n                            }\n                        ],\n                        \"text\": \"Vital Signs\"\n                    }\n                ],\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://snomed.info/sct\",\n                            \"code\": \"75367002\",\n                            \"display\": \"Blood pressure\"\n                        }\n                    ],\n                    \"text\": \"Blood pressure\"\n                },\n\t\t\t \t\"subject\": {\n\t\t\t \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\t        \"identifier\": {\n\t\t\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t            \"value\": \"9658218873\"\n\t\t\t        },\n\t\t\t        \"display\": \"MR Mike MEAKIN\"\n\t\t\t \t},\n                \"context\": {\n                    \"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n                },\n                \"effectiveDateTime\": \"2019-06-27T10:46:45+00:00\",\n                \"component\": [\n                    {\n                        \"code\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"http://snomed.info/sct\",\n                                    \"code\": \"72313002\",\n                                    \"display\": \"Systolic blood pressure\"\n                                }\n                            ]\n                        },\n                        \"valueQuantity\": {\n                            \"value\": 122,\n                            \"unit\": \"mm[Hg]\",\n                            \"system\": \"http://unitsofmeasure.org\",\n                            \"code\": \"mm[Hg]\"\n                        }\n                    },\n                    {\n                        \"code\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"http://snomed.info/sct\",\n                                    \"code\": \"1091811000000102\",\n                                    \"display\": \"Diastolic arterial pressure\"\n                                }\n                            ]\n                        },\n                        \"valueQuantity\": {\n                            \"value\": 82,\n                            \"unit\": \"mm[Hg]\",\n                            \"system\": \"http://unitsofmeasure.org\",\n                            \"code\": \"mm[Hg]\"\n                        }\n                    }\n                ]\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"Observation\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://fhir.yas.nhs.uk/Observation/Identifier\",\n\t\t\"value\": \"529\"\n\t}],\n\t\"status\": \"final\",\n\t\"category\": [{\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://hl7.org/fhir/observation-category\",\n\t\t\t\"code\": \"vital-signs\",\n\t\t\t\"display\": \"Vital Signs\"\n\t\t}],\n\t\t\"text\": \"Vital Signs\"\n\t}],\n\t\"code\": {\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"75367002\",\n\t\t\t\"display\": \"Blood pressure\"\n\t\t}],\n\t\t\"text\": \"Blood pressure\"\n\t},\n \t\"subject\": {\n \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n            \"value\": \"9658218873\"\n        },\n        \"display\": \"MR Mike MEAKIN\"\n \t},\n\t\"context\": {\n\t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n\t},\n\t\"effectiveDateTime\": \"2018-11-29T08:54:18+00:00\",\n\t\"component\": [{\n\t\t\t\"code\": {\n\t\t\t\t\"coding\": [{\n\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\"code\": \"72313002\",\n\t\t\t\t\t\"display\": \"Systolic blood pressure\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\"valueQuantity\": {\n\t\t\t\t\"value\": 140,\n\t\t\t\t\"unit\": \"mm[Hg]\",\n\t\t\t\t\"system\": \"http://unitsofmeasure.org\",\n\t\t\t\t\"code\": \"mm[Hg]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"code\": {\n\t\t\t\t\"coding\": [{\n\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\"code\": \"1091811000000102\",\n\t\t\t\t\t\"display\": \"Diastolic arterial pressure\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\"valueQuantity\": {\n\t\t\t\t\"value\": 80,\n\t\t\t\t\"unit\": \"mm[Hg]\",\n\t\t\t\t\"system\": \"http://unitsofmeasure.org\",\n\t\t\t\t\"code\": \"mm[Hg]\"\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Observation\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"system\": \"https://fhir.yas.nhs.uk/Observation/Identifier\",\n                        \"value\": \"528\"\n                    }\n                ],\n                \"status\": \"final\",\n                \"category\": [\n                    {\n                        \"coding\": [\n                            {\n                                \"system\": \"http://hl7.org/fhir/observation-category\",\n                                \"code\": \"vital-signs\",\n                                \"display\": \"Vital Signs\"\n                            }\n                        ],\n                        \"text\": \"Vital Signs\"\n                    }\n                ],\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://snomed.info/sct\",\n                            \"code\": \"276885007\",\n                            \"display\": \"Core body temperature\"\n                        }\n                    ],\n                    \"text\": \"Core body temperature\"\n                },\n\t\t\t \t\"subject\": {\n\t\t\t \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\t        \"identifier\": {\n\t\t\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t            \"value\": \"9658218873\"\n\t\t\t        },\n\t\t\t        \"display\": \"MR Mike MEAKIN\"\n\t\t\t \t},\n                \"context\": {\n                    \"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n                },\n                \"effectiveDateTime\": \"2018-11-29T08:54:18+00:00\",\n                \"valueQuantity\": {\n                    \"value\": 37,\n                    \"unit\": \"Cel\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"Cel\"\n                }\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"Observation\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://fhir.yas.nhs.uk/Observation/Identifier\",\n\t\t\"value\": \"527\"\n\t}],\n\t\"status\": \"final\",\n\t\"category\": [{\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://hl7.org/fhir/observation-category\",\n\t\t\t\"code\": \"vital-signs\",\n\t\t\t\"display\": \"Vital Signs\"\n\t\t}],\n\t\t\"text\": \"Vital Signs\"\n\t}],\n\t\"code\": {\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"103228002\",\n\t\t\t\"display\": \"Blood oxygen saturation\"\n\t\t}],\n\t\t\"text\": \"Blood oxygen saturation\"\n\t},\n \t\"subject\": {\n \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n            \"value\": \"9658218873\"\n        },\n        \"display\": \"MR Mike MEAKIN\"\n \t},\n\t\"context\": {\n\t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n\t},\n\t\"effectiveDateTime\": \"2018-11-29T08:54:18+00:00\",\n\t\"valueQuantity\": {\n\t\t\"value\": 98,\n\t\t\"unit\": \"%\",\n\t\t\"system\": \"http://unitsofmeasure.org\",\n\t\t\"code\": \"%\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\t\t\t{\n                \"resourceType\": \"Observation\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"system\": \"https://fhir.yas.nhs.uk/Observation/Identifier\",\n                        \"value\": \"526\"\n                    }\n                ],\n                \"status\": \"final\",\n                \"category\": [\n                    {\n                        \"coding\": [\n                            {\n                                \"system\": \"http://hl7.org/fhir/observation-category\",\n                                \"code\": \"vital-signs\",\n                                \"display\": \"Vital Signs\"\n                            }\n                        ],\n                        \"text\": \"Vital Signs\"\n                    }\n                ],\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://snomed.info/sct\",\n                            \"code\": \"364075005\",\n                            \"display\": \"Heart rate\"\n                        }\n                    ],\n                    \"text\": \"Heart rate\"\n                },\n\t\t\t \t\"subject\": {\n\t\t\t \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\t        \"identifier\": {\n\t\t\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t            \"value\": \"9658218873\"\n\t\t\t        },\n\t\t\t        \"display\": \"MR Mike MEAKIN\"\n\t\t\t \t},\n                \"context\": {\n                    \"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n                },\n                \"effectiveDateTime\": \"2018-11-29T08:54:18+00:00\",\n                \"valueQuantity\": {\n                    \"value\": 93,\n                    \"unit\": \"/min\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"/min\"\n                }\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"Observation\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://fhir.yas.nhs.uk/Observation/Identifier\",\n\t\t\"value\": \"525\"\n\t}],\n\t\"status\": \"final\",\n\t\"category\": [{\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://hl7.org/fhir/observation-category\",\n\t\t\t\"code\": \"vital-signs\",\n\t\t\t\"display\": \"Vital Signs\"\n\t\t}],\n\t\t\"text\": \"Vital Signs\"\n\t}],\n\t\"code\": {\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"86290005\",\n\t\t\t\"display\": \"Respiratory rate\"\n\t\t}],\n\t\t\"text\": \"Respiratory rate\"\n\t},\n \t\"subject\": {\n \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n            \"value\": \"9658218873\"\n        },\n        \"display\": \"MR Mike MEAKIN\"\n \t},\n\t\"context\": {\n\t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n\t},\n\t\"effectiveDateTime\": \"2018-11-29T08:54:18+00:00\",\n\t\"valueQuantity\": {\n\t\t\"value\": 22,\n\t\t\"unit\": \"/min\",\n\t\t\"system\": \"http://unitsofmeasure.org\",\n\t\t\"code\": \"/min\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"Observation\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://fhir.yas.nhs.uk/Observation/Identifier\",\n\t\t\"value\": \"505\"\n\t}],\n\t\"status\": \"final\",\n\t\"category\": [{\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://hl7.org/fhir/observation-category\",\n\t\t\t\"code\": \"vital-signs\",\n\t\t\t\"display\": \"Vital Signs\"\n\t\t}],\n\t\t\"text\": \"Vital Signs\"\n\t}],\n\t\"code\": {\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"75367002\",\n\t\t\t\"display\": \"Blood pressure\"\n\t\t}],\n\t\t\"text\": \"Blood pressure\"\n\t},\n \t\"subject\": {\n \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n        \"identifier\": {\n            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n            \"value\": \"9658218873\"\n        },\n        \"display\": \"MR Mike MEAKIN\"\n \t},\n\t\"context\": {\n\t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n\t},\n\t\"effectiveDateTime\": \"2018-11-08T13:35:00+00:00\",\n\t\"performer\": [{\n\t\t\"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n\t\t\"display\": \"Dr Doug Ross\"\n\t}],\n\t\"comment\": \"APcomment for blood pressure\",\n\t\"component\": [{\n\t\t\t\"code\": {\n\t\t\t\t\"coding\": [{\n\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\"code\": \"72313002\",\n\t\t\t\t\t\"display\": \"Systolic blood pressure\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\"valueQuantity\": {\n\t\t\t\t\"value\": 180,\n\t\t\t\t\"unit\": \"mm[Hg]\",\n\t\t\t\t\"system\": \"http://unitsofmeasure.org\",\n\t\t\t\t\"code\": \"mm[Hg]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"code\": {\n\t\t\t\t\"coding\": [{\n\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\"code\": \"1091811000000102\",\n\t\t\t\t\t\"display\": \"Diastolic arterial pressure\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\"valueQuantity\": {\n\t\t\t\t\"value\": 120,\n\t\t\t\t\"unit\": \"mm[Hg]\",\n\t\t\t\t\"system\": \"http://unitsofmeasure.org\",\n\t\t\t\t\"code\": \"mm[Hg]\"\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create an Observation resource 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create an Observation resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create an Observation resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Observation\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create an Observation resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_observation_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create an Observation resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create an Observation resource - Location header is present and in correct format /Observation/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_observation_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create an Observation resource -  ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n                \"resourceType\": \"Observation\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Observation-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"system\": \"https://fhir.yas.nhs.uk/Observation/Identifier\",\n                        \"value\": \"504\"\n                    }\n                ],\n                \"status\": \"final\",\n                \"category\": [\n                    {\n                        \"coding\": [\n                            {\n                                \"system\": \"http://hl7.org/fhir/observation-category\",\n                                \"code\": \"vital-signs\",\n                                \"display\": \"Vital Signs\"\n                            }\n                        ],\n                        \"text\": \"Vital Signs\"\n                    }\n                ],\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://snomed.info/sct\",\n                            \"code\": \"276885007\",\n                            \"display\": \"Core body temperature\"\n                        }\n                    ],\n                    \"text\": \"Core body temperature\"\n                },\n\t\t\t \t\"subject\": {\n\t\t\t \t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\t        \"identifier\": {\n\t\t\t            \"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t            \"value\": \"9658218873\"\n\t\t\t        },\n\t\t\t        \"display\": \"MR Mike MEAKIN\"\n\t\t\t \t},\n                \"context\": {\n                    \"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n                },\n                \"effectiveDateTime\": \"2018-11-08T13:35:00+00:00\",\n                \"performer\": [\n                    {\n                        \"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n                        \"display\": \"Dr Doug Ross\"\n                    }\n                ],\n                \"valueQuantity\": {\n                    \"value\": 37,\n                    \"unit\": \"Cel\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"Cel\"\n                }\n            }"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can find Observations for Michael",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Observation?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Observation"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Condition for Michael",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Condition resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Condition resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Condition\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Condition resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_condition_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Condition resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Condition resource - Location header is present and in correct format /Condition/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_condition_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Condition resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"Condition\",\n\t\"meta\": {\n\t\t\"profile\": [\n\t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Condition-1\"\n\t\t]\n\t},\n\t\"identifier\": [{\n\t\t\"system\": \"https://fhir.leedsth.nhs.uk/Id/condition\",\n\t\t\"value\": \"10046\"\n\t}],\n\t\"clinicalStatus\": \"recurrence\",\n    \"category\": [\n        {\n            \"coding\": [\n                {\n                    \"system\": \"https://fhir.hl7.org.uk/STU3/CodeSystem/CareConnect-ConditionCategory-1\",\n                    \"code\": \"encounter-diagnosis\",\n                    \"display\": \"Encounter Diagnosis\"\n                }\n            ],\n            \"text\": \"Encounter Diagnosis\"\n        }\n    ],\n\t\"code\": {\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"452071000000109\",\n\t\t\t\"display\": \"Problems with sight\"\n\t\t}],\n\t\t\"text\": \"Problems with sight\"\n\t},\n\t\"subject\": {\n\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\"value\": \"{{lastTestNHSNumber}}\"\n\t\t}\n\t},\n\t\"onsetDateTime\": \"2018-07-31T23:00:00+00:00\",\n\t\"assertedDate\": \"2018-07-31T23:00:00+00:00\",\n\t\"context\": {\n\t\t\"reference\": \"Encounter/{{fhir_created_encounter_id}}\"\n\t},\n\t\"asserter\": {\n\t\t\"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\",\n\t\t\"display\": \"Dr JE Fildes\"\n\t}\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Condition",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Condition"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a CarePlan for Michael",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Condition resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Condition resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Condition\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Condition resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_condition_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Condition resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Condition resource - Location header is present and in correct format /Condition/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Patient/\" + pm.environment.get(\"fhir_created_condition_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Condition resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceType\": \"CarePlan\",\n\t\"identifier\": [{\n\t\t\"system\": \"https://fhir.midyorks.nhs.uk/CarePlan/Identifier\",\n\t\t\"value\": \"12312312312\"\n\t}],\n\t\"status\": \"active\",\n\t\"intent\": \"plan\",\n\t\"category\": [{\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\"code\": \"736373009\",\n\t\t\t\"display\": \"End Of Life Care Plan\"\n\t\t}],\n\t\t\"text\": \"End Of Life Care Plan\"\n\t}],\n\t\"subject\": {\n\t\t\"reference\": \"Patient/{{fhir_created_patient_id}}\",\n\t\t\"identifier\": {\n\t\t\t\"system\": \"https://fhir.nhs.uk/Id/nhs-number\",\n\t\t\t\"value\": \"9658218873\"\n\t\t}\n\t},\n\t\"period\": {\n\t\t\"start\": \"2018-07-31T23:00:00+00:00\"\n\t},\n\t\"author\": [{\n\t\t\"reference\": \"Practitioner/{{fhir_created_practitioner_id}}\"\n\t}],\n\t\"activity\": [{\n\t\t\t\"detail\": {\n\t\t\t\t\"code\": {\n\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\t\"code\": \"702779007\",\n\t\t\t\t\t\t\"display\": \"Emergency health care plan agreed\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"text\": \"Emergency health care plan agreed\"\n\t\t\t\t},\n\t\t\t\t\"status\": \"not-started\",\n\t\t\t\t\"description\": \"[18 Sept 2018] This plan is known to the Harrogate Palliative Care Team. If advice needed Monday-Friday 0830-1700 contact the team on 01423 553464. Outside these hours contact Saint Michael's Hospice (Harrogate) on 01423 872 658. [21 Nov 2018] At risk of hypercalcaemia (Corr Ca+ 3.01 on 20th Nov) - symptoms were increased confusion and drowsiness.\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"detail\": {\n\t\t\t\t\"code\": {\n\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\t\"code\": \"445141005\",\n\t\t\t\t\t\t\"display\": \"Nebuliser therapy using mask\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"text\": \"Nebuliser therapy using mask\"\n\t\t\t\t},\n\t\t\t\t\"status\": \"not-started\",\n\t\t\t\t\"description\": \"Nebulizer can be used to make patient more comfortable\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"detail\": {\n\t\t\t\t\"code\": {\n\t\t\t\t\t\"coding\": [{\n\t\t\t\t\t\t\"system\": \"http://snomed.info/sct\",\n\t\t\t\t\t\t\"code\": \"735324008\",\n\t\t\t\t\t\t\"display\": \"Treatment escalation plan\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"text\": \"Treatment escalation plan\"\n\t\t\t\t},\n\t\t\t\t\"status\": \"not-started\",\n\t\t\t\t\"description\": \"Wants to avoid hospital admission if possible, but would want to consider options as need arises.\"\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/CarePlan",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"CarePlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can find Michaels CarePlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//1 resource is returned and that resource is a patient...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(1);",
											"});",
											"//Nhs number === nhs number searched for",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number - nhs number === nhs number searched for\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.identifier[0].value).to.eql(pm.environment.get(\"lastTestNHSNumber\"));",
											"    ",
											"});",
											"//Only 1 link is present in results...",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - only 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//relation self link is present",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - link relation === self is present in returned bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var self;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           self = link.relation;",
											"       } ",
											"    }); ",
											"    pm.expect(self).to.eql(\"self\");",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Search FHIR Patient Resources by NHS Number and revinclude Encounter - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/CarePlan?patient=Patient/{{fhir_created_patient_id}}",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"CarePlan"
									],
									"query": [
										{
											"key": "patient",
											"value": "Patient/{{fhir_created_patient_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can find Michael by NHS Number and _revinclude CarePlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 200 success...",
											"pm.test(\"Can Patient search revinclude Consent - 200 returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Bundle is returned in body - NOT operation outcome",
											"pm.test(\"Can Patient search revinclude Consent - 1 resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Bundle\");",
											"});",
											"//5 links are present in results...",
											"pm.test(\"Can Patient search revinclude Consent - 1 link is present in the bundle\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    pm.expect(links.length).to.eql(1);",
											"});",
											"//Self url === request.url",
											"pm.test(\"Can Patient search revinclude Consent - self.url === request.url\", function () {",
											"    var jsonData = pm.response.json();",
											"    var links = jsonData.link;",
											"    var url;",
											"    links.forEach(function(link) {",
											"       if(link.relation === \"self\") {",
											"           url = link.url;",
											"       } ",
											"    }); ",
											"    pm.expect(url).to.eql(request.url);",
											"});",
											"//Bundle total === 2...",
											"pm.test(\"Can Patient search revinclude Consent - Bundle total === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.eql(1);",
											"});",
											"//1 resources are returned in this page...",
											"pm.test(\"Can Patient search revinclude Consent - 2 resources are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Consent - 1 patient resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[0].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Patient\");",
											"});",
											"",
											"pm.test(\"Can Patient search revinclude Consent - 1 consent resource is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    var resource = jsonData.entry[1].resource;",
											"    pm.expect(resource.resourceType).to.eql(\"Consent\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{proxy_server_address}}/fhir/stu3/Patient?_id={{fhir_created_patient_id}}&_revinclude=CarePlan:patient",
									"host": [
										"{{proxy_server_address}}"
									],
									"path": [
										"fhir",
										"stu3",
										"Patient"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{fhir_created_patient_id}}"
										},
										{
											"key": "_revinclude",
											"value": "CarePlan:patient"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Can create a Procedure resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405981bd-74b1-4fee-b114-ff43b71e00ab",
										"exec": [
											"//Expect 201 created...",
											"pm.test(\"Can create a Procedure resource - 201 returned\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//Created resource is returned in body - NOT operation outcome",
											"pm.test(\"Can create a Procedure resource - created resource is returned)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.resourceType).to.exist &&",
											"    pm.expect(jsonData.resourceType).to.eql(\"Procedure\");",
											"});",
											"//Service assigned internal ID to resource...",
											"pm.test(\"Can create a Procedure resource - Server assigned physical ID\", function () {",
											"    var jsonData = pm.response.json();",
											"        pm.expect(jsonData.id).to.exist;",
											"    //Set target test patient id...",
											"    pm.environment.set(\"fhir_created_procedure_id\", jsonData.id);",
											"});",
											"//Meta.versionid is present...",
											"pm.test(\"Can create a Procedure resource - Resource.meta.versionId is present and === 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.versionId).to.exist &&",
											"        pm.expect(jsonData.meta.versionId).to.eql(1);",
											"});",
											"//Location header is present and in correct format /Patient/[id]/_history/[vid]...",
											"pm.test(\"Can create a Procedure resource - Location header is present and in correct format /Procedure/[id]/_history/[vid]\", function () {",
											"    ",
											"    var header = pm.response.headers.get(\"Location\");",
											"    pm.expect(header).to.eql(pm.environment.get(\"proxy_server_address\") + \"/fhir/stu3/Procedure/\" + pm.environment.get(\"fhir_created_procedure_id\") + \"/_history/1\");",
											"});",
											"pm.test(\"Can create a Procedure resource - ETag and Last Updated headers are present\", function () {",
											"    pm.response.to.have.header(\"ETag\") && ",
											"        pm.response.to.have.header(\"Last-Modified\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "894473ea-c452-4d94-b9f7-75191b290674",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"type": "text",
										"value": "application/fhir+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\"resourceType\": \"Procedure\",\n \t\"meta\": {\n \t\t\"profile\": [\n \t\t\t\"https://fhir.hl7.org.uk/STU3/StructureDefinition/CareConnect-Procedure-1\"\n \t\t]\n \t},\n \t\"identifier\": [{\n \t\t\"system\": \"https://fhir.leedsth.nhs.uk/Id/procedure\",\n \t\t\"value\": \"100009\"\n \t}],\n \t\"status\": \"completed\",\n \t\"notDone\": false,\n\t\"category\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"387713003\",\n                \"display\": \"Surgical procedure\"\n            }\n        ]\n    },\n    \"code\": {\n        \"coding\": [\n            {\n                \"system\": \"http://snomed.info/sct\",\n                \"code\": \"713348007\",\n                \"display\": \"Thermoplasty of bronchus\"\n            }\n        ]\n    },\n \t\"subject\": {\n \t\t\"reference\": \"Patient/9314739d-6ab6-4caa-a820-15931023efcd\"\n \t},\n \t\"performedDateTime\": \"2019-06-24T09:15:00+00:00\",\n \t\"performer\": [\n            {\n                \"actor\": {\n                    \"reference\": \"Organisation/685b4997-cede-47dd-b5c4-6117992b4bf7\",\n                    \"display\": \"YORKSHIRE AND HUMBER CARE RECORD\"\n                }\n            }\n        ]\n }"
								},
								"url": {
									"raw": "http://apidemo.discoverydataservice.net:8080/fhir/STU3/Procedure",
									"protocol": "http",
									"host": [
										"apidemo",
										"discoverydataservice",
										"net"
									],
									"port": "8080",
									"path": [
										"fhir",
										"STU3",
										"Procedure"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}